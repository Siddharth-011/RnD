
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progleftNUMBERleftVARNAMEnonassocLVL1nonassocLVL2CALL CODE FNLT FUNCS GOTO GTE IF LTE NEWLINE NUMBER READ SPACES STLT STRT VARLT VARNAMEspace : %prec LVL1\n             | SPACES %prec LVL2boolop : space LTE space\n              | space GTE space\n              | space "<" space\n              | space ">" space\n              | space "=" "=" space\n              | space "!" "=" spaceboolexp : VARNAME boolop VARNAME\n               | VARNAME boolop NUMBER\n               | NUMBER boolop VARNAME\n               | NUMBER boolop NUMBERlhs : VARNAME\n           | "*" VARNAME\n           | VARNAME "-" ">" VARNAME\n           | VARNAME "." VARNAMErhs : boolexp\n           | lhs\n           | "&" VARNAME\n           | NUMBERstmt : lhs space "=" space rhs\n            | READ SPACES VARNAME\n            | GOTO SPACES NUMBER\n            | CALL SPACES VARNAME\n            | IF SPACES boolexp SPACES GOTO SPACES NUMBER\n            | IF SPACES VARNAME SPACES GOTO SPACES NUMBERtac : CODE ":"\n           | tacnl stmttacnl : tac NEWLINEnl : NEWLINEfuncbody : stmt\n                | funcbody nl stmtfunc : FUNCS ":" nl\n            | func VARNAME "{" spnl funcbody spnl "}" nl\n            | func VARNAME "{" spnl "}" nlspnl : space\n            | nllist : VARNAME\n            | list spnl "," spnl VARNAMEblist : "[" spnl list spnl "]"\n             | "[" spnl "]"declist : VARNAME space ":" space blist\n               | VARNAME "*" space ":" space blist\n               | declist spnl "," spnl VARNAME space ":" space blist\n               | declist spnl "," spnl VARNAME "*" space ":" space bliststructlist : spnl STLT space "=" space blist\n       varlist : nl VARLT space "=" space "{" spnl "}"\n               | nl VARLT space "=" space "{" spnl declist spnl "}"\n       funclist : nl FNLT space "=" space bliststructs : nl STRT ":" nl\n              | structs VARNAME space "{" spnl declist spnl "}" nl\n              | structs VARNAME space "{" spnl "}" nlprog : structlist varlist funclist structs func tac'
    
_lr_action_items = {'STLT':([0,3,4,5,6,7,],[-1,10,-36,-37,-2,-30,]),'SPACES':([0,10,13,17,19,21,25,34,37,39,42,43,44,45,46,47,49,53,63,67,68,69,70,72,73,74,76,77,78,79,80,81,82,83,86,92,99,103,104,106,107,108,109,111,112,113,114,115,116,117,118,119,122,123,124,125,128,132,138,139,142,145,146,149,150,152,153,155,156,159,160,162,],[6,6,6,6,6,6,6,6,6,6,6,57,-13,60,61,62,6,6,-14,6,-41,-38,6,-31,6,-22,-16,-23,-24,93,6,96,6,6,6,-15,6,-40,6,-32,-18,-21,-17,-13,-20,133,-12,-11,6,6,6,6,140,-9,-10,6,6,-19,6,6,6,-39,-25,-26,-42,6,-43,6,6,6,-44,-45,]),'NEWLINE':([0,2,8,11,27,32,33,36,37,39,40,41,49,53,63,65,67,68,69,70,71,72,74,76,77,78,83,84,85,86,92,103,104,105,106,107,108,109,111,112,114,115,123,124,127,128,129,132,145,146,149,150,153,160,162,],[7,7,7,7,38,7,7,-46,7,7,-27,-28,7,7,-14,-49,7,-41,-38,7,7,-31,-22,-16,-23,-24,7,7,-47,7,-15,-40,7,7,-32,-18,-21,-17,-13,-20,-12,-11,-9,-10,7,7,-48,-19,-39,-25,-26,-42,-43,-44,-45,]),'$end':([1,27,40,41,63,74,76,77,78,92,107,108,109,111,112,114,115,123,124,132,146,149,],[0,-53,-27,-28,-14,-22,-16,-23,-24,-15,-18,-21,-17,-13,-20,-12,-11,-9,-10,-19,-25,-26,]),']':([4,5,6,7,37,54,67,69,87,145,],[-36,-37,-2,-30,-1,68,-1,-38,103,-39,]),'VARNAME':([4,5,6,7,15,20,30,37,38,39,48,49,50,51,53,54,55,57,59,61,62,64,66,73,75,89,90,91,94,97,101,104,110,116,117,118,119,128,130,131,134,135,136,137,138,139,143,144,147,148,],[-36,-37,-2,-30,21,28,44,-1,-29,-1,63,-1,-33,-50,-1,69,44,74,76,78,81,82,82,-1,92,44,-35,111,115,123,-52,-1,132,-1,-1,-1,-1,-1,145,-34,-3,-4,-5,-6,-1,-1,-51,152,-7,-8,]),'}':([4,5,6,7,39,49,53,55,63,64,66,68,70,72,74,76,77,78,83,86,88,89,92,100,102,103,106,107,108,109,111,112,114,115,123,124,132,146,149,150,153,160,162,],[-36,-37,-2,-30,-1,-1,-1,71,-14,84,85,-41,-1,-31,-22,-16,-23,-24,-1,-1,105,-37,-15,127,129,-40,-32,-18,-21,-17,-13,-20,-12,-11,-9,-10,-19,-25,-26,-42,-43,-44,-45,]),'READ':([4,5,6,7,30,38,39,55,89,],[-36,-37,-2,-30,43,-29,-1,43,43,]),'GOTO':([4,5,6,7,30,38,39,55,89,93,96,],[-36,-37,-2,-30,45,-29,-1,45,45,113,122,]),'CALL':([4,5,6,7,30,38,39,55,89,],[-36,-37,-2,-30,46,-29,-1,46,46,]),'IF':([4,5,6,7,30,38,39,55,89,],[-36,-37,-2,-30,47,-29,-1,47,47,]),'*':([4,5,6,7,30,38,39,55,73,82,89,91,152,],[-36,-37,-2,-30,48,-29,-1,48,-1,99,48,48,155,]),',':([4,5,6,7,67,68,69,83,86,87,100,102,103,145,150,153,160,162,],[-36,-37,-2,-30,-1,-41,-38,-1,-1,104,128,128,-40,-39,-42,-43,-44,-45,]),'=':([6,10,13,14,17,18,24,42,44,56,63,76,80,81,92,95,96,111,112,120,121,],[-2,-1,-1,19,-1,25,34,-1,-13,73,-14,-16,-1,-1,-15,120,-2,-1,-1,138,139,]),'[':([6,19,26,34,52,125,141,142,151,156,158,159,161,],[-2,-1,37,-1,37,-1,37,-1,37,-1,37,-1,37,]),'{':([6,21,25,28,31,35,],[-2,-1,-1,39,49,53,]),'&':([6,73,91,],[-2,-1,110,]),'NUMBER':([6,60,62,73,91,94,97,116,117,118,119,133,134,135,136,137,138,139,140,147,148,],[-2,77,80,-1,112,114,124,-1,-1,-1,-1,146,-3,-4,-5,-6,-1,-1,149,-7,-8,]),'LTE':([6,80,81,95,96,111,112,],[-2,-1,-1,116,-2,-1,-1,]),'GTE':([6,80,81,95,96,111,112,],[-2,-1,-1,117,-2,-1,-1,]),'<':([6,80,81,95,96,111,112,],[-2,-1,-1,118,-2,-1,-1,]),'>':([6,58,80,81,95,96,111,112,],[-2,75,-1,-1,119,-2,-1,-1,]),'!':([6,80,81,95,96,111,112,],[-2,-1,-1,121,-2,-1,-1,]),':':([6,22,23,29,82,98,99,126,152,154,155,157,],[-2,32,33,40,-1,125,-1,142,-1,156,-1,159,]),'VARLT':([7,9,],[-30,13,]),'FNLT':([7,12,],[-30,17,]),'STRT':([7,16,],[-30,23,]),'CODE':([7,20,50,90,131,],[-30,29,-33,-35,-34,]),'FUNCS':([7,15,51,101,143,],[-30,22,-50,-52,-51,]),'-':([44,111,],[58,58,]),'.':([44,111,],[59,59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'structlist':([0,],[2,]),'spnl':([0,37,39,49,53,67,70,83,86,104,128,],[3,54,55,64,66,87,88,100,102,130,144,]),'space':([0,10,13,17,19,21,25,34,37,39,42,49,53,67,70,73,80,81,82,83,86,99,104,111,112,116,117,118,119,125,128,138,139,142,152,155,156,159,],[4,14,18,24,26,31,35,52,4,4,56,4,4,4,4,91,95,95,98,4,4,126,4,95,95,134,135,136,137,141,4,147,148,151,154,157,158,161,]),'nl':([0,2,8,11,32,33,37,39,49,53,67,70,71,83,84,86,104,105,127,128,],[5,9,12,16,50,51,5,5,5,5,5,89,90,5,101,5,5,131,143,5,]),'varlist':([2,],[8,]),'funclist':([8,],[11,]),'structs':([11,],[15,]),'func':([15,],[20,]),'tac':([20,],[27,]),'tacnl':([20,],[30,]),'blist':([26,52,141,151,158,161,],[36,65,150,153,160,162,]),'stmt':([30,55,89,],[41,72,106,]),'lhs':([30,55,89,91,],[42,42,42,107,]),'list':([54,],[67,]),'funcbody':([55,],[70,]),'boolexp':([62,91,],[79,109,]),'declist':([64,66,],[83,86,]),'boolop':([80,81,111,112,],[94,97,97,94,]),'rhs':([91,],[108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('space -> <empty>','space',0,'p_space','parser.py',30),
  ('space -> SPACES','space',1,'p_space','parser.py',31),
  ('boolop -> space LTE space','boolop',3,'p_bool_op','parser.py',35),
  ('boolop -> space GTE space','boolop',3,'p_bool_op','parser.py',36),
  ('boolop -> space < space','boolop',3,'p_bool_op','parser.py',37),
  ('boolop -> space > space','boolop',3,'p_bool_op','parser.py',38),
  ('boolop -> space = = space','boolop',4,'p_bool_op','parser.py',39),
  ('boolop -> space ! = space','boolop',4,'p_bool_op','parser.py',40),
  ('boolexp -> VARNAME boolop VARNAME','boolexp',3,'p_bool_exp','parser.py',55),
  ('boolexp -> VARNAME boolop NUMBER','boolexp',3,'p_bool_exp','parser.py',56),
  ('boolexp -> NUMBER boolop VARNAME','boolexp',3,'p_bool_exp','parser.py',57),
  ('boolexp -> NUMBER boolop NUMBER','boolexp',3,'p_bool_exp','parser.py',58),
  ('lhs -> VARNAME','lhs',1,'p_lhs','parser.py',62),
  ('lhs -> * VARNAME','lhs',2,'p_lhs','parser.py',63),
  ('lhs -> VARNAME - > VARNAME','lhs',4,'p_lhs','parser.py',64),
  ('lhs -> VARNAME . VARNAME','lhs',3,'p_lhs','parser.py',65),
  ('rhs -> boolexp','rhs',1,'p_rhs','parser.py',80),
  ('rhs -> lhs','rhs',1,'p_rhs','parser.py',81),
  ('rhs -> & VARNAME','rhs',2,'p_rhs','parser.py',82),
  ('rhs -> NUMBER','rhs',1,'p_rhs','parser.py',83),
  ('stmt -> lhs space = space rhs','stmt',5,'p_stmt','parser.py',91),
  ('stmt -> READ SPACES VARNAME','stmt',3,'p_stmt','parser.py',92),
  ('stmt -> GOTO SPACES NUMBER','stmt',3,'p_stmt','parser.py',93),
  ('stmt -> CALL SPACES VARNAME','stmt',3,'p_stmt','parser.py',94),
  ('stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER','stmt',7,'p_stmt','parser.py',95),
  ('stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER','stmt',7,'p_stmt','parser.py',96),
  ('tac -> CODE :','tac',2,'p_tac','parser.py',116),
  ('tac -> tacnl stmt','tac',2,'p_tac','parser.py',117),
  ('tacnl -> tac NEWLINE','tacnl',2,'p_tac_nl','parser.py',128),
  ('nl -> NEWLINE','nl',1,'p_nl','parser.py',135),
  ('funcbody -> stmt','funcbody',1,'p_funcbody','parser.py',140),
  ('funcbody -> funcbody nl stmt','funcbody',3,'p_funcbody','parser.py',141),
  ('func -> FUNCS : nl','func',3,'p_func','parser.py',147),
  ('func -> func VARNAME { spnl funcbody spnl } nl','func',8,'p_func','parser.py',148),
  ('func -> func VARNAME { spnl } nl','func',6,'p_func','parser.py',149),
  ('spnl -> space','spnl',1,'p_space_nl','parser.py',152),
  ('spnl -> nl','spnl',1,'p_space_nl','parser.py',153),
  ('list -> VARNAME','list',1,'p_list','parser.py',156),
  ('list -> list spnl , spnl VARNAME','list',5,'p_list','parser.py',157),
  ('blist -> [ spnl list spnl ]','blist',5,'p_boxlist','parser.py',165),
  ('blist -> [ spnl ]','blist',3,'p_boxlist','parser.py',166),
  ('declist -> VARNAME space : space blist','declist',5,'p_dec_list','parser.py',172),
  ('declist -> VARNAME * space : space blist','declist',6,'p_dec_list','parser.py',173),
  ('declist -> declist spnl , spnl VARNAME space : space blist','declist',9,'p_dec_list','parser.py',174),
  ('declist -> declist spnl , spnl VARNAME * space : space blist','declist',10,'p_dec_list','parser.py',175),
  ('structlist -> spnl STLT space = space blist','structlist',6,'p_lists','parser.py',196),
  ('varlist -> nl VARLT space = space { spnl }','varlist',8,'p_lists','parser.py',197),
  ('varlist -> nl VARLT space = space { spnl declist spnl }','varlist',10,'p_lists','parser.py',198),
  ('funclist -> nl FNLT space = space blist','funclist',6,'p_lists','parser.py',199),
  ('structs -> nl STRT : nl','structs',4,'p_structs','parser.py',209),
  ('structs -> structs VARNAME space { spnl declist spnl } nl','structs',9,'p_structs','parser.py',210),
  ('structs -> structs VARNAME space { spnl } nl','structs',7,'p_structs','parser.py',211),
  ('prog -> structlist varlist funclist structs func tac','prog',6,'p_prog','parser.py',224),
]
