
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'prognonassocLVL1nonassocLVL2CODE FNLT FUNCS GOTO GTE IF LTE NEWLINE NUMBER READ SPACES STLT STRT TMPVARNAME VARLT VARNAMEspace : %prec LVL1\n             | SPACES %prec LVL2var : VARNAME\n           | TMPVARNAMEelem : space var space\n            | space NUMBER spaceboolexp : elem LTE elem\n               | elem GTE elem\n               | elem "<" elem\n               | elem ">" elem\n               | elem "=" "=" elem\n               | elem "!" "=" elemlhs : space var space\n           | space "*" var space\n           | space var "-" ">" var space\n           | space var "." var spacerhs : boolexp\n           | lhs\n           | space "&" var space\n           | space NUMBER spacestmt : lhs "=" rhs\n            | space READ space var space\n            | space GOTO space NUMBER space\n            | space IF boolexp GOTO space NUMBER space\n            | space IF space var space GOTO space NUMBER spacetac : CODE ":"\n           | tacnl stmttacnl : tac NEWLINEnl : NEWLINEfuncbody : spnl\n                | funcbody stmt nlfunc : FUNCS ":" nl\n            | func VARNAME "{" funcbody "}" nlspnl : space\n            | nllist : VARNAME\n            | list spnl "," spnl VARNAMEdeclist : VARNAME space ":" space "{" spnl list spnl "}"\n               | VARNAME "*" space ":" space "{" spnl list spnl "}"\n               | declist spnl "," spnl VARNAME space ":" space "{" spnl list spnl "}"\n               | declist spnl "," spnl VARNAME "*" space ":" space "{" spnl list spnl "}"structlist : spnl STLT space "=" space "{" spnl "}"\n                  | spnl STLT space "=" space "{" spnl list spnl "}"\n       varlist : nl VARLT space "=" space "{" spnl "}"\n               | nl VARLT space "=" space "{" spnl declist spnl "}"\n       funclist : nl FNLT space "=" space "{" spnl "}"\n                | nl FNLT space "=" space "{" spnl list spnl "}"struct : nl\n              | struct VARNAME space "{" spnl declist spnl "}" nl\n              | struct VARNAME "*" space "{" spnl declist spnl "}" nlstructs : nl STRT ":" structprog : structlist varlist funclist structs func tac'
    
_lr_action_items = {'STLT':([0,3,4,5,6,7,],[-1,10,-34,-35,-2,-29,]),'SPACES':([0,4,5,6,7,10,13,17,19,24,29,32,34,35,36,45,47,48,49,50,51,52,53,55,56,57,58,61,62,77,79,82,83,86,88,89,90,91,92,93,96,98,99,100,101,102,104,107,110,112,113,121,122,124,131,134,135,139,143,144,145,150,151,156,157,158,160,164,166,170,172,176,178,179,181,184,185,186,189,190,192,],[6,-34,-35,-2,-29,6,6,6,6,6,6,6,6,-28,-1,6,6,-30,6,6,6,6,6,-3,-4,6,6,6,-36,6,6,6,6,-31,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-37,6,6,6,6,6,6,6,6,6,6,6,-38,6,-39,6,6,-40,-41,]),'NEWLINE':([0,2,6,8,11,26,30,31,34,36,37,38,45,55,56,58,60,61,62,63,64,65,66,67,77,81,82,88,89,96,98,99,101,103,104,106,107,111,112,113,114,115,116,118,119,120,123,124,125,126,128,131,133,134,138,139,140,141,142,144,145,147,151,152,154,156,158,160,161,166,167,169,172,178,179,181,184,185,186,189,190,192,],[7,7,-2,7,7,35,7,7,7,7,-26,-27,7,-3,-4,7,-42,7,-36,7,7,-18,-21,-17,-1,-44,7,-1,-1,-1,-1,-1,-1,-14,7,-46,7,-43,7,-1,-13,-20,-7,-8,-9,-10,-22,-1,-16,-23,-6,7,-45,7,-19,-1,-11,-12,-15,-1,7,-47,-37,-5,-24,7,7,-1,7,7,-25,7,7,7,7,-38,7,-39,7,7,-40,-41,]),'$end':([1,6,26,37,38,55,56,65,66,67,77,88,89,96,98,99,101,103,113,114,115,116,118,119,120,123,124,125,126,128,138,139,140,141,142,144,152,154,160,167,],[0,-2,-52,-26,-27,-3,-4,-18,-21,-17,-1,-1,-1,-1,-1,-1,-1,-14,-1,-13,-20,-7,-8,-9,-10,-22,-1,-16,-23,-6,-19,-1,-11,-12,-15,-1,-5,-24,-1,-25,]),'}':([4,5,6,7,34,36,45,46,47,48,58,59,61,62,80,82,84,86,107,108,132,145,151,155,156,162,172,177,178,181,182,185,186,188,189,190,191,192,],[-34,-35,-2,-29,-1,-1,-1,60,63,-30,-1,81,-1,-36,106,-1,111,-31,-1,133,147,-1,-37,161,-1,169,-1,181,-1,-38,185,-39,-1,190,-1,-40,192,-41,]),'VARNAME':([4,5,6,7,20,29,34,35,36,40,41,42,43,45,46,47,48,49,50,53,54,58,59,68,70,73,75,80,85,86,87,90,91,92,93,97,104,112,117,121,122,130,131,134,137,146,148,158,165,166,168,173,174,179,183,184,187,],[-34,-35,-2,-29,27,-1,-1,-28,-1,55,-32,-48,57,-1,62,-1,-30,-1,-1,-1,55,-1,83,55,55,55,55,62,-33,-31,55,-1,-1,-1,-1,55,-1,-1,55,-1,-1,83,-1,-1,151,83,157,-1,62,-1,-49,62,-50,-1,62,-1,62,]),'READ':([4,5,6,7,29,35,36,40,47,48,86,],[-34,-35,-2,-29,-1,-28,-1,50,-1,-30,-31,]),'GOTO':([4,5,6,7,29,35,36,40,47,48,55,56,76,86,100,101,116,118,119,120,127,128,139,140,141,152,],[-34,-35,-2,-29,-1,-28,-1,52,-1,-30,-3,-4,102,-31,-1,-1,-7,-8,-9,-10,143,-6,-1,-11,-12,-5,]),'IF':([4,5,6,7,29,35,36,40,47,48,86,],[-34,-35,-2,-29,-1,-28,-1,53,-1,-30,-31,]),'*':([4,5,6,7,29,35,36,40,47,48,49,57,68,83,86,157,],[-34,-35,-2,-29,-1,-28,-1,54,-1,-30,-1,79,54,110,-31,164,]),'TMPVARNAME':([4,5,6,7,29,35,36,40,47,48,49,50,53,54,68,70,73,75,86,87,90,91,92,93,97,117,121,122,],[-34,-35,-2,-29,-1,-28,-1,56,-1,-30,-1,-1,-1,56,56,56,56,56,-31,56,-1,-1,-1,-1,56,56,-1,-1,]),',':([4,5,6,7,61,62,82,84,107,108,132,145,151,155,156,162,172,177,178,181,182,185,186,188,189,190,191,192,],[-34,-35,-2,-29,-1,-36,-1,112,-1,134,112,-1,-37,134,-1,134,-1,112,-1,-38,112,-39,-1,112,-1,-40,112,-41,]),'=':([6,10,13,14,17,18,23,39,51,55,56,69,71,77,88,89,94,95,98,100,101,103,114,115,124,125,127,128,142,],[-2,-1,-1,19,-1,24,32,49,-1,-3,-4,94,-13,-1,-1,-1,121,122,-1,-1,-1,-14,-5,-6,-1,-16,-5,-6,-15,]),'{':([6,19,24,25,27,32,33,44,57,78,79,105,135,149,150,159,170,175,176,180,],[-2,-1,-1,34,36,-1,45,58,-1,104,-1,131,-1,158,-1,166,-1,179,-1,184,]),'&':([6,49,68,],[-2,-1,87,]),'NUMBER':([6,49,52,53,68,74,75,90,91,92,93,102,117,121,122,129,143,153,],[-2,-1,-1,-1,89,99,101,-1,-1,-1,-1,-1,101,-1,-1,144,-1,160,]),':':([6,21,22,28,83,109,110,136,157,163,164,171,],[-2,30,31,37,-1,135,-1,150,-1,170,-1,176,]),'LTE':([6,55,56,69,88,89,100,101,114,115,127,128,],[-2,-3,-4,90,-1,-1,-1,-1,-5,-6,-5,-6,]),'GTE':([6,55,56,69,88,89,100,101,114,115,127,128,],[-2,-3,-4,91,-1,-1,-1,-1,-5,-6,-5,-6,]),'<':([6,55,56,69,88,89,100,101,114,115,127,128,],[-2,-3,-4,92,-1,-1,-1,-1,-5,-6,-5,-6,]),'>':([6,55,56,69,72,88,89,100,101,114,115,127,128,],[-2,-3,-4,93,97,-1,-1,-1,-1,-5,-6,-5,-6,]),'!':([6,55,56,69,88,89,100,101,114,115,127,128,],[-2,-3,-4,95,-1,-1,-1,-1,-5,-6,-5,-6,]),'VARLT':([7,9,],[-29,13,]),'FNLT':([7,12,],[-29,17,]),'STRT':([7,16,],[-29,22,]),'CODE':([7,20,41,85,],[-29,28,-32,-33,]),'FUNCS':([7,15,42,43,168,174,],[-29,21,-48,-51,-49,-50,]),'-':([51,55,56,88,],[72,-3,-4,72,]),'.':([51,55,56,88,],[73,-3,-4,73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'structlist':([0,],[2,]),'spnl':([0,34,36,45,58,61,82,104,107,112,131,134,145,156,158,166,172,178,179,184,186,189,],[3,46,48,59,80,84,108,130,132,137,146,148,155,162,165,173,177,182,183,187,188,191,]),'space':([0,10,13,17,19,24,29,32,34,36,45,47,49,50,51,52,53,57,58,61,77,79,82,83,88,89,90,91,92,93,96,98,99,100,101,102,104,107,110,112,113,121,122,124,131,134,135,139,143,144,145,150,156,157,158,160,164,166,170,172,176,178,179,184,186,189,],[4,14,18,23,25,33,40,44,4,4,4,40,68,70,71,74,75,78,4,4,103,105,4,109,114,115,117,117,117,117,123,125,126,127,128,129,4,4,136,4,138,117,117,142,4,4,149,152,153,154,4,159,4,163,4,167,171,4,175,4,180,4,4,4,4,4,]),'nl':([0,2,8,11,30,31,34,36,45,58,61,63,64,82,104,107,112,131,134,145,156,158,161,166,169,172,178,179,184,186,189,],[5,9,12,16,41,42,5,5,5,5,5,85,86,5,5,5,5,5,5,5,5,5,168,5,174,5,5,5,5,5,5,]),'varlist':([2,],[8,]),'funclist':([8,],[11,]),'structs':([11,],[15,]),'func':([15,],[20,]),'tac':([20,],[26,]),'tacnl':([20,],[29,]),'stmt':([29,47,],[38,64,]),'lhs':([29,47,49,],[39,39,65,]),'struct':([31,],[43,]),'funcbody':([36,],[47,]),'var':([40,54,68,70,73,75,87,97,117,],[51,77,88,96,98,100,113,124,139,]),'list':([46,80,165,173,183,187,],[61,107,172,178,186,189,]),'rhs':([49,],[66,]),'boolexp':([49,53,],[67,76,]),'elem':([49,53,90,91,92,93,121,122,],[69,69,116,118,119,120,140,141,]),'declist':([59,130,146,],[82,145,156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('space -> <empty>','space',0,'p_space','parser.py',23),
  ('space -> SPACES','space',1,'p_space','parser.py',24),
  ('var -> VARNAME','var',1,'p_var','parser.py',28),
  ('var -> TMPVARNAME','var',1,'p_var','parser.py',29),
  ('elem -> space var space','elem',3,'p_elem','parser.py',33),
  ('elem -> space NUMBER space','elem',3,'p_elem','parser.py',34),
  ('boolexp -> elem LTE elem','boolexp',3,'p_bool_exp','parser.py',38),
  ('boolexp -> elem GTE elem','boolexp',3,'p_bool_exp','parser.py',39),
  ('boolexp -> elem < elem','boolexp',3,'p_bool_exp','parser.py',40),
  ('boolexp -> elem > elem','boolexp',3,'p_bool_exp','parser.py',41),
  ('boolexp -> elem = = elem','boolexp',4,'p_bool_exp','parser.py',42),
  ('boolexp -> elem ! = elem','boolexp',4,'p_bool_exp','parser.py',43),
  ('lhs -> space var space','lhs',3,'p_lhs','parser.py',64),
  ('lhs -> space * var space','lhs',4,'p_lhs','parser.py',65),
  ('lhs -> space var - > var space','lhs',6,'p_lhs','parser.py',66),
  ('lhs -> space var . var space','lhs',5,'p_lhs','parser.py',67),
  ('rhs -> boolexp','rhs',1,'p_rhs','parser.py',82),
  ('rhs -> lhs','rhs',1,'p_rhs','parser.py',83),
  ('rhs -> space & var space','rhs',4,'p_rhs','parser.py',84),
  ('rhs -> space NUMBER space','rhs',3,'p_rhs','parser.py',85),
  ('stmt -> lhs = rhs','stmt',3,'p_stmt','parser.py',95),
  ('stmt -> space READ space var space','stmt',5,'p_stmt','parser.py',96),
  ('stmt -> space GOTO space NUMBER space','stmt',5,'p_stmt','parser.py',97),
  ('stmt -> space IF boolexp GOTO space NUMBER space','stmt',7,'p_stmt','parser.py',98),
  ('stmt -> space IF space var space GOTO space NUMBER space','stmt',9,'p_stmt','parser.py',99),
  ('tac -> CODE :','tac',2,'p_tac','parser.py',115),
  ('tac -> tacnl stmt','tac',2,'p_tac','parser.py',116),
  ('tacnl -> tac NEWLINE','tacnl',2,'p_tac_nl','parser.py',127),
  ('nl -> NEWLINE','nl',1,'p_nl','parser.py',134),
  ('funcbody -> spnl','funcbody',1,'p_funcbody','parser.py',139),
  ('funcbody -> funcbody stmt nl','funcbody',3,'p_funcbody','parser.py',140),
  ('func -> FUNCS : nl','func',3,'p_func','parser.py',146),
  ('func -> func VARNAME { funcbody } nl','func',6,'p_func','parser.py',147),
  ('spnl -> space','spnl',1,'p_space_nl','parser.py',150),
  ('spnl -> nl','spnl',1,'p_space_nl','parser.py',151),
  ('list -> VARNAME','list',1,'p_list','parser.py',154),
  ('list -> list spnl , spnl VARNAME','list',5,'p_list','parser.py',155),
  ('declist -> VARNAME space : space { spnl list spnl }','declist',9,'p_dec_list','parser.py',163),
  ('declist -> VARNAME * space : space { spnl list spnl }','declist',10,'p_dec_list','parser.py',164),
  ('declist -> declist spnl , spnl VARNAME space : space { spnl list spnl }','declist',13,'p_dec_list','parser.py',165),
  ('declist -> declist spnl , spnl VARNAME * space : space { spnl list spnl }','declist',14,'p_dec_list','parser.py',166),
  ('structlist -> spnl STLT space = space { spnl }','structlist',8,'p_lists','parser.py',173),
  ('structlist -> spnl STLT space = space { spnl list spnl }','structlist',10,'p_lists','parser.py',174),
  ('varlist -> nl VARLT space = space { spnl }','varlist',8,'p_lists','parser.py',175),
  ('varlist -> nl VARLT space = space { spnl declist spnl }','varlist',10,'p_lists','parser.py',176),
  ('funclist -> nl FNLT space = space { spnl }','funclist',8,'p_lists','parser.py',177),
  ('funclist -> nl FNLT space = space { spnl list spnl }','funclist',10,'p_lists','parser.py',178),
  ('struct -> nl','struct',1,'p_struct','parser.py',192),
  ('struct -> struct VARNAME space { spnl declist spnl } nl','struct',9,'p_struct','parser.py',193),
  ('struct -> struct VARNAME * space { spnl declist spnl } nl','struct',10,'p_struct','parser.py',194),
  ('structs -> nl STRT : struct','structs',4,'p_structs','parser.py',197),
  ('prog -> structlist varlist funclist structs func tac','prog',6,'p_prog','parser.py',203),
]
