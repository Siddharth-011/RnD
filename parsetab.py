
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progleftNUMBERleftVARNAMEnonassocLVL1nonassocLVL2CALL FUNCS GOTO GTE IF LTE MAINCODE NEWLINE NUMBER READ SPACES STRT VARLT VARNAMEspace : %prec LVL1\n             | SPACES %prec LVL2boolop : space LTE space\n              | space GTE space\n              | space "<" space\n              | space ">" space\n              | space "=" "=" space\n              | space "!" "=" spaceboolexp : VARNAME boolop VARNAME\n               | VARNAME boolop NUMBER\n               | NUMBER boolop VARNAME\n               | NUMBER boolop NUMBERlhs : "*" VARNAME\n           | VARNAME "-" ">" VARNAME\n           | VARNAME "." VARNAMErhs : boolexp\n           | lhs\n           | VARNAME\n           | "&" VARNAME\n           | NUMBERvardec : VARNAME SPACES list\n              | VARNAME "*" SPACES liststmt : vardec\n            | lhs space "=" space rhs\n            | VARNAME space "=" space rhs\n            | READ SPACES VARNAME\n            | GOTO SPACES NUMBER\n            | CALL SPACES VARNAME funcargs\n            | IF SPACES boolexp SPACES GOTO SPACES NUMBER\n            | IF SPACES VARNAME SPACES GOTO SPACES NUMBERtac : MAINCODE ":" nl varlist\n           | tac stmtnl stmtnl : NEWLINEstmtnl : NEWLINEfuncbody : stmt\n                | funcbody stmtnl stmtarglist : VARNAME\n               | arglist space "," space VARNAMEfuncargs : "(" space ")"\n                | "(" space arglist space ")"paramlist : VARNAME SPACES VARNAME\n                 | paramlist space "," space VARNAME SPACES VARNAMEfuncparams : "(" space ")"\n                  | "(" space paramlist space ")"func : FUNCS ":" nl\n            | func VARNAME funcparams spnl "{" funcvarlist funcbody spnl "}" nl\n            | func VARNAME funcparams spnl "{" funcvarlist "}" nlspnl : space\n            | nllist : VARNAME space\n            | list "," space VARNAME spaceblist : "[" spnl list spnl "]"\n             | "[" spnl "]"declist : VARNAME space ":" space blist\n               | VARNAME "*" space ":" space blist\n               | declist spnl "," spnl VARNAME space ":" space blist\n               | declist spnl "," spnl VARNAME "*" space ":" space blistvarlist : VARLT space "=" space "{" spnl "}"\n               | VARLT space "=" space "{" spnl declist spnl "}"funcvarlist : spnl\n                   | spnl varlist nlstructs : spnl STRT ":" nl\n              | structs VARNAME space "{" spnl declist spnl "}" nl\n              | structs VARNAME space "{" spnl "}" nlprog : structs func tac'
    
_lr_action_items = {'STRT':([0,3,4,5,6,7,],[-1,11,-49,-48,-2,-33,]),'SPACES':([0,6,9,20,21,23,27,28,29,30,31,32,33,42,49,50,51,52,53,55,56,57,59,60,61,62,65,66,67,69,70,71,78,83,84,85,86,87,88,95,97,98,99,100,101,102,105,106,107,108,109,111,112,115,116,117,118,119,120,121,124,125,126,135,138,139,140,141,142,148,149,152,153,154,155,156,158,159,161,164,169,171,172,173,174,176,177,178,179,185,186,188,189,191,],[6,-2,6,6,6,6,-23,6,41,45,46,47,48,63,-13,6,-43,6,75,6,6,6,6,6,-1,-21,-15,-26,-27,89,6,92,6,-50,6,-22,-14,-28,6,6,-35,-44,6,-41,6,6,6,-17,-24,-16,-18,-20,-25,143,-12,-11,6,6,6,6,150,-9,-10,6,-19,-1,-39,6,-37,6,6,-36,166,6,-54,6,6,-51,-29,-30,-55,6,-40,6,-42,6,6,-53,6,6,-38,-52,-56,-57,]),'NEWLINE':([0,6,12,16,17,20,22,23,26,27,49,50,51,54,57,58,61,62,65,66,67,83,85,86,87,94,95,96,97,98,104,105,106,107,108,109,111,112,116,117,125,126,138,139,140,151,152,154,155,156,159,161,164,169,172,175,176,177,178,187,188,189,191,],[7,-2,19,7,7,7,7,7,-32,-23,-13,7,-43,-31,7,7,-1,-21,-15,-26,-27,-50,-22,-14,-28,7,130,7,-35,-44,7,7,-17,-24,-16,-18,-20,-25,-12,-11,-9,-10,-19,-1,-39,7,-36,7,-54,7,-51,-29,-30,-55,-40,-58,7,7,-53,-59,-52,-56,-57,]),'$end':([1,6,12,26,27,49,54,61,62,65,66,67,83,85,86,87,106,107,108,109,111,112,116,117,125,126,138,139,140,159,161,164,172,175,187,],[0,-2,-65,-32,-23,-13,-31,-1,-21,-15,-26,-27,-50,-22,-14,-28,-17,-24,-16,-18,-20,-25,-12,-11,-9,-10,-19,-1,-39,-51,-29,-30,-40,-58,-59,]),'VARNAME':([2,4,5,6,7,8,18,19,21,23,24,25,34,36,38,41,44,45,47,48,50,59,60,63,64,72,73,75,80,81,82,84,88,90,93,99,105,110,113,114,118,119,120,121,127,129,130,131,132,136,137,144,145,146,147,148,149,154,156,162,163,165,166,167,168,173,181,],[9,-49,-48,-2,-33,13,29,-34,-1,-1,-45,-62,49,53,56,61,65,66,68,71,-1,-1,-1,61,86,-60,29,100,-64,109,109,-1,-1,117,125,-1,-1,138,139,142,-1,-1,-1,-1,-61,29,-34,-47,153,-63,158,-3,-4,-5,-6,-1,-1,-1,-1,-7,-8,-46,174,56,61,-1,186,]),'FUNCS':([2,7,25,80,136,],[10,-33,-62,-64,-63,]),'{':([4,5,6,7,9,15,20,35,51,98,101,133,],[-49,-48,-2,-33,-1,23,-1,50,-43,-44,-1,154,]),'}':([4,5,6,7,23,27,38,49,50,57,61,62,65,66,67,72,73,79,83,85,86,87,95,97,106,107,108,109,111,112,116,117,125,126,127,128,130,138,139,140,152,154,155,159,161,164,167,169,172,176,178,182,188,189,191,],[-49,-48,-2,-33,-1,-23,58,-13,-1,-1,-1,-21,-15,-26,-27,-60,96,104,-50,-22,-14,-28,-1,-35,-17,-24,-16,-18,-20,-25,-12,-11,-9,-10,-61,151,-33,-19,-1,-39,-36,-1,-54,-51,-29,-30,175,-55,-40,-1,-53,187,-52,-56,-57,]),'VARLT':([4,5,6,7,37,50,72,],[-49,-48,-2,-33,55,-1,55,]),'READ':([4,5,6,7,18,19,50,72,73,127,129,130,],[-49,-48,-2,-33,30,-34,-1,-60,30,-61,30,-34,]),'GOTO':([4,5,6,7,18,19,50,72,73,89,92,127,129,130,],[-49,-48,-2,-33,31,-34,-1,-60,31,115,124,-61,31,-34,]),'CALL':([4,5,6,7,18,19,50,72,73,127,129,130,],[-49,-48,-2,-33,32,-34,-1,-60,32,-61,32,-34,]),'IF':([4,5,6,7,18,19,50,72,73,127,129,130,],[-49,-48,-2,-33,33,-34,-1,-60,33,-61,33,-34,]),'*':([4,5,6,7,18,19,29,50,56,59,60,72,73,81,82,127,129,130,158,],[-49,-48,-2,-33,34,-34,42,-1,78,-1,-1,-60,34,34,34,-61,34,-34,171,]),',':([4,5,6,7,52,57,61,62,74,79,83,85,100,139,141,142,155,159,160,169,174,176,177,178,182,186,188,189,191,],[-49,-48,-2,-33,-1,-1,-1,84,99,105,-50,84,-41,-1,-1,-37,-54,-51,173,-55,-42,-1,84,-53,105,-38,-52,-56,-57,]),']':([4,5,6,7,61,83,139,156,159,168,177,183,],[-49,-48,-2,-33,-1,-50,-1,-1,-51,178,-1,188,]),')':([6,21,36,52,74,88,100,114,141,142,160,174,186,],[-2,-1,51,-1,98,-1,-41,140,-1,-37,172,-42,-38,]),'=':([6,28,29,39,40,41,49,55,65,70,71,76,86,91,92,109,111,122,123,],[-2,-1,-1,59,60,-2,-13,-1,-15,-1,-1,101,-14,122,-2,-1,-1,148,149,]),':':([6,10,11,14,56,77,78,103,158,170,171,180,],[-2,16,17,22,-1,102,-1,135,-1,179,-1,185,]),'&':([6,59,60,81,82,],[-2,-1,-1,110,110,]),'NUMBER':([6,46,48,59,60,81,82,90,93,118,119,120,121,143,144,145,146,147,148,149,150,162,163,],[-2,67,70,-1,-1,111,111,116,126,-1,-1,-1,-1,161,-3,-4,-5,-6,-1,-1,164,-7,-8,]),'LTE':([6,70,71,91,92,109,111,],[-2,-1,-1,118,-2,-1,-1,]),'GTE':([6,70,71,91,92,109,111,],[-2,-1,-1,119,-2,-1,-1,]),'<':([6,70,71,91,92,109,111,],[-2,-1,-1,120,-2,-1,-1,]),'>':([6,43,70,71,91,92,109,111,],[-2,64,-1,-1,121,-2,-1,-1,]),'!':([6,70,71,91,92,109,111,],[-2,-1,-1,123,-2,-1,-1,]),'[':([6,102,134,135,157,179,184,185,190,],[-2,-1,156,-1,156,-1,156,-1,156,]),'MAINCODE':([7,8,24,131,165,],[-33,14,-45,-47,-46,]),'(':([13,68,],[21,88,]),'-':([29,109,],[43,43,]),'.':([29,109,],[44,44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'structs':([0,],[2,]),'spnl':([0,20,23,50,57,95,105,154,156,176,177,],[3,35,38,72,79,128,137,167,168,182,183,]),'nl':([0,16,17,20,22,23,50,57,58,94,95,96,104,105,151,154,156,176,177,],[4,24,25,4,37,4,4,4,80,127,4,131,136,4,165,4,4,4,4,]),'space':([0,9,20,21,23,28,29,50,52,55,56,57,59,60,61,70,71,78,84,88,95,99,101,102,105,109,111,118,119,120,121,135,139,141,148,149,154,156,158,171,173,176,177,179,185,],[5,15,5,36,5,39,40,5,74,76,77,5,81,82,83,91,91,103,113,114,5,132,133,134,5,91,91,144,145,146,147,157,159,160,162,163,5,5,170,180,181,5,5,184,190,]),'func':([2,],[8,]),'tac':([8,],[12,]),'stmtnl':([12,95,],[18,129,]),'funcparams':([13,],[20,]),'stmt':([18,73,129,],[26,97,152,]),'vardec':([18,73,129,],[27,27,27,]),'lhs':([18,73,81,82,129,],[28,28,106,106,28,]),'paramlist':([36,],[52,]),'varlist':([37,72,],[54,94,]),'declist':([38,167,],[57,176,]),'list':([41,63,168,],[62,85,177,]),'boolexp':([48,81,82,],[69,108,108,]),'funcvarlist':([50,],[73,]),'funcargs':([68,],[87,]),'boolop':([70,71,109,111,],[90,93,93,90,]),'funcbody':([73,],[95,]),'rhs':([81,82,],[107,112,]),'arglist':([114,],[141,]),'blist':([134,157,184,190,],[155,169,189,191,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('space -> <empty>','space',0,'p_space','parser.py',97),
  ('space -> SPACES','space',1,'p_space','parser.py',98),
  ('boolop -> space LTE space','boolop',3,'p_bool_op','parser.py',102),
  ('boolop -> space GTE space','boolop',3,'p_bool_op','parser.py',103),
  ('boolop -> space < space','boolop',3,'p_bool_op','parser.py',104),
  ('boolop -> space > space','boolop',3,'p_bool_op','parser.py',105),
  ('boolop -> space = = space','boolop',4,'p_bool_op','parser.py',106),
  ('boolop -> space ! = space','boolop',4,'p_bool_op','parser.py',107),
  ('boolexp -> VARNAME boolop VARNAME','boolexp',3,'p_bool_exp','parser.py',122),
  ('boolexp -> VARNAME boolop NUMBER','boolexp',3,'p_bool_exp','parser.py',123),
  ('boolexp -> NUMBER boolop VARNAME','boolexp',3,'p_bool_exp','parser.py',124),
  ('boolexp -> NUMBER boolop NUMBER','boolexp',3,'p_bool_exp','parser.py',125),
  ('lhs -> * VARNAME','lhs',2,'p_lhs','parser.py',133),
  ('lhs -> VARNAME - > VARNAME','lhs',4,'p_lhs','parser.py',134),
  ('lhs -> VARNAME . VARNAME','lhs',3,'p_lhs','parser.py',135),
  ('rhs -> boolexp','rhs',1,'p_rhs','parser.py',147),
  ('rhs -> lhs','rhs',1,'p_rhs','parser.py',148),
  ('rhs -> VARNAME','rhs',1,'p_rhs','parser.py',149),
  ('rhs -> & VARNAME','rhs',2,'p_rhs','parser.py',150),
  ('rhs -> NUMBER','rhs',1,'p_rhs','parser.py',151),
  ('vardec -> VARNAME SPACES list','vardec',3,'p_var_dec','parser.py',163),
  ('vardec -> VARNAME * SPACES list','vardec',4,'p_var_dec','parser.py',164),
  ('stmt -> vardec','stmt',1,'p_stmt','parser.py',179),
  ('stmt -> lhs space = space rhs','stmt',5,'p_stmt','parser.py',180),
  ('stmt -> VARNAME space = space rhs','stmt',5,'p_stmt','parser.py',181),
  ('stmt -> READ SPACES VARNAME','stmt',3,'p_stmt','parser.py',182),
  ('stmt -> GOTO SPACES NUMBER','stmt',3,'p_stmt','parser.py',183),
  ('stmt -> CALL SPACES VARNAME funcargs','stmt',4,'p_stmt','parser.py',184),
  ('stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER','stmt',7,'p_stmt','parser.py',185),
  ('stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER','stmt',7,'p_stmt','parser.py',186),
  ('tac -> MAINCODE : nl varlist','tac',4,'p_tac','parser.py',218),
  ('tac -> tac stmtnl stmt','tac',3,'p_tac','parser.py',219),
  ('nl -> NEWLINE','nl',1,'p_nl','parser.py',237),
  ('stmtnl -> NEWLINE','stmtnl',1,'p_stmt_nl','parser.py',243),
  ('funcbody -> stmt','funcbody',1,'p_funcbody','parser.py',250),
  ('funcbody -> funcbody stmtnl stmt','funcbody',3,'p_funcbody','parser.py',251),
  ('arglist -> VARNAME','arglist',1,'p_arg_list','parser.py',261),
  ('arglist -> arglist space , space VARNAME','arglist',5,'p_arg_list','parser.py',262),
  ('funcargs -> ( space )','funcargs',3,'p_func_args','parser.py',271),
  ('funcargs -> ( space arglist space )','funcargs',5,'p_func_args','parser.py',272),
  ('paramlist -> VARNAME SPACES VARNAME','paramlist',3,'p_param_list','parser.py',279),
  ('paramlist -> paramlist space , space VARNAME SPACES VARNAME','paramlist',7,'p_param_list','parser.py',280),
  ('funcparams -> ( space )','funcparams',3,'p_func_params','parser.py',292),
  ('funcparams -> ( space paramlist space )','funcparams',5,'p_func_params','parser.py',293),
  ('func -> FUNCS : nl','func',3,'p_func','parser.py',302),
  ('func -> func VARNAME funcparams spnl { funcvarlist funcbody spnl } nl','func',10,'p_func','parser.py',303),
  ('func -> func VARNAME funcparams spnl { funcvarlist } nl','func',8,'p_func','parser.py',304),
  ('spnl -> space','spnl',1,'p_space_nl','parser.py',322),
  ('spnl -> nl','spnl',1,'p_space_nl','parser.py',323),
  ('list -> VARNAME space','list',2,'p_list','parser.py',326),
  ('list -> list , space VARNAME space','list',5,'p_list','parser.py',327),
  ('blist -> [ spnl list spnl ]','blist',5,'p_boxlist','parser.py',337),
  ('blist -> [ spnl ]','blist',3,'p_boxlist','parser.py',338),
  ('declist -> VARNAME space : space blist','declist',5,'p_dec_list','parser.py',344),
  ('declist -> VARNAME * space : space blist','declist',6,'p_dec_list','parser.py',345),
  ('declist -> declist spnl , spnl VARNAME space : space blist','declist',9,'p_dec_list','parser.py',346),
  ('declist -> declist spnl , spnl VARNAME * space : space blist','declist',10,'p_dec_list','parser.py',347),
  ('varlist -> VARLT space = space { spnl }','varlist',7,'p_var_list','parser.py',368),
  ('varlist -> VARLT space = space { spnl declist spnl }','varlist',9,'p_var_list','parser.py',369),
  ('funcvarlist -> spnl','funcvarlist',1,'p_func_var_list','parser.py',375),
  ('funcvarlist -> spnl varlist nl','funcvarlist',3,'p_func_var_list','parser.py',376),
  ('structs -> spnl STRT : nl','structs',4,'p_structs','parser.py',382),
  ('structs -> structs VARNAME space { spnl declist spnl } nl','structs',9,'p_structs','parser.py',383),
  ('structs -> structs VARNAME space { spnl } nl','structs',7,'p_structs','parser.py',384),
  ('prog -> structs func tac','prog',3,'p_prog','parser.py',397),
]
