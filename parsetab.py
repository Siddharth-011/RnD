
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progleftNUMBERleftVARNAMEnonassocLVL1nonassocLVL2CALL FUNCS GOTO GTE IF LTE MAINCODE MALLOC NEWLINE NUMBER READ SPACES STARS STRT USE VARNAMEspace : %prec LVL1\n             | SPACES %prec LVL2boolop : space LTE space\n              | space GTE space\n              | space "<" space\n              | space ">" space\n              | space "=" "=" space\n              | space "!" "=" spaceboolexp : VARNAME boolop VARNAME\n               | VARNAME boolop NUMBER\n               | NUMBER boolop VARNAME\n               | NUMBER boolop NUMBERlhs : STARS VARNAME\n           | VARNAME "-" ">" VARNAME\n           | VARNAME "." VARNAMErhs : boolexp\n           | lhs\n           | VARNAME\n           | "&" VARNAME\n           | NUMBERvardec : VARNAME SPACES list\n              | VARNAME STARS SPACES liststmt : vardec\n            | lhs space "=" space rhs\n            | VARNAME space "=" space rhs\n            | VARNAME space "=" space MALLOC "(" ")"\n            | READ SPACES VARNAME\n            | USE SPACES VARNAME\n            | GOTO SPACES NUMBER\n            | CALL SPACES VARNAME funcargs\n            | IF SPACES boolexp SPACES GOTO SPACES NUMBER\n            | IF SPACES VARNAME SPACES GOTO SPACES NUMBERtac : nl MAINCODE ":"\n           | tac stmtnl stmtnl : NEWLINEstmtnl : NEWLINEfuncbody : stmt\n                | funcbody stmtnl stmtarglist : VARNAME\n               | arglist space "," space VARNAMEfuncargs : "(" space ")"\n                | "(" space arglist space ")"paramlist : VARNAME SPACES VARNAME\n                 | paramlist space "," space VARNAME SPACES VARNAMEfuncparams : "(" space ")"\n                  | "(" space paramlist space ")"func : FUNCS ":"\n            | func nl VARNAME funcparams spnl "{" spnl funcbody spnl "}"\n            | func nl VARNAME funcparams spnl "{" spnl "}"spnl : space\n            | nllist : VARNAME space\n            | list "," space VARNAME spacedeclist : VARNAME SPACES list\n               | VARNAME STARS SPACES list\n               | declist nl VARNAME SPACES list\n               | declist nl VARNAME STARS SPACES liststructs : spnl STRT ":" nl\n              | structs VARNAME space "{" spnl declist spnl "}" nl\n              | structs VARNAME space "{" spnl "}" nlprog : structs func tac spnl'
    
_lr_action_items = {'STRT':([0,3,4,5,6,7,],[-1,11,-51,-50,-2,-35,]),'SPACES':([0,6,9,12,22,24,25,26,27,28,29,30,31,32,34,35,36,41,49,52,53,55,56,57,58,61,62,63,64,66,67,68,69,70,71,72,74,80,81,82,83,84,85,94,97,98,99,100,101,103,104,108,109,110,111,112,113,114,117,118,119,120,122,123,124,125,126,129,130,132,133,134,135,141,142,147,149,150,152,155,157,158,159,160,161,164,165,],[6,-2,6,6,6,-34,-23,6,40,44,45,46,47,48,6,6,-33,59,-13,73,6,6,6,-1,-21,-15,-27,-28,-29,86,6,89,6,-45,6,93,95,-52,6,-22,-14,-30,6,-54,128,-17,-24,-16,-18,-20,-25,136,-12,-11,6,6,6,6,143,-9,-10,6,-37,-46,6,-43,-55,148,-19,-1,-41,6,-39,6,6,-56,-26,-53,-31,-32,-38,162,-57,-42,6,-44,-40,]),'NEWLINE':([0,6,8,12,15,16,22,24,25,34,36,49,53,54,57,58,61,62,63,64,69,70,80,82,83,84,94,96,98,99,100,101,103,104,109,110,118,119,120,121,122,123,126,130,132,133,147,149,150,152,155,156,157,159,160,],[7,-2,7,19,-47,7,7,-34,-23,7,-33,-13,7,7,-1,-21,-15,-27,-28,-29,7,-45,-52,-22,-14,-30,-54,7,-17,-24,-16,-18,-20,-25,-12,-11,-9,-10,19,-49,-37,-46,-55,-19,-1,-41,-56,-26,-53,-31,-32,-48,-38,-57,-42,]),'$end':([1,4,5,6,12,17,19,24,25,36,49,57,58,61,62,63,64,80,82,83,84,98,99,100,101,103,104,109,110,118,119,130,132,133,149,150,152,155,160,],[0,-51,-50,-2,-1,-61,-35,-34,-23,-33,-13,-1,-21,-15,-27,-28,-29,-52,-22,-14,-30,-17,-24,-16,-18,-20,-25,-12,-11,-9,-10,-19,-1,-41,-26,-53,-31,-32,-42,]),'VARNAME':([2,4,5,6,7,13,18,19,22,23,33,35,37,40,43,44,45,47,48,51,55,56,59,60,69,73,76,77,78,79,81,85,87,90,91,93,95,102,106,107,111,112,113,114,124,127,128,137,138,139,140,141,142,145,146,148,153,154,161,162,163,],[9,-51,-50,-2,-35,20,27,-36,-1,-58,49,-1,52,57,61,62,63,65,68,72,-1,-1,57,83,-1,57,97,-60,101,101,-1,-1,110,118,27,125,57,130,132,135,-1,-1,-1,-1,-1,-59,57,-3,-4,-5,-6,-1,-1,27,158,57,-7,-8,-1,164,165,]),'FUNCS':([2,7,23,77,127,],[10,-35,-58,-60,-59,]),'}':([4,5,6,7,19,22,25,37,49,53,57,58,61,62,63,64,69,75,76,80,82,83,84,91,94,98,99,100,101,103,104,109,110,118,119,120,122,126,130,132,133,144,147,149,150,152,155,157,159,160,],[-51,-50,-2,-35,-35,-1,-23,54,-13,-1,-1,-21,-15,-27,-28,-29,-1,96,-51,-52,-22,-14,-30,121,-54,-17,-24,-16,-18,-20,-25,-12,-11,-9,-10,-1,-37,-55,-19,-1,-41,156,-56,-26,-53,-31,-32,-38,-57,-42,]),'{':([4,5,6,7,9,14,34,50,70,123,],[-51,-50,-2,-35,-1,22,-1,69,-45,-46,]),'READ':([4,5,6,7,18,19,69,91,145,],[-51,-50,-2,-35,28,-36,-1,28,28,]),'USE':([4,5,6,7,18,19,69,91,145,],[-51,-50,-2,-35,29,-36,-1,29,29,]),'GOTO':([4,5,6,7,18,19,69,86,89,91,145,],[-51,-50,-2,-35,30,-36,-1,108,117,30,30,]),'CALL':([4,5,6,7,18,19,69,91,145,],[-51,-50,-2,-35,31,-36,-1,31,31,]),'IF':([4,5,6,7,18,19,69,91,145,],[-51,-50,-2,-35,32,-36,-1,32,32,]),'STARS':([4,5,6,7,18,19,27,52,55,56,69,78,79,91,97,145,],[-51,-50,-2,-35,33,-36,41,74,-1,-1,-1,33,33,33,129,33,]),'=':([6,26,27,38,39,40,49,61,67,68,83,88,89,101,103,115,116,],[-2,-1,-1,55,56,-2,-13,-15,-1,-1,-14,115,-2,-1,-1,141,142,]),')':([6,35,51,71,85,92,107,125,131,134,135,151,164,165,],[-2,-1,70,-1,-1,123,133,-43,149,-1,-39,160,-44,-40,]),'&':([6,55,56,78,79,],[-2,-1,-1,102,102,]),'NUMBER':([6,46,48,55,56,78,79,87,90,111,112,113,114,136,137,138,139,140,141,142,143,153,154,],[-2,64,67,-1,-1,103,103,109,119,-1,-1,-1,-1,152,-3,-4,-5,-6,-1,-1,155,-7,-8,]),'MALLOC':([6,56,79,],[-2,-1,105,]),',':([6,57,58,71,80,82,92,94,125,126,132,134,135,147,150,151,159,164,165,],[-2,-1,81,-1,-52,81,124,81,-43,81,-1,-1,-39,81,-53,161,81,-44,-40,]),'LTE':([6,67,68,88,89,101,103,],[-2,-1,-1,111,-2,-1,-1,]),'GTE':([6,67,68,88,89,101,103,],[-2,-1,-1,112,-2,-1,-1,]),'<':([6,67,68,88,89,101,103,],[-2,-1,-1,113,-2,-1,-1,]),'>':([6,42,67,68,88,89,101,103,],[-2,60,-1,-1,114,-2,-1,-1,]),'!':([6,67,68,88,89,101,103,],[-2,-1,-1,116,-2,-1,-1,]),'MAINCODE':([7,13,],[-35,21,]),':':([10,11,21,],[15,16,36,]),'(':([20,65,105,],[35,85,131,]),'-':([27,101,],[42,42,]),'.':([27,101,],[43,43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'structs':([0,],[2,]),'spnl':([0,12,22,34,53,69,120,],[3,17,37,50,75,91,144,]),'nl':([0,8,12,16,22,34,53,54,69,96,120,],[4,13,4,23,4,4,76,77,4,127,4,]),'space':([0,9,12,22,26,27,34,35,53,55,56,57,67,68,69,71,81,85,101,103,111,112,113,114,120,124,132,134,141,142,161,],[5,14,5,5,38,39,5,51,5,78,79,80,88,88,5,92,106,107,88,88,137,138,139,140,5,146,150,151,153,154,163,]),'func':([2,],[8,]),'tac':([8,],[12,]),'stmtnl':([12,120,],[18,145,]),'stmt':([18,91,145,],[24,122,157,]),'vardec':([18,91,145,],[25,25,25,]),'lhs':([18,78,79,91,145,],[26,98,98,26,26,]),'funcparams':([20,],[34,]),'declist':([37,],[53,]),'list':([40,59,73,95,128,148,],[58,82,94,126,147,159,]),'boolexp':([48,78,79,],[66,100,100,]),'paramlist':([51,],[71,]),'funcargs':([65,],[84,]),'boolop':([67,68,101,103,],[87,90,90,87,]),'rhs':([78,79,],[99,104,]),'funcbody':([91,],[120,]),'arglist':([107,],[134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('space -> <empty>','space',0,'p_space','parser.py',102),
  ('space -> SPACES','space',1,'p_space','parser.py',103),
  ('boolop -> space LTE space','boolop',3,'p_bool_op','parser.py',107),
  ('boolop -> space GTE space','boolop',3,'p_bool_op','parser.py',108),
  ('boolop -> space < space','boolop',3,'p_bool_op','parser.py',109),
  ('boolop -> space > space','boolop',3,'p_bool_op','parser.py',110),
  ('boolop -> space = = space','boolop',4,'p_bool_op','parser.py',111),
  ('boolop -> space ! = space','boolop',4,'p_bool_op','parser.py',112),
  ('boolexp -> VARNAME boolop VARNAME','boolexp',3,'p_bool_exp','parser.py',121),
  ('boolexp -> VARNAME boolop NUMBER','boolexp',3,'p_bool_exp','parser.py',122),
  ('boolexp -> NUMBER boolop VARNAME','boolexp',3,'p_bool_exp','parser.py',123),
  ('boolexp -> NUMBER boolop NUMBER','boolexp',3,'p_bool_exp','parser.py',124),
  ('lhs -> STARS VARNAME','lhs',2,'p_lhs','parser.py',132),
  ('lhs -> VARNAME - > VARNAME','lhs',4,'p_lhs','parser.py',133),
  ('lhs -> VARNAME . VARNAME','lhs',3,'p_lhs','parser.py',134),
  ('rhs -> boolexp','rhs',1,'p_rhs','parser.py',148),
  ('rhs -> lhs','rhs',1,'p_rhs','parser.py',149),
  ('rhs -> VARNAME','rhs',1,'p_rhs','parser.py',150),
  ('rhs -> & VARNAME','rhs',2,'p_rhs','parser.py',151),
  ('rhs -> NUMBER','rhs',1,'p_rhs','parser.py',152),
  ('vardec -> VARNAME SPACES list','vardec',3,'p_var_dec','parser.py',163),
  ('vardec -> VARNAME STARS SPACES list','vardec',4,'p_var_dec','parser.py',164),
  ('stmt -> vardec','stmt',1,'p_stmt','parser.py',181),
  ('stmt -> lhs space = space rhs','stmt',5,'p_stmt','parser.py',182),
  ('stmt -> VARNAME space = space rhs','stmt',5,'p_stmt','parser.py',183),
  ('stmt -> VARNAME space = space MALLOC ( )','stmt',7,'p_stmt','parser.py',184),
  ('stmt -> READ SPACES VARNAME','stmt',3,'p_stmt','parser.py',185),
  ('stmt -> USE SPACES VARNAME','stmt',3,'p_stmt','parser.py',186),
  ('stmt -> GOTO SPACES NUMBER','stmt',3,'p_stmt','parser.py',187),
  ('stmt -> CALL SPACES VARNAME funcargs','stmt',4,'p_stmt','parser.py',188),
  ('stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER','stmt',7,'p_stmt','parser.py',189),
  ('stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER','stmt',7,'p_stmt','parser.py',190),
  ('tac -> nl MAINCODE :','tac',3,'p_tac','parser.py',232),
  ('tac -> tac stmtnl stmt','tac',3,'p_tac','parser.py',233),
  ('nl -> NEWLINE','nl',1,'p_nl','parser.py',239),
  ('stmtnl -> NEWLINE','stmtnl',1,'p_stmt_nl','parser.py',245),
  ('funcbody -> stmt','funcbody',1,'p_funcbody','parser.py',257),
  ('funcbody -> funcbody stmtnl stmt','funcbody',3,'p_funcbody','parser.py',258),
  ('arglist -> VARNAME','arglist',1,'p_arg_list','parser.py',263),
  ('arglist -> arglist space , space VARNAME','arglist',5,'p_arg_list','parser.py',264),
  ('funcargs -> ( space )','funcargs',3,'p_func_args','parser.py',273),
  ('funcargs -> ( space arglist space )','funcargs',5,'p_func_args','parser.py',274),
  ('paramlist -> VARNAME SPACES VARNAME','paramlist',3,'p_param_list','parser.py',281),
  ('paramlist -> paramlist space , space VARNAME SPACES VARNAME','paramlist',7,'p_param_list','parser.py',282),
  ('funcparams -> ( space )','funcparams',3,'p_func_params','parser.py',295),
  ('funcparams -> ( space paramlist space )','funcparams',5,'p_func_params','parser.py',296),
  ('func -> FUNCS :','func',2,'p_func','parser.py',307),
  ('func -> func nl VARNAME funcparams spnl { spnl funcbody spnl }','func',10,'p_func','parser.py',308),
  ('func -> func nl VARNAME funcparams spnl { spnl }','func',8,'p_func','parser.py',309),
  ('spnl -> space','spnl',1,'p_space_nl','parser.py',321),
  ('spnl -> nl','spnl',1,'p_space_nl','parser.py',322),
  ('list -> VARNAME space','list',2,'p_list','parser.py',329),
  ('list -> list , space VARNAME space','list',5,'p_list','parser.py',330),
  ('declist -> VARNAME SPACES list','declist',3,'p_dec_list','parser.py',340),
  ('declist -> VARNAME STARS SPACES list','declist',4,'p_dec_list','parser.py',341),
  ('declist -> declist nl VARNAME SPACES list','declist',5,'p_dec_list','parser.py',342),
  ('declist -> declist nl VARNAME STARS SPACES list','declist',6,'p_dec_list','parser.py',343),
  ('structs -> spnl STRT : nl','structs',4,'p_structs','parser.py',368),
  ('structs -> structs VARNAME space { spnl declist spnl } nl','structs',9,'p_structs','parser.py',369),
  ('structs -> structs VARNAME space { spnl } nl','structs',7,'p_structs','parser.py',370),
  ('prog -> structs func tac spnl','prog',4,'p_prog','parser.py',383),
]
