
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progleftNUMBERnonassocLVL1nonassocLVL2CODE FNLT FUNCS GOTO GTE IF LTE NEWLINE NUMBER READ SPACES STLT STRT TMPVARNAME VARLT VARNAMEspace : %prec LVL1\n             | SPACES %prec LVL2var : VARNAME\n           | TMPVARNAMEboolop : space LTE space\n              | space GTE space\n              | space "<" space\n              | space ">" space\n              | space "=" "=" space\n              | space "!" "=" spaceboolexp : var boolop var\n               | var boolop NUMBER\n               | NUMBER boolop var\n               | NUMBER boolop NUMBERlhs : var %prec NUMBER\n           | "*" var\n           | var "-" ">" var\n           | var "." varrhs : boolexp\n           | lhs\n           | "&" var\n           | NUMBERstmt : lhs space "=" space rhs\n            | READ space var\n            | GOTO space NUMBER\n            | IF space boolexp space GOTO space NUMBER\n            | IF space var space GOTO space NUMBERtac : CODE ":"\n           | tacnl stmttacnl : tac NEWLINEnl : NEWLINEfuncbody : stmt\n                | funcbody nl stmtfunc : FUNCS ":" nl\n            | func VARNAME "{" spnl funcbody spnl "}" nl\n            | func VARNAME "{" spnl "}" nlspnl : space\n            | nllist : VARNAME\n            | list spnl "," spnl VARNAMEblist : "[" spnl list spnl "]"\n             | "[" spnl "]"declist : VARNAME space ":" space blist\n               | VARNAME "*" space ":" space blist\n               | declist spnl "," spnl VARNAME space ":" space blist\n               | declist spnl "," spnl VARNAME "*" space ":" space bliststructlist : spnl STLT space "=" space blist\n       varlist : nl VARLT space "=" space "{" spnl "}"\n               | nl VARLT space "=" space "{" spnl declist spnl "}"\n       funclist : nl FNLT space "=" space bliststruct : nl\n              | struct VARNAME space "{" spnl declist spnl "}" nl\n              | struct VARNAME "*" space "{" spnl declist spnl "}" nlstructs : nl STRT ":" structprog : structlist varlist funclist structs func tac'
    
_lr_action_items = {'STLT':([0,3,4,5,6,7,],[-1,10,-37,-38,-2,-31,]),'SPACES':([0,10,13,17,19,24,32,35,37,40,41,42,43,44,46,47,52,61,62,65,66,67,68,70,71,72,74,75,76,77,78,80,82,83,89,95,99,100,101,103,104,105,106,108,109,110,111,112,113,114,115,116,119,120,121,123,125,126,130,136,137,139,143,144,145,148,150,151,152,157,158,161,165,166,168,],[6,6,6,6,6,6,6,6,6,6,6,-15,6,6,-3,-4,6,-16,6,6,-42,-39,6,-32,6,-24,-18,-25,6,6,6,6,6,6,-17,6,6,-41,6,-33,-20,-23,-19,-15,-22,6,-14,-13,6,6,6,6,6,-11,-12,6,6,6,-21,6,6,6,6,-40,-26,-27,6,6,-43,6,-44,6,6,-45,-46,]),'NEWLINE':([0,2,8,11,26,30,31,34,35,37,38,39,46,47,52,61,63,65,66,67,68,69,70,72,74,75,81,82,89,95,100,101,102,103,104,105,106,108,109,111,112,120,121,123,124,125,130,139,144,145,148,150,152,154,158,160,166,168,],[7,7,7,7,36,7,7,-47,7,7,-28,-29,-3,-4,7,-16,-50,7,-42,-39,7,7,-32,-24,-18,-25,-48,7,-17,7,-41,7,7,-33,-20,-23,-19,-15,-22,-14,-13,-11,-12,7,-49,7,-21,7,-40,-26,-27,7,-43,7,-44,7,-45,-46,]),'$end':([1,26,38,39,46,47,61,72,74,75,89,104,105,106,108,109,111,112,120,121,130,145,148,],[0,-55,-28,-29,-3,-4,-16,-24,-18,-25,-17,-20,-23,-19,-15,-22,-14,-13,-11,-12,-21,-26,-27,]),']':([4,5,6,7,35,53,65,67,84,144,],[-37,-38,-2,-31,-1,66,-1,-39,100,-40,]),'VARNAME':([4,5,6,7,20,29,35,36,37,41,44,45,48,49,50,52,53,54,56,58,60,64,71,73,86,87,88,91,94,95,101,107,113,114,115,116,122,123,125,128,129,132,133,134,135,136,137,140,141,146,147,159,163,],[-37,-38,-2,-31,27,46,-1,-30,-1,-1,-1,46,-34,-51,62,-1,67,46,46,46,46,83,-1,46,46,-36,46,46,46,-1,-1,46,-1,-1,-1,-1,83,-1,-1,144,-35,-5,-6,-7,-8,-1,-1,83,151,-9,-10,-52,-53,]),'}':([4,5,6,7,37,46,47,52,54,61,64,66,68,70,72,74,75,82,85,86,89,97,100,103,104,105,106,108,109,111,112,120,121,130,139,145,148,149,150,152,155,158,166,168,],[-37,-38,-2,-31,-1,-3,-4,-1,69,-16,81,-42,-1,-32,-24,-18,-25,-1,102,-38,-17,124,-41,-33,-20,-23,-19,-15,-22,-14,-13,-11,-12,-21,-1,-26,-27,154,-1,-43,160,-44,-45,-46,]),'READ':([4,5,6,7,29,36,37,54,86,],[-37,-38,-2,-31,41,-30,-1,41,41,]),'GOTO':([4,5,6,7,29,36,37,46,47,54,76,78,86,90,93,111,112,120,121,],[-37,-38,-2,-31,43,-30,-1,-3,-4,43,-1,-1,43,110,119,-14,-13,-11,-12,]),'IF':([4,5,6,7,29,36,37,54,86,],[-37,-38,-2,-31,44,-30,-1,44,44,]),'*':([4,5,6,7,29,36,37,54,62,71,83,86,88,151,],[-37,-38,-2,-31,45,-30,-1,45,80,-1,99,45,45,157,]),'TMPVARNAME':([4,5,6,7,29,36,37,41,44,45,54,56,58,60,71,73,86,88,91,94,107,113,114,115,116,132,133,134,135,136,137,146,147,],[-37,-38,-2,-31,47,-30,-1,-1,-1,47,47,47,47,47,-1,47,47,47,47,47,47,-1,-1,-1,-1,-5,-6,-7,-8,-1,-1,-9,-10,]),',':([4,5,6,7,65,66,67,82,84,97,100,139,144,149,150,152,155,158,166,168,],[-37,-38,-2,-31,-1,-42,-39,-1,101,125,-41,-1,-40,125,-1,-43,125,-44,-45,-46,]),'=':([6,10,13,14,17,18,23,40,42,46,47,55,61,74,77,78,89,92,93,108,109,117,118,],[-2,-1,-1,19,-1,24,32,-1,-15,-3,-4,71,-16,-18,-1,-1,-17,117,117,-1,-1,136,137,]),'[':([6,19,25,32,51,126,142,143,153,161,164,165,167,],[-2,-1,35,-1,35,-1,35,-1,35,-1,35,-1,35,]),'{':([6,24,27,33,62,79,80,96,],[-2,-1,37,52,-1,95,-1,123,]),'NUMBER':([6,43,44,59,60,71,88,91,94,110,113,114,115,116,119,131,132,133,134,135,136,137,138,146,147,],[-2,-1,-1,75,77,-1,109,111,121,-1,-1,-1,-1,-1,-1,145,-5,-6,-7,-8,-1,-1,148,-9,-10,]),'&':([6,71,88,],[-2,-1,107,]),'LTE':([6,46,47,77,78,92,93,108,109,],[-2,-3,-4,-1,-1,113,113,-1,-1,]),'GTE':([6,46,47,77,78,92,93,108,109,],[-2,-3,-4,-1,-1,114,114,-1,-1,]),'<':([6,46,47,77,78,92,93,108,109,],[-2,-3,-4,-1,-1,115,115,-1,-1,]),'>':([6,46,47,57,77,78,92,93,108,109,],[-2,-3,-4,73,-1,-1,116,116,-1,-1,]),'!':([6,46,47,77,78,92,93,108,109,],[-2,-3,-4,-1,-1,118,118,-1,-1,]),':':([6,21,22,28,83,98,99,127,151,156,157,162,],[-2,30,31,38,-1,126,-1,143,-1,161,-1,165,]),'VARLT':([7,9,],[-31,13,]),'FNLT':([7,12,],[-31,17,]),'STRT':([7,16,],[-31,22,]),'CODE':([7,20,48,87,129,],[-31,28,-34,-36,-35,]),'FUNCS':([7,15,49,50,159,163,],[-31,21,-51,-54,-52,-53,]),'-':([42,46,47,108,],[57,-3,-4,57,]),'.':([42,46,47,108,],[58,-3,-4,58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'structlist':([0,],[2,]),'spnl':([0,35,37,52,65,68,82,95,101,123,125,139,150,],[3,53,54,64,84,85,97,122,128,140,141,149,155,]),'space':([0,10,13,17,19,24,32,35,37,40,41,43,44,52,62,65,68,71,76,77,78,80,82,83,95,99,101,108,109,110,113,114,115,116,119,123,125,126,136,137,139,143,150,151,157,161,165,],[4,14,18,23,25,33,51,4,4,55,56,59,60,4,79,4,4,88,90,92,93,96,4,98,4,127,4,92,92,131,132,133,134,135,138,4,4,142,146,147,4,153,4,156,162,164,167,]),'nl':([0,2,8,11,30,31,35,37,52,65,68,69,82,95,101,102,123,125,139,150,154,160,],[5,9,12,16,48,49,5,5,5,5,86,87,5,5,5,129,5,5,5,5,159,163,]),'varlist':([2,],[8,]),'funclist':([8,],[11,]),'structs':([11,],[15,]),'func':([15,],[20,]),'tac':([20,],[26,]),'tacnl':([20,],[29,]),'blist':([25,51,142,153,164,167,],[34,63,152,158,166,168,]),'stmt':([29,54,86,],[39,70,103,]),'lhs':([29,54,86,88,],[40,40,40,104,]),'var':([29,45,54,56,58,60,73,86,88,91,94,107,],[42,61,42,72,74,78,89,42,108,112,120,130,]),'struct':([31,],[50,]),'list':([53,],[65,]),'funcbody':([54,],[68,]),'boolexp':([60,88,],[76,106,]),'declist':([64,122,140,],[82,139,150,]),'boolop':([77,78,108,109,],[91,94,94,91,]),'rhs':([88,],[105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('space -> <empty>','space',0,'p_space','parser.py',24),
  ('space -> SPACES','space',1,'p_space','parser.py',25),
  ('var -> VARNAME','var',1,'p_var','parser.py',29),
  ('var -> TMPVARNAME','var',1,'p_var','parser.py',30),
  ('boolop -> space LTE space','boolop',3,'p_bool_op','parser.py',34),
  ('boolop -> space GTE space','boolop',3,'p_bool_op','parser.py',35),
  ('boolop -> space < space','boolop',3,'p_bool_op','parser.py',36),
  ('boolop -> space > space','boolop',3,'p_bool_op','parser.py',37),
  ('boolop -> space = = space','boolop',4,'p_bool_op','parser.py',38),
  ('boolop -> space ! = space','boolop',4,'p_bool_op','parser.py',39),
  ('boolexp -> var boolop var','boolexp',3,'p_bool_exp','parser.py',54),
  ('boolexp -> var boolop NUMBER','boolexp',3,'p_bool_exp','parser.py',55),
  ('boolexp -> NUMBER boolop var','boolexp',3,'p_bool_exp','parser.py',56),
  ('boolexp -> NUMBER boolop NUMBER','boolexp',3,'p_bool_exp','parser.py',57),
  ('lhs -> var','lhs',1,'p_lhs','parser.py',61),
  ('lhs -> * var','lhs',2,'p_lhs','parser.py',62),
  ('lhs -> var - > var','lhs',4,'p_lhs','parser.py',63),
  ('lhs -> var . var','lhs',3,'p_lhs','parser.py',64),
  ('rhs -> boolexp','rhs',1,'p_rhs','parser.py',79),
  ('rhs -> lhs','rhs',1,'p_rhs','parser.py',80),
  ('rhs -> & var','rhs',2,'p_rhs','parser.py',81),
  ('rhs -> NUMBER','rhs',1,'p_rhs','parser.py',82),
  ('stmt -> lhs space = space rhs','stmt',5,'p_stmt','parser.py',90),
  ('stmt -> READ space var','stmt',3,'p_stmt','parser.py',91),
  ('stmt -> GOTO space NUMBER','stmt',3,'p_stmt','parser.py',92),
  ('stmt -> IF space boolexp space GOTO space NUMBER','stmt',7,'p_stmt','parser.py',93),
  ('stmt -> IF space var space GOTO space NUMBER','stmt',7,'p_stmt','parser.py',94),
  ('tac -> CODE :','tac',2,'p_tac','parser.py',108),
  ('tac -> tacnl stmt','tac',2,'p_tac','parser.py',109),
  ('tacnl -> tac NEWLINE','tacnl',2,'p_tac_nl','parser.py',120),
  ('nl -> NEWLINE','nl',1,'p_nl','parser.py',127),
  ('funcbody -> stmt','funcbody',1,'p_funcbody','parser.py',132),
  ('funcbody -> funcbody nl stmt','funcbody',3,'p_funcbody','parser.py',133),
  ('func -> FUNCS : nl','func',3,'p_func','parser.py',139),
  ('func -> func VARNAME { spnl funcbody spnl } nl','func',8,'p_func','parser.py',140),
  ('func -> func VARNAME { spnl } nl','func',6,'p_func','parser.py',141),
  ('spnl -> space','spnl',1,'p_space_nl','parser.py',144),
  ('spnl -> nl','spnl',1,'p_space_nl','parser.py',145),
  ('list -> VARNAME','list',1,'p_list','parser.py',148),
  ('list -> list spnl , spnl VARNAME','list',5,'p_list','parser.py',149),
  ('blist -> [ spnl list spnl ]','blist',5,'p_boxlist','parser.py',157),
  ('blist -> [ spnl ]','blist',3,'p_boxlist','parser.py',158),
  ('declist -> VARNAME space : space blist','declist',5,'p_dec_list','parser.py',164),
  ('declist -> VARNAME * space : space blist','declist',6,'p_dec_list','parser.py',165),
  ('declist -> declist spnl , spnl VARNAME space : space blist','declist',9,'p_dec_list','parser.py',166),
  ('declist -> declist spnl , spnl VARNAME * space : space blist','declist',10,'p_dec_list','parser.py',167),
  ('structlist -> spnl STLT space = space blist','structlist',6,'p_lists','parser.py',174),
  ('varlist -> nl VARLT space = space { spnl }','varlist',8,'p_lists','parser.py',175),
  ('varlist -> nl VARLT space = space { spnl declist spnl }','varlist',10,'p_lists','parser.py',176),
  ('funclist -> nl FNLT space = space blist','funclist',6,'p_lists','parser.py',177),
  ('struct -> nl','struct',1,'p_struct','parser.py',191),
  ('struct -> struct VARNAME space { spnl declist spnl } nl','struct',9,'p_struct','parser.py',192),
  ('struct -> struct VARNAME * space { spnl declist spnl } nl','struct',10,'p_struct','parser.py',193),
  ('structs -> nl STRT : struct','structs',4,'p_structs','parser.py',196),
  ('prog -> structlist varlist funclist structs func tac','prog',6,'p_prog','parser.py',202),
]
