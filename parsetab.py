
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progleftNUMBERleftVARNAMEnonassocLVL1nonassocLVL2CALL FUNCS GOTO GTE IF LTE MAINCODE MALLOC NEWLINE NUMBER READ SPACES STARS STRT VARNAMEspace : %prec LVL1\n             | SPACES %prec LVL2boolop : space LTE space\n              | space GTE space\n              | space "<" space\n              | space ">" space\n              | space "=" "=" space\n              | space "!" "=" spaceboolexp : VARNAME boolop VARNAME\n               | VARNAME boolop NUMBER\n               | NUMBER boolop VARNAME\n               | NUMBER boolop NUMBERlhs : STARS VARNAME\n           | VARNAME "-" ">" VARNAME\n           | VARNAME "." VARNAMErhs : boolexp\n           | lhs\n           | VARNAME\n           | "&" VARNAME\n           | NUMBERvardec : VARNAME SPACES list\n              | VARNAME STARS SPACES liststmt : vardec\n            | lhs space "=" space rhs\n            | VARNAME space "=" space rhs\n            | VARNAME space "=" space MALLOC "(" ")"\n            | READ SPACES VARNAME\n            | GOTO SPACES NUMBER\n            | CALL SPACES VARNAME funcargs\n            | IF SPACES boolexp SPACES GOTO SPACES NUMBER\n            | IF SPACES VARNAME SPACES GOTO SPACES NUMBERtac : nl MAINCODE ":"\n           | tac stmtnl stmtnl : NEWLINEstmtnl : NEWLINEfuncbody : stmt\n                | funcbody stmtnl stmtarglist : VARNAME\n               | arglist space "," space VARNAMEfuncargs : "(" space ")"\n                | "(" space arglist space ")"paramlist : VARNAME SPACES VARNAME\n                 | paramlist space "," space VARNAME SPACES VARNAMEfuncparams : "(" space ")"\n                  | "(" space paramlist space ")"func : FUNCS ":"\n            | func nl VARNAME funcparams spnl "{" spnl funcbody spnl "}"\n            | func nl VARNAME funcparams spnl "{" spnl "}"spnl : space\n            | nllist : VARNAME space\n            | list "," space VARNAME spacedeclist : VARNAME SPACES list\n               | VARNAME STARS SPACES list\n               | declist nl VARNAME SPACES list\n               | declist nl VARNAME STARS SPACES liststructs : spnl STRT ":" nl\n              | structs VARNAME space "{" spnl declist spnl "}" nl\n              | structs VARNAME space "{" spnl "}" nlprog : structs func tac spnl'
    
_lr_action_items = {'STRT':([0,3,4,5,6,7,],[-1,11,-50,-49,-2,-34,]),'SPACES':([0,6,9,12,22,24,25,26,27,28,29,30,31,33,34,35,40,47,50,51,53,54,55,56,59,60,61,63,64,65,66,67,68,69,71,77,78,79,80,81,82,91,94,95,96,97,98,100,101,105,106,107,108,109,110,111,114,115,116,117,119,120,121,122,123,126,127,129,130,131,132,138,139,144,146,147,149,152,154,155,156,157,158,161,162,],[6,-2,6,6,6,-33,-23,6,39,43,44,45,46,6,6,-32,57,-13,70,6,6,6,-1,-21,-15,-27,-28,83,6,86,6,-44,6,90,92,-51,6,-22,-14,-29,6,-53,125,-17,-24,-16,-18,-20,-25,133,-12,-11,6,6,6,6,140,-9,-10,6,-36,-45,6,-42,-54,145,-19,-1,-40,6,-38,6,6,-55,-26,-52,-30,-31,-37,159,-56,-41,6,-43,-39,]),'NEWLINE':([0,6,8,12,15,16,22,24,25,33,35,47,51,52,55,56,59,60,61,66,67,77,79,80,81,91,93,95,96,97,98,100,101,106,107,115,116,117,118,119,120,123,127,129,130,144,146,147,149,152,153,154,156,157,],[7,-2,7,19,-46,7,7,-33,-23,7,-32,-13,7,7,-1,-21,-15,-27,-28,7,-44,-51,-22,-14,-29,-53,7,-17,-24,-16,-18,-20,-25,-12,-11,-9,-10,19,-48,-36,-45,-54,-19,-1,-40,-55,-26,-52,-30,-31,-47,-37,-56,-41,]),'$end':([1,4,5,6,12,17,19,24,25,35,47,55,56,59,60,61,77,79,80,81,95,96,97,98,100,101,106,107,115,116,127,129,130,146,147,149,152,157,],[0,-50,-49,-2,-1,-60,-34,-33,-23,-32,-13,-1,-21,-15,-27,-28,-51,-22,-14,-29,-17,-24,-16,-18,-20,-25,-12,-11,-9,-10,-19,-1,-40,-26,-52,-30,-31,-41,]),'VARNAME':([2,4,5,6,7,13,18,19,22,23,32,34,36,39,42,43,45,46,49,53,54,57,58,66,70,73,74,75,76,78,82,84,87,88,90,92,99,103,104,108,109,110,111,121,124,125,134,135,136,137,138,139,142,143,145,150,151,158,159,160,],[9,-50,-49,-2,-34,20,27,-35,-1,-57,47,-1,50,55,59,60,62,65,69,-1,-1,55,80,-1,55,94,-59,98,98,-1,-1,107,115,27,122,55,127,129,132,-1,-1,-1,-1,-1,-58,55,-3,-4,-5,-6,-1,-1,27,155,55,-7,-8,-1,161,162,]),'FUNCS':([2,7,23,74,124,],[10,-34,-57,-59,-58,]),'}':([4,5,6,7,19,22,25,36,47,51,55,56,59,60,61,66,72,73,77,79,80,81,88,91,95,96,97,98,100,101,106,107,115,116,117,119,123,127,129,130,141,144,146,147,149,152,154,156,157,],[-50,-49,-2,-34,-34,-1,-23,52,-13,-1,-1,-21,-15,-27,-28,-1,93,-50,-51,-22,-14,-29,118,-53,-17,-24,-16,-18,-20,-25,-12,-11,-9,-10,-1,-36,-54,-19,-1,-40,153,-55,-26,-52,-30,-31,-37,-56,-41,]),'{':([4,5,6,7,9,14,33,48,67,120,],[-50,-49,-2,-34,-1,22,-1,66,-44,-45,]),'READ':([4,5,6,7,18,19,66,88,142,],[-50,-49,-2,-34,28,-35,-1,28,28,]),'GOTO':([4,5,6,7,18,19,66,83,86,88,142,],[-50,-49,-2,-34,29,-35,-1,105,114,29,29,]),'CALL':([4,5,6,7,18,19,66,88,142,],[-50,-49,-2,-34,30,-35,-1,30,30,]),'IF':([4,5,6,7,18,19,66,88,142,],[-50,-49,-2,-34,31,-35,-1,31,31,]),'STARS':([4,5,6,7,18,19,27,50,53,54,66,75,76,88,94,142,],[-50,-49,-2,-34,32,-35,40,71,-1,-1,-1,32,32,32,126,32,]),'=':([6,26,27,37,38,39,47,59,64,65,80,85,86,98,100,112,113,],[-2,-1,-1,53,54,-2,-13,-15,-1,-1,-14,112,-2,-1,-1,138,139,]),')':([6,34,49,68,82,89,104,122,128,131,132,148,161,162,],[-2,-1,67,-1,-1,120,130,-42,146,-1,-38,157,-43,-39,]),'&':([6,53,54,75,76,],[-2,-1,-1,99,99,]),'NUMBER':([6,44,46,53,54,75,76,84,87,108,109,110,111,133,134,135,136,137,138,139,140,150,151,],[-2,61,64,-1,-1,100,100,106,116,-1,-1,-1,-1,149,-3,-4,-5,-6,-1,-1,152,-7,-8,]),'MALLOC':([6,54,76,],[-2,-1,102,]),',':([6,55,56,68,77,79,89,91,122,123,129,131,132,144,147,148,156,161,162,],[-2,-1,78,-1,-51,78,121,78,-42,78,-1,-1,-38,78,-52,158,78,-43,-39,]),'LTE':([6,64,65,85,86,98,100,],[-2,-1,-1,108,-2,-1,-1,]),'GTE':([6,64,65,85,86,98,100,],[-2,-1,-1,109,-2,-1,-1,]),'<':([6,64,65,85,86,98,100,],[-2,-1,-1,110,-2,-1,-1,]),'>':([6,41,64,65,85,86,98,100,],[-2,58,-1,-1,111,-2,-1,-1,]),'!':([6,64,65,85,86,98,100,],[-2,-1,-1,113,-2,-1,-1,]),'MAINCODE':([7,13,],[-34,21,]),':':([10,11,21,],[15,16,35,]),'(':([20,62,102,],[34,82,128,]),'-':([27,98,],[41,41,]),'.':([27,98,],[42,42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'structs':([0,],[2,]),'spnl':([0,12,22,33,51,66,117,],[3,17,36,48,72,88,141,]),'nl':([0,8,12,16,22,33,51,52,66,93,117,],[4,13,4,23,4,4,73,74,4,124,4,]),'space':([0,9,12,22,26,27,33,34,51,53,54,55,64,65,66,68,78,82,98,100,108,109,110,111,117,121,129,131,138,139,158,],[5,14,5,5,37,38,5,49,5,75,76,77,85,85,5,89,103,104,85,85,134,135,136,137,5,143,147,148,150,151,160,]),'func':([2,],[8,]),'tac':([8,],[12,]),'stmtnl':([12,117,],[18,142,]),'stmt':([18,88,142,],[24,119,154,]),'vardec':([18,88,142,],[25,25,25,]),'lhs':([18,75,76,88,142,],[26,95,95,26,26,]),'funcparams':([20,],[33,]),'declist':([36,],[51,]),'list':([39,57,70,92,125,145,],[56,79,91,123,144,156,]),'boolexp':([46,75,76,],[63,97,97,]),'paramlist':([49,],[68,]),'funcargs':([62,],[81,]),'boolop':([64,65,98,100,],[84,87,87,84,]),'rhs':([75,76,],[96,101,]),'funcbody':([88,],[117,]),'arglist':([104,],[131,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('space -> <empty>','space',0,'p_space','parser.py',102),
  ('space -> SPACES','space',1,'p_space','parser.py',103),
  ('boolop -> space LTE space','boolop',3,'p_bool_op','parser.py',107),
  ('boolop -> space GTE space','boolop',3,'p_bool_op','parser.py',108),
  ('boolop -> space < space','boolop',3,'p_bool_op','parser.py',109),
  ('boolop -> space > space','boolop',3,'p_bool_op','parser.py',110),
  ('boolop -> space = = space','boolop',4,'p_bool_op','parser.py',111),
  ('boolop -> space ! = space','boolop',4,'p_bool_op','parser.py',112),
  ('boolexp -> VARNAME boolop VARNAME','boolexp',3,'p_bool_exp','parser.py',127),
  ('boolexp -> VARNAME boolop NUMBER','boolexp',3,'p_bool_exp','parser.py',128),
  ('boolexp -> NUMBER boolop VARNAME','boolexp',3,'p_bool_exp','parser.py',129),
  ('boolexp -> NUMBER boolop NUMBER','boolexp',3,'p_bool_exp','parser.py',130),
  ('lhs -> STARS VARNAME','lhs',2,'p_lhs','parser.py',138),
  ('lhs -> VARNAME - > VARNAME','lhs',4,'p_lhs','parser.py',139),
  ('lhs -> VARNAME . VARNAME','lhs',3,'p_lhs','parser.py',140),
  ('rhs -> boolexp','rhs',1,'p_rhs','parser.py',154),
  ('rhs -> lhs','rhs',1,'p_rhs','parser.py',155),
  ('rhs -> VARNAME','rhs',1,'p_rhs','parser.py',156),
  ('rhs -> & VARNAME','rhs',2,'p_rhs','parser.py',157),
  ('rhs -> NUMBER','rhs',1,'p_rhs','parser.py',158),
  ('vardec -> VARNAME SPACES list','vardec',3,'p_var_dec','parser.py',169),
  ('vardec -> VARNAME STARS SPACES list','vardec',4,'p_var_dec','parser.py',170),
  ('stmt -> vardec','stmt',1,'p_stmt','parser.py',187),
  ('stmt -> lhs space = space rhs','stmt',5,'p_stmt','parser.py',188),
  ('stmt -> VARNAME space = space rhs','stmt',5,'p_stmt','parser.py',189),
  ('stmt -> VARNAME space = space MALLOC ( )','stmt',7,'p_stmt','parser.py',190),
  ('stmt -> READ SPACES VARNAME','stmt',3,'p_stmt','parser.py',191),
  ('stmt -> GOTO SPACES NUMBER','stmt',3,'p_stmt','parser.py',192),
  ('stmt -> CALL SPACES VARNAME funcargs','stmt',4,'p_stmt','parser.py',193),
  ('stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER','stmt',7,'p_stmt','parser.py',194),
  ('stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER','stmt',7,'p_stmt','parser.py',195),
  ('tac -> nl MAINCODE :','tac',3,'p_tac','parser.py',235),
  ('tac -> tac stmtnl stmt','tac',3,'p_tac','parser.py',236),
  ('nl -> NEWLINE','nl',1,'p_nl','parser.py',242),
  ('stmtnl -> NEWLINE','stmtnl',1,'p_stmt_nl','parser.py',248),
  ('funcbody -> stmt','funcbody',1,'p_funcbody','parser.py',260),
  ('funcbody -> funcbody stmtnl stmt','funcbody',3,'p_funcbody','parser.py',261),
  ('arglist -> VARNAME','arglist',1,'p_arg_list','parser.py',266),
  ('arglist -> arglist space , space VARNAME','arglist',5,'p_arg_list','parser.py',267),
  ('funcargs -> ( space )','funcargs',3,'p_func_args','parser.py',276),
  ('funcargs -> ( space arglist space )','funcargs',5,'p_func_args','parser.py',277),
  ('paramlist -> VARNAME SPACES VARNAME','paramlist',3,'p_param_list','parser.py',284),
  ('paramlist -> paramlist space , space VARNAME SPACES VARNAME','paramlist',7,'p_param_list','parser.py',285),
  ('funcparams -> ( space )','funcparams',3,'p_func_params','parser.py',298),
  ('funcparams -> ( space paramlist space )','funcparams',5,'p_func_params','parser.py',299),
  ('func -> FUNCS :','func',2,'p_func','parser.py',310),
  ('func -> func nl VARNAME funcparams spnl { spnl funcbody spnl }','func',10,'p_func','parser.py',311),
  ('func -> func nl VARNAME funcparams spnl { spnl }','func',8,'p_func','parser.py',312),
  ('spnl -> space','spnl',1,'p_space_nl','parser.py',324),
  ('spnl -> nl','spnl',1,'p_space_nl','parser.py',325),
  ('list -> VARNAME space','list',2,'p_list','parser.py',332),
  ('list -> list , space VARNAME space','list',5,'p_list','parser.py',333),
  ('declist -> VARNAME SPACES list','declist',3,'p_dec_list','parser.py',343),
  ('declist -> VARNAME STARS SPACES list','declist',4,'p_dec_list','parser.py',344),
  ('declist -> declist nl VARNAME SPACES list','declist',5,'p_dec_list','parser.py',345),
  ('declist -> declist nl VARNAME STARS SPACES list','declist',6,'p_dec_list','parser.py',346),
  ('structs -> spnl STRT : nl','structs',4,'p_structs','parser.py',371),
  ('structs -> structs VARNAME space { spnl declist spnl } nl','structs',9,'p_structs','parser.py',372),
  ('structs -> structs VARNAME space { spnl } nl','structs',7,'p_structs','parser.py',373),
  ('prog -> structs func tac spnl','prog',4,'p_prog','parser.py',386),
]
