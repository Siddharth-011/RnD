Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     space -> <empty>
Rule 2     space -> SPACES
Rule 3     boolop -> space LTE space
Rule 4     boolop -> space GTE space
Rule 5     boolop -> space < space
Rule 6     boolop -> space > space
Rule 7     boolop -> space = = space
Rule 8     boolop -> space ! = space
Rule 9     boolexp -> VARNAME boolop VARNAME
Rule 10    boolexp -> VARNAME boolop NUMBER
Rule 11    boolexp -> NUMBER boolop VARNAME
Rule 12    boolexp -> NUMBER boolop NUMBER
Rule 13    lhs -> STARS VARNAME
Rule 14    lhs -> VARNAME - > VARNAME
Rule 15    lhs -> VARNAME . VARNAME
Rule 16    rhs -> boolexp
Rule 17    rhs -> lhs
Rule 18    rhs -> VARNAME
Rule 19    rhs -> & VARNAME
Rule 20    rhs -> NUMBER
Rule 21    vardec -> VARNAME SPACES list
Rule 22    vardec -> VARNAME STARS SPACES list
Rule 23    stmt -> vardec
Rule 24    stmt -> lhs space = space rhs
Rule 25    stmt -> VARNAME space = space rhs
Rule 26    stmt -> VARNAME space = space MALLOC ( )
Rule 27    stmt -> READ SPACES VARNAME
Rule 28    stmt -> GOTO SPACES NUMBER
Rule 29    stmt -> CALL SPACES VARNAME funcargs
Rule 30    stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER
Rule 31    stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER
Rule 32    tac -> nl MAINCODE :
Rule 33    tac -> tac stmtnl stmt
Rule 34    nl -> NEWLINE
Rule 35    stmtnl -> NEWLINE
Rule 36    funcbody -> stmt
Rule 37    funcbody -> funcbody stmtnl stmt
Rule 38    arglist -> VARNAME
Rule 39    arglist -> arglist space , space VARNAME
Rule 40    funcargs -> ( space )
Rule 41    funcargs -> ( space arglist space )
Rule 42    paramlist -> VARNAME SPACES VARNAME
Rule 43    paramlist -> paramlist space , space VARNAME SPACES VARNAME
Rule 44    funcparams -> ( space )
Rule 45    funcparams -> ( space paramlist space )
Rule 46    func -> FUNCS :
Rule 47    func -> func nl VARNAME funcparams spnl { spnl funcbody spnl }
Rule 48    func -> func nl VARNAME funcparams spnl { spnl }
Rule 49    spnl -> space
Rule 50    spnl -> nl
Rule 51    list -> VARNAME space
Rule 52    list -> list , space VARNAME space
Rule 53    declist -> VARNAME SPACES list
Rule 54    declist -> VARNAME STARS SPACES list
Rule 55    declist -> declist nl VARNAME SPACES list
Rule 56    declist -> declist nl VARNAME STARS SPACES list
Rule 57    structs -> spnl STRT : nl
Rule 58    structs -> structs VARNAME space { spnl declist spnl } nl
Rule 59    structs -> structs VARNAME space { spnl } nl
Rule 60    prog -> structs func tac

Terminals, with rules where they appear

!                    : 8
&                    : 19
(                    : 26 40 41 44 45
)                    : 26 40 41 44 45
,                    : 39 43 52
-                    : 14
.                    : 15
:                    : 32 46 57
<                    : 5
=                    : 7 7 8 24 25 26
>                    : 6 14
CALL                 : 29
FUNCS                : 46
GOTO                 : 28 30 31
GTE                  : 4
IF                   : 30 31
LTE                  : 3
MAINCODE             : 32
MALLOC               : 26
NEWLINE              : 34 35
NUMBER               : 10 11 12 12 20 28 30 31
READ                 : 27
SPACES               : 2 21 22 27 28 29 30 30 30 31 31 31 42 43 53 54 55 56
STARS                : 13 22 54 56
STRT                 : 57
VARNAME              : 9 9 10 11 13 14 14 15 15 18 19 21 22 25 26 27 29 31 38 39 42 42 43 43 47 48 51 52 53 54 55 56 58 59
error                : 
{                    : 47 48 58 59
}                    : 47 48 58 59

Nonterminals, with rules where they appear

arglist              : 39 41
boolexp              : 16 30
boolop               : 9 10 11 12
declist              : 55 56 58
func                 : 47 48 60
funcargs             : 29
funcbody             : 37 47
funcparams           : 47 48
lhs                  : 17 24
list                 : 21 22 52 53 54 55 56
nl                   : 32 47 48 50 55 56 57 58 59
paramlist            : 43 45
prog                 : 0
rhs                  : 24 25
space                : 3 3 4 4 5 5 6 6 7 7 8 8 24 24 25 25 26 26 39 39 40 41 41 43 43 44 45 45 49 51 52 52 58 59
spnl                 : 47 47 47 48 48 57 58 58 59
stmt                 : 33 36 37
stmtnl               : 33 37
structs              : 58 59 60
tac                  : 33 60
vardec               : 23

Parsing method: LALR

state 0

    (0) S' -> . prog
    (60) prog -> . structs func tac
    (57) structs -> . spnl STRT : nl
    (58) structs -> . structs VARNAME space { spnl declist spnl } nl
    (59) structs -> . structs VARNAME space { spnl } nl
    (49) spnl -> . space
    (50) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (34) nl -> . NEWLINE

    STRT            reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    prog                           shift and go to state 1
    structs                        shift and go to state 2
    spnl                           shift and go to state 3
    nl                             shift and go to state 4
    space                          shift and go to state 5

state 1

    (0) S' -> prog .



state 2

    (60) prog -> structs . func tac
    (58) structs -> structs . VARNAME space { spnl declist spnl } nl
    (59) structs -> structs . VARNAME space { spnl } nl
    (46) func -> . FUNCS :
    (47) func -> . func nl VARNAME funcparams spnl { spnl funcbody spnl }
    (48) func -> . func nl VARNAME funcparams spnl { spnl }

    VARNAME         shift and go to state 9
    FUNCS           shift and go to state 10

    func                           shift and go to state 8

state 3

    (57) structs -> spnl . STRT : nl

    STRT            shift and go to state 11


state 4

    (50) spnl -> nl .

    STRT            reduce using rule 50 (spnl -> nl .)
    }               reduce using rule 50 (spnl -> nl .)
    VARNAME         reduce using rule 50 (spnl -> nl .)
    {               reduce using rule 50 (spnl -> nl .)
    READ            reduce using rule 50 (spnl -> nl .)
    GOTO            reduce using rule 50 (spnl -> nl .)
    CALL            reduce using rule 50 (spnl -> nl .)
    IF              reduce using rule 50 (spnl -> nl .)
    STARS           reduce using rule 50 (spnl -> nl .)


state 5

    (49) spnl -> space .

    STRT            reduce using rule 49 (spnl -> space .)
    }               reduce using rule 49 (spnl -> space .)
    VARNAME         reduce using rule 49 (spnl -> space .)
    {               reduce using rule 49 (spnl -> space .)
    READ            reduce using rule 49 (spnl -> space .)
    GOTO            reduce using rule 49 (spnl -> space .)
    CALL            reduce using rule 49 (spnl -> space .)
    IF              reduce using rule 49 (spnl -> space .)
    STARS           reduce using rule 49 (spnl -> space .)


state 6

    (2) space -> SPACES .

    STRT            reduce using rule 2 (space -> SPACES .)
    {               reduce using rule 2 (space -> SPACES .)
    }               reduce using rule 2 (space -> SPACES .)
    VARNAME         reduce using rule 2 (space -> SPACES .)
    =               reduce using rule 2 (space -> SPACES .)
    )               reduce using rule 2 (space -> SPACES .)
    &               reduce using rule 2 (space -> SPACES .)
    NUMBER          reduce using rule 2 (space -> SPACES .)
    STARS           reduce using rule 2 (space -> SPACES .)
    MALLOC          reduce using rule 2 (space -> SPACES .)
    ,               reduce using rule 2 (space -> SPACES .)
    NEWLINE         reduce using rule 2 (space -> SPACES .)
    $end            reduce using rule 2 (space -> SPACES .)
    SPACES          reduce using rule 2 (space -> SPACES .)
    LTE             reduce using rule 2 (space -> SPACES .)
    GTE             reduce using rule 2 (space -> SPACES .)
    <               reduce using rule 2 (space -> SPACES .)
    >               reduce using rule 2 (space -> SPACES .)
    !               reduce using rule 2 (space -> SPACES .)
    READ            reduce using rule 2 (space -> SPACES .)
    GOTO            reduce using rule 2 (space -> SPACES .)
    CALL            reduce using rule 2 (space -> SPACES .)
    IF              reduce using rule 2 (space -> SPACES .)


state 7

    (34) nl -> NEWLINE .

    STRT            reduce using rule 34 (nl -> NEWLINE .)
    VARNAME         reduce using rule 34 (nl -> NEWLINE .)
    MAINCODE        reduce using rule 34 (nl -> NEWLINE .)
    FUNCS           reduce using rule 34 (nl -> NEWLINE .)
    }               reduce using rule 34 (nl -> NEWLINE .)
    {               reduce using rule 34 (nl -> NEWLINE .)
    READ            reduce using rule 34 (nl -> NEWLINE .)
    GOTO            reduce using rule 34 (nl -> NEWLINE .)
    CALL            reduce using rule 34 (nl -> NEWLINE .)
    IF              reduce using rule 34 (nl -> NEWLINE .)
    STARS           reduce using rule 34 (nl -> NEWLINE .)


state 8

    (60) prog -> structs func . tac
    (47) func -> func . nl VARNAME funcparams spnl { spnl funcbody spnl }
    (48) func -> func . nl VARNAME funcparams spnl { spnl }
    (32) tac -> . nl MAINCODE :
    (33) tac -> . tac stmtnl stmt
    (34) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    tac                            shift and go to state 12
    nl                             shift and go to state 13

state 9

    (58) structs -> structs VARNAME . space { spnl declist spnl } nl
    (59) structs -> structs VARNAME . space { spnl } nl
    (1) space -> .
    (2) space -> . SPACES

    {               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 14

state 10

    (46) func -> FUNCS . :

    :               shift and go to state 15


state 11

    (57) structs -> spnl STRT . : nl

    :               shift and go to state 16


state 12

    (60) prog -> structs func tac .
    (33) tac -> tac . stmtnl stmt
    (35) stmtnl -> . NEWLINE

    $end            reduce using rule 60 (prog -> structs func tac .)
    NEWLINE         shift and go to state 18

    stmtnl                         shift and go to state 17

state 13

    (47) func -> func nl . VARNAME funcparams spnl { spnl funcbody spnl }
    (48) func -> func nl . VARNAME funcparams spnl { spnl }
    (32) tac -> nl . MAINCODE :

    VARNAME         shift and go to state 19
    MAINCODE        shift and go to state 20


state 14

    (58) structs -> structs VARNAME space . { spnl declist spnl } nl
    (59) structs -> structs VARNAME space . { spnl } nl

    {               shift and go to state 21


state 15

    (46) func -> FUNCS : .

    NEWLINE         reduce using rule 46 (func -> FUNCS : .)


state 16

    (57) structs -> spnl STRT : . nl
    (34) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 22

state 17

    (33) tac -> tac stmtnl . stmt
    (23) stmt -> . vardec
    (24) stmt -> . lhs space = space rhs
    (25) stmt -> . VARNAME space = space rhs
    (26) stmt -> . VARNAME space = space MALLOC ( )
    (27) stmt -> . READ SPACES VARNAME
    (28) stmt -> . GOTO SPACES NUMBER
    (29) stmt -> . CALL SPACES VARNAME funcargs
    (30) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (31) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (21) vardec -> . VARNAME SPACES list
    (22) vardec -> . VARNAME STARS SPACES list
    (13) lhs -> . STARS VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    VARNAME         shift and go to state 26
    READ            shift and go to state 27
    GOTO            shift and go to state 28
    CALL            shift and go to state 29
    IF              shift and go to state 30
    STARS           shift and go to state 31

    stmt                           shift and go to state 23
    vardec                         shift and go to state 24
    lhs                            shift and go to state 25

state 18

    (35) stmtnl -> NEWLINE .

    VARNAME         reduce using rule 35 (stmtnl -> NEWLINE .)
    READ            reduce using rule 35 (stmtnl -> NEWLINE .)
    GOTO            reduce using rule 35 (stmtnl -> NEWLINE .)
    CALL            reduce using rule 35 (stmtnl -> NEWLINE .)
    IF              reduce using rule 35 (stmtnl -> NEWLINE .)
    STARS           reduce using rule 35 (stmtnl -> NEWLINE .)


state 19

    (47) func -> func nl VARNAME . funcparams spnl { spnl funcbody spnl }
    (48) func -> func nl VARNAME . funcparams spnl { spnl }
    (44) funcparams -> . ( space )
    (45) funcparams -> . ( space paramlist space )

    (               shift and go to state 33

    funcparams                     shift and go to state 32

state 20

    (32) tac -> nl MAINCODE . :

    :               shift and go to state 34


state 21

    (58) structs -> structs VARNAME space { . spnl declist spnl } nl
    (59) structs -> structs VARNAME space { . spnl } nl
    (49) spnl -> . space
    (50) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (34) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    space                          shift and go to state 5
    spnl                           shift and go to state 35
    nl                             shift and go to state 4

state 22

    (57) structs -> spnl STRT : nl .

    VARNAME         reduce using rule 57 (structs -> spnl STRT : nl .)
    FUNCS           reduce using rule 57 (structs -> spnl STRT : nl .)


state 23

    (33) tac -> tac stmtnl stmt .

    NEWLINE         reduce using rule 33 (tac -> tac stmtnl stmt .)
    $end            reduce using rule 33 (tac -> tac stmtnl stmt .)


state 24

    (23) stmt -> vardec .

    NEWLINE         reduce using rule 23 (stmt -> vardec .)
    $end            reduce using rule 23 (stmt -> vardec .)
    SPACES          reduce using rule 23 (stmt -> vardec .)
    }               reduce using rule 23 (stmt -> vardec .)


state 25

    (24) stmt -> lhs . space = space rhs
    (1) space -> .
    (2) space -> . SPACES

    =               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 36

state 26

    (25) stmt -> VARNAME . space = space rhs
    (26) stmt -> VARNAME . space = space MALLOC ( )
    (21) vardec -> VARNAME . SPACES list
    (22) vardec -> VARNAME . STARS SPACES list
    (14) lhs -> VARNAME . - > VARNAME
    (15) lhs -> VARNAME . . VARNAME
    (1) space -> .
    (2) space -> . SPACES

    SPACES          shift and go to state 38
    STARS           shift and go to state 39
    -               shift and go to state 40
    .               shift and go to state 41
    =               reduce using rule 1 (space -> .)

    space                          shift and go to state 37

state 27

    (27) stmt -> READ . SPACES VARNAME

    SPACES          shift and go to state 42


state 28

    (28) stmt -> GOTO . SPACES NUMBER

    SPACES          shift and go to state 43


state 29

    (29) stmt -> CALL . SPACES VARNAME funcargs

    SPACES          shift and go to state 44


state 30

    (30) stmt -> IF . SPACES boolexp SPACES GOTO SPACES NUMBER
    (31) stmt -> IF . SPACES VARNAME SPACES GOTO SPACES NUMBER

    SPACES          shift and go to state 45


state 31

    (13) lhs -> STARS . VARNAME

    VARNAME         shift and go to state 46


state 32

    (47) func -> func nl VARNAME funcparams . spnl { spnl funcbody spnl }
    (48) func -> func nl VARNAME funcparams . spnl { spnl }
    (49) spnl -> . space
    (50) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (34) nl -> . NEWLINE

    {               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    nl                             shift and go to state 4
    spnl                           shift and go to state 47
    space                          shift and go to state 5

state 33

    (44) funcparams -> ( . space )
    (45) funcparams -> ( . space paramlist space )
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 48

state 34

    (32) tac -> nl MAINCODE : .

    NEWLINE         reduce using rule 32 (tac -> nl MAINCODE : .)
    $end            reduce using rule 32 (tac -> nl MAINCODE : .)


state 35

    (58) structs -> structs VARNAME space { spnl . declist spnl } nl
    (59) structs -> structs VARNAME space { spnl . } nl
    (53) declist -> . VARNAME SPACES list
    (54) declist -> . VARNAME STARS SPACES list
    (55) declist -> . declist nl VARNAME SPACES list
    (56) declist -> . declist nl VARNAME STARS SPACES list

    }               shift and go to state 51
    VARNAME         shift and go to state 49

    declist                        shift and go to state 50

state 36

    (24) stmt -> lhs space . = space rhs

    =               shift and go to state 52


state 37

    (25) stmt -> VARNAME space . = space rhs
    (26) stmt -> VARNAME space . = space MALLOC ( )

    =               shift and go to state 53


state 38

    (21) vardec -> VARNAME SPACES . list
    (2) space -> SPACES .
    (51) list -> . VARNAME space
    (52) list -> . list , space VARNAME space

    =               reduce using rule 2 (space -> SPACES .)
    VARNAME         shift and go to state 54

    list                           shift and go to state 55

state 39

    (22) vardec -> VARNAME STARS . SPACES list

    SPACES          shift and go to state 56


state 40

    (14) lhs -> VARNAME - . > VARNAME

    >               shift and go to state 57


state 41

    (15) lhs -> VARNAME . . VARNAME

    VARNAME         shift and go to state 58


state 42

    (27) stmt -> READ SPACES . VARNAME

    VARNAME         shift and go to state 59


state 43

    (28) stmt -> GOTO SPACES . NUMBER

    NUMBER          shift and go to state 60


state 44

    (29) stmt -> CALL SPACES . VARNAME funcargs

    VARNAME         shift and go to state 61


state 45

    (30) stmt -> IF SPACES . boolexp SPACES GOTO SPACES NUMBER
    (31) stmt -> IF SPACES . VARNAME SPACES GOTO SPACES NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER

    VARNAME         shift and go to state 64
    NUMBER          shift and go to state 63

    boolexp                        shift and go to state 62

state 46

    (13) lhs -> STARS VARNAME .

    SPACES          reduce using rule 13 (lhs -> STARS VARNAME .)
    =               reduce using rule 13 (lhs -> STARS VARNAME .)
    NEWLINE         reduce using rule 13 (lhs -> STARS VARNAME .)
    $end            reduce using rule 13 (lhs -> STARS VARNAME .)
    }               reduce using rule 13 (lhs -> STARS VARNAME .)


state 47

    (47) func -> func nl VARNAME funcparams spnl . { spnl funcbody spnl }
    (48) func -> func nl VARNAME funcparams spnl . { spnl }

    {               shift and go to state 65


state 48

    (44) funcparams -> ( space . )
    (45) funcparams -> ( space . paramlist space )
    (42) paramlist -> . VARNAME SPACES VARNAME
    (43) paramlist -> . paramlist space , space VARNAME SPACES VARNAME

    )               shift and go to state 66
    VARNAME         shift and go to state 68

    paramlist                      shift and go to state 67

state 49

    (53) declist -> VARNAME . SPACES list
    (54) declist -> VARNAME . STARS SPACES list

    SPACES          shift and go to state 69
    STARS           shift and go to state 70


state 50

    (58) structs -> structs VARNAME space { spnl declist . spnl } nl
    (55) declist -> declist . nl VARNAME SPACES list
    (56) declist -> declist . nl VARNAME STARS SPACES list
    (49) spnl -> . space
    (50) spnl -> . nl
    (34) nl -> . NEWLINE
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         shift and go to state 7
    }               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 5
    spnl                           shift and go to state 71
    nl                             shift and go to state 72

state 51

    (59) structs -> structs VARNAME space { spnl } . nl
    (34) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 73

state 52

    (24) stmt -> lhs space = . space rhs
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    &               reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    STARS           reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 74

state 53

    (25) stmt -> VARNAME space = . space rhs
    (26) stmt -> VARNAME space = . space MALLOC ( )
    (1) space -> .
    (2) space -> . SPACES

    MALLOC          reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    &               reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    STARS           reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 75

state 54

    (51) list -> VARNAME . space
    (1) space -> .
    (2) space -> . SPACES

    ,               reduce using rule 1 (space -> .)
    NEWLINE         reduce using rule 1 (space -> .)
    $end            reduce using rule 1 (space -> .)
    SPACES          reduce using rule 1 (space -> .)
    }               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    space                          shift and go to state 76

state 55

    (21) vardec -> VARNAME SPACES list .
    (52) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 21 (vardec -> VARNAME SPACES list .)
    $end            reduce using rule 21 (vardec -> VARNAME SPACES list .)
    SPACES          reduce using rule 21 (vardec -> VARNAME SPACES list .)
    }               reduce using rule 21 (vardec -> VARNAME SPACES list .)
    ,               shift and go to state 77


state 56

    (22) vardec -> VARNAME STARS SPACES . list
    (51) list -> . VARNAME space
    (52) list -> . list , space VARNAME space

    VARNAME         shift and go to state 54

    list                           shift and go to state 78

state 57

    (14) lhs -> VARNAME - > . VARNAME

    VARNAME         shift and go to state 79


state 58

    (15) lhs -> VARNAME . VARNAME .

    SPACES          reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    =               reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    NEWLINE         reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    $end            reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    }               reduce using rule 15 (lhs -> VARNAME . VARNAME .)


state 59

    (27) stmt -> READ SPACES VARNAME .

    NEWLINE         reduce using rule 27 (stmt -> READ SPACES VARNAME .)
    $end            reduce using rule 27 (stmt -> READ SPACES VARNAME .)
    SPACES          reduce using rule 27 (stmt -> READ SPACES VARNAME .)
    }               reduce using rule 27 (stmt -> READ SPACES VARNAME .)


state 60

    (28) stmt -> GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 28 (stmt -> GOTO SPACES NUMBER .)
    $end            reduce using rule 28 (stmt -> GOTO SPACES NUMBER .)
    SPACES          reduce using rule 28 (stmt -> GOTO SPACES NUMBER .)
    }               reduce using rule 28 (stmt -> GOTO SPACES NUMBER .)


state 61

    (29) stmt -> CALL SPACES VARNAME . funcargs
    (40) funcargs -> . ( space )
    (41) funcargs -> . ( space arglist space )

    (               shift and go to state 81

    funcargs                       shift and go to state 80

state 62

    (30) stmt -> IF SPACES boolexp . SPACES GOTO SPACES NUMBER

    SPACES          shift and go to state 82


state 63

    (11) boolexp -> NUMBER . boolop VARNAME
    (12) boolexp -> NUMBER . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    boolop                         shift and go to state 83
    space                          shift and go to state 84

state 64

    (31) stmt -> IF SPACES VARNAME . SPACES GOTO SPACES NUMBER
    (9) boolexp -> VARNAME . boolop VARNAME
    (10) boolexp -> VARNAME . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    SPACES          shift and go to state 85
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

    boolop                         shift and go to state 86
    space                          shift and go to state 84

state 65

    (47) func -> func nl VARNAME funcparams spnl { . spnl funcbody spnl }
    (48) func -> func nl VARNAME funcparams spnl { . spnl }
    (49) spnl -> . space
    (50) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (34) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    READ            reduce using rule 1 (space -> .)
    GOTO            reduce using rule 1 (space -> .)
    CALL            reduce using rule 1 (space -> .)
    IF              reduce using rule 1 (space -> .)
    STARS           reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    nl                             shift and go to state 4
    spnl                           shift and go to state 87
    space                          shift and go to state 5

state 66

    (44) funcparams -> ( space ) .

    SPACES          reduce using rule 44 (funcparams -> ( space ) .)
    NEWLINE         reduce using rule 44 (funcparams -> ( space ) .)
    {               reduce using rule 44 (funcparams -> ( space ) .)


state 67

    (45) funcparams -> ( space paramlist . space )
    (43) paramlist -> paramlist . space , space VARNAME SPACES VARNAME
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 88

state 68

    (42) paramlist -> VARNAME . SPACES VARNAME

    SPACES          shift and go to state 89


state 69

    (53) declist -> VARNAME SPACES . list
    (51) list -> . VARNAME space
    (52) list -> . list , space VARNAME space

    VARNAME         shift and go to state 54

    list                           shift and go to state 90

state 70

    (54) declist -> VARNAME STARS . SPACES list

    SPACES          shift and go to state 91


state 71

    (58) structs -> structs VARNAME space { spnl declist spnl . } nl

    }               shift and go to state 92


state 72

    (55) declist -> declist nl . VARNAME SPACES list
    (56) declist -> declist nl . VARNAME STARS SPACES list
    (50) spnl -> nl .

    VARNAME         shift and go to state 93
    }               reduce using rule 50 (spnl -> nl .)


state 73

    (59) structs -> structs VARNAME space { spnl } nl .

    VARNAME         reduce using rule 59 (structs -> structs VARNAME space { spnl } nl .)
    FUNCS           reduce using rule 59 (structs -> structs VARNAME space { spnl } nl .)


state 74

    (24) stmt -> lhs space = space . rhs
    (16) rhs -> . boolexp
    (17) rhs -> . lhs
    (18) rhs -> . VARNAME
    (19) rhs -> . & VARNAME
    (20) rhs -> . NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER
    (13) lhs -> . STARS VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    VARNAME         shift and go to state 97
    &               shift and go to state 98
    NUMBER          shift and go to state 99
    STARS           shift and go to state 31

    lhs                            shift and go to state 94
    rhs                            shift and go to state 95
    boolexp                        shift and go to state 96

state 75

    (25) stmt -> VARNAME space = space . rhs
    (26) stmt -> VARNAME space = space . MALLOC ( )
    (16) rhs -> . boolexp
    (17) rhs -> . lhs
    (18) rhs -> . VARNAME
    (19) rhs -> . & VARNAME
    (20) rhs -> . NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER
    (13) lhs -> . STARS VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    MALLOC          shift and go to state 101
    VARNAME         shift and go to state 97
    &               shift and go to state 98
    NUMBER          shift and go to state 99
    STARS           shift and go to state 31

    rhs                            shift and go to state 100
    boolexp                        shift and go to state 96
    lhs                            shift and go to state 94

state 76

    (51) list -> VARNAME space .

    ,               reduce using rule 51 (list -> VARNAME space .)
    NEWLINE         reduce using rule 51 (list -> VARNAME space .)
    $end            reduce using rule 51 (list -> VARNAME space .)
    SPACES          reduce using rule 51 (list -> VARNAME space .)
    }               reduce using rule 51 (list -> VARNAME space .)


state 77

    (52) list -> list , . space VARNAME space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 102

state 78

    (22) vardec -> VARNAME STARS SPACES list .
    (52) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 22 (vardec -> VARNAME STARS SPACES list .)
    $end            reduce using rule 22 (vardec -> VARNAME STARS SPACES list .)
    SPACES          reduce using rule 22 (vardec -> VARNAME STARS SPACES list .)
    }               reduce using rule 22 (vardec -> VARNAME STARS SPACES list .)
    ,               shift and go to state 77


state 79

    (14) lhs -> VARNAME - > VARNAME .

    SPACES          reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    =               reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    NEWLINE         reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    $end            reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    }               reduce using rule 14 (lhs -> VARNAME - > VARNAME .)


state 80

    (29) stmt -> CALL SPACES VARNAME funcargs .

    NEWLINE         reduce using rule 29 (stmt -> CALL SPACES VARNAME funcargs .)
    $end            reduce using rule 29 (stmt -> CALL SPACES VARNAME funcargs .)
    SPACES          reduce using rule 29 (stmt -> CALL SPACES VARNAME funcargs .)
    }               reduce using rule 29 (stmt -> CALL SPACES VARNAME funcargs .)


state 81

    (40) funcargs -> ( . space )
    (41) funcargs -> ( . space arglist space )
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 103

state 82

    (30) stmt -> IF SPACES boolexp SPACES . GOTO SPACES NUMBER

    GOTO            shift and go to state 104


state 83

    (11) boolexp -> NUMBER boolop . VARNAME
    (12) boolexp -> NUMBER boolop . NUMBER

    VARNAME         shift and go to state 106
    NUMBER          shift and go to state 105


state 84

    (3) boolop -> space . LTE space
    (4) boolop -> space . GTE space
    (5) boolop -> space . < space
    (6) boolop -> space . > space
    (7) boolop -> space . = = space
    (8) boolop -> space . ! = space

    LTE             shift and go to state 107
    GTE             shift and go to state 108
    <               shift and go to state 109
    >               shift and go to state 110
    =               shift and go to state 111
    !               shift and go to state 112


state 85

    (31) stmt -> IF SPACES VARNAME SPACES . GOTO SPACES NUMBER
    (2) space -> SPACES .

    GOTO            shift and go to state 113
    LTE             reduce using rule 2 (space -> SPACES .)
    GTE             reduce using rule 2 (space -> SPACES .)
    <               reduce using rule 2 (space -> SPACES .)
    >               reduce using rule 2 (space -> SPACES .)
    =               reduce using rule 2 (space -> SPACES .)
    !               reduce using rule 2 (space -> SPACES .)


state 86

    (9) boolexp -> VARNAME boolop . VARNAME
    (10) boolexp -> VARNAME boolop . NUMBER

    VARNAME         shift and go to state 114
    NUMBER          shift and go to state 115


state 87

    (47) func -> func nl VARNAME funcparams spnl { spnl . funcbody spnl }
    (48) func -> func nl VARNAME funcparams spnl { spnl . }
    (36) funcbody -> . stmt
    (37) funcbody -> . funcbody stmtnl stmt
    (23) stmt -> . vardec
    (24) stmt -> . lhs space = space rhs
    (25) stmt -> . VARNAME space = space rhs
    (26) stmt -> . VARNAME space = space MALLOC ( )
    (27) stmt -> . READ SPACES VARNAME
    (28) stmt -> . GOTO SPACES NUMBER
    (29) stmt -> . CALL SPACES VARNAME funcargs
    (30) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (31) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (21) vardec -> . VARNAME SPACES list
    (22) vardec -> . VARNAME STARS SPACES list
    (13) lhs -> . STARS VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    }               shift and go to state 117
    VARNAME         shift and go to state 26
    READ            shift and go to state 27
    GOTO            shift and go to state 28
    CALL            shift and go to state 29
    IF              shift and go to state 30
    STARS           shift and go to state 31

    funcbody                       shift and go to state 116
    stmt                           shift and go to state 118
    vardec                         shift and go to state 24
    lhs                            shift and go to state 25

state 88

    (45) funcparams -> ( space paramlist space . )
    (43) paramlist -> paramlist space . , space VARNAME SPACES VARNAME

    )               shift and go to state 119
    ,               shift and go to state 120


state 89

    (42) paramlist -> VARNAME SPACES . VARNAME

    VARNAME         shift and go to state 121


state 90

    (53) declist -> VARNAME SPACES list .
    (52) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 53 (declist -> VARNAME SPACES list .)
    SPACES          reduce using rule 53 (declist -> VARNAME SPACES list .)
    }               reduce using rule 53 (declist -> VARNAME SPACES list .)
    ,               shift and go to state 77


state 91

    (54) declist -> VARNAME STARS SPACES . list
    (51) list -> . VARNAME space
    (52) list -> . list , space VARNAME space

    VARNAME         shift and go to state 54

    list                           shift and go to state 122

state 92

    (58) structs -> structs VARNAME space { spnl declist spnl } . nl
    (34) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 123

state 93

    (55) declist -> declist nl VARNAME . SPACES list
    (56) declist -> declist nl VARNAME . STARS SPACES list

    SPACES          shift and go to state 124
    STARS           shift and go to state 125


state 94

    (17) rhs -> lhs .

    NEWLINE         reduce using rule 17 (rhs -> lhs .)
    $end            reduce using rule 17 (rhs -> lhs .)
    SPACES          reduce using rule 17 (rhs -> lhs .)
    }               reduce using rule 17 (rhs -> lhs .)


state 95

    (24) stmt -> lhs space = space rhs .

    NEWLINE         reduce using rule 24 (stmt -> lhs space = space rhs .)
    $end            reduce using rule 24 (stmt -> lhs space = space rhs .)
    SPACES          reduce using rule 24 (stmt -> lhs space = space rhs .)
    }               reduce using rule 24 (stmt -> lhs space = space rhs .)


state 96

    (16) rhs -> boolexp .

    NEWLINE         reduce using rule 16 (rhs -> boolexp .)
    $end            reduce using rule 16 (rhs -> boolexp .)
    SPACES          reduce using rule 16 (rhs -> boolexp .)
    }               reduce using rule 16 (rhs -> boolexp .)


state 97

    (18) rhs -> VARNAME .
    (9) boolexp -> VARNAME . boolop VARNAME
    (10) boolexp -> VARNAME . boolop NUMBER
    (14) lhs -> VARNAME . - > VARNAME
    (15) lhs -> VARNAME . . VARNAME
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         reduce using rule 18 (rhs -> VARNAME .)
    $end            reduce using rule 18 (rhs -> VARNAME .)
    SPACES          reduce using rule 18 (rhs -> VARNAME .)
    }               reduce using rule 18 (rhs -> VARNAME .)
    -               shift and go to state 40
    .               shift and go to state 41
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    boolop                         shift and go to state 86
    space                          shift and go to state 84

state 98

    (19) rhs -> & . VARNAME

    VARNAME         shift and go to state 126


state 99

    (20) rhs -> NUMBER .
    (11) boolexp -> NUMBER . boolop VARNAME
    (12) boolexp -> NUMBER . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         reduce using rule 20 (rhs -> NUMBER .)
    $end            reduce using rule 20 (rhs -> NUMBER .)
    SPACES          reduce using rule 20 (rhs -> NUMBER .)
    }               reduce using rule 20 (rhs -> NUMBER .)
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    boolop                         shift and go to state 83
    space                          shift and go to state 84

state 100

    (25) stmt -> VARNAME space = space rhs .

    NEWLINE         reduce using rule 25 (stmt -> VARNAME space = space rhs .)
    $end            reduce using rule 25 (stmt -> VARNAME space = space rhs .)
    SPACES          reduce using rule 25 (stmt -> VARNAME space = space rhs .)
    }               reduce using rule 25 (stmt -> VARNAME space = space rhs .)


state 101

    (26) stmt -> VARNAME space = space MALLOC . ( )

    (               shift and go to state 127


state 102

    (52) list -> list , space . VARNAME space

    VARNAME         shift and go to state 128


state 103

    (40) funcargs -> ( space . )
    (41) funcargs -> ( space . arglist space )
    (38) arglist -> . VARNAME
    (39) arglist -> . arglist space , space VARNAME

    )               shift and go to state 129
    VARNAME         shift and go to state 131

    arglist                        shift and go to state 130

state 104

    (30) stmt -> IF SPACES boolexp SPACES GOTO . SPACES NUMBER

    SPACES          shift and go to state 132


state 105

    (12) boolexp -> NUMBER boolop NUMBER .

    SPACES          reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    NEWLINE         reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    $end            reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    }               reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)


state 106

    (11) boolexp -> NUMBER boolop VARNAME .

    SPACES          reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    NEWLINE         reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    $end            reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    }               reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)


state 107

    (3) boolop -> space LTE . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 133

state 108

    (4) boolop -> space GTE . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 134

state 109

    (5) boolop -> space < . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 135

state 110

    (6) boolop -> space > . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 136

state 111

    (7) boolop -> space = . = space

    =               shift and go to state 137


state 112

    (8) boolop -> space ! . = space

    =               shift and go to state 138


state 113

    (31) stmt -> IF SPACES VARNAME SPACES GOTO . SPACES NUMBER

    SPACES          shift and go to state 139


state 114

    (9) boolexp -> VARNAME boolop VARNAME .

    SPACES          reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    NEWLINE         reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    $end            reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    }               reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)


state 115

    (10) boolexp -> VARNAME boolop NUMBER .

    SPACES          reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    NEWLINE         reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    $end            reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    }               reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)


state 116

    (47) func -> func nl VARNAME funcparams spnl { spnl funcbody . spnl }
    (37) funcbody -> funcbody . stmtnl stmt
    (49) spnl -> . space
    (50) spnl -> . nl
    (35) stmtnl -> . NEWLINE
    (1) space -> .
    (2) space -> . SPACES
    (34) nl -> . NEWLINE

    NEWLINE         shift and go to state 142
    }               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    nl                             shift and go to state 4
    spnl                           shift and go to state 140
    stmtnl                         shift and go to state 141
    space                          shift and go to state 5

state 117

    (48) func -> func nl VARNAME funcparams spnl { spnl } .

    NEWLINE         reduce using rule 48 (func -> func nl VARNAME funcparams spnl { spnl } .)


state 118

    (36) funcbody -> stmt .

    NEWLINE         reduce using rule 36 (funcbody -> stmt .)
    SPACES          reduce using rule 36 (funcbody -> stmt .)
    }               reduce using rule 36 (funcbody -> stmt .)


state 119

    (45) funcparams -> ( space paramlist space ) .

    SPACES          reduce using rule 45 (funcparams -> ( space paramlist space ) .)
    NEWLINE         reduce using rule 45 (funcparams -> ( space paramlist space ) .)
    {               reduce using rule 45 (funcparams -> ( space paramlist space ) .)


state 120

    (43) paramlist -> paramlist space , . space VARNAME SPACES VARNAME
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 143

state 121

    (42) paramlist -> VARNAME SPACES VARNAME .

    SPACES          reduce using rule 42 (paramlist -> VARNAME SPACES VARNAME .)
    )               reduce using rule 42 (paramlist -> VARNAME SPACES VARNAME .)
    ,               reduce using rule 42 (paramlist -> VARNAME SPACES VARNAME .)


state 122

    (54) declist -> VARNAME STARS SPACES list .
    (52) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 54 (declist -> VARNAME STARS SPACES list .)
    SPACES          reduce using rule 54 (declist -> VARNAME STARS SPACES list .)
    }               reduce using rule 54 (declist -> VARNAME STARS SPACES list .)
    ,               shift and go to state 77


state 123

    (58) structs -> structs VARNAME space { spnl declist spnl } nl .

    VARNAME         reduce using rule 58 (structs -> structs VARNAME space { spnl declist spnl } nl .)
    FUNCS           reduce using rule 58 (structs -> structs VARNAME space { spnl declist spnl } nl .)


state 124

    (55) declist -> declist nl VARNAME SPACES . list
    (51) list -> . VARNAME space
    (52) list -> . list , space VARNAME space

    VARNAME         shift and go to state 54

    list                           shift and go to state 144

state 125

    (56) declist -> declist nl VARNAME STARS . SPACES list

    SPACES          shift and go to state 145


state 126

    (19) rhs -> & VARNAME .

    NEWLINE         reduce using rule 19 (rhs -> & VARNAME .)
    $end            reduce using rule 19 (rhs -> & VARNAME .)
    SPACES          reduce using rule 19 (rhs -> & VARNAME .)
    }               reduce using rule 19 (rhs -> & VARNAME .)


state 127

    (26) stmt -> VARNAME space = space MALLOC ( . )

    )               shift and go to state 146


state 128

    (52) list -> list , space VARNAME . space
    (1) space -> .
    (2) space -> . SPACES

    ,               reduce using rule 1 (space -> .)
    NEWLINE         reduce using rule 1 (space -> .)
    $end            reduce using rule 1 (space -> .)
    SPACES          reduce using rule 1 (space -> .)
    }               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    space                          shift and go to state 147

state 129

    (40) funcargs -> ( space ) .

    NEWLINE         reduce using rule 40 (funcargs -> ( space ) .)
    $end            reduce using rule 40 (funcargs -> ( space ) .)
    SPACES          reduce using rule 40 (funcargs -> ( space ) .)
    }               reduce using rule 40 (funcargs -> ( space ) .)


state 130

    (41) funcargs -> ( space arglist . space )
    (39) arglist -> arglist . space , space VARNAME
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 148

state 131

    (38) arglist -> VARNAME .

    SPACES          reduce using rule 38 (arglist -> VARNAME .)
    )               reduce using rule 38 (arglist -> VARNAME .)
    ,               reduce using rule 38 (arglist -> VARNAME .)


state 132

    (30) stmt -> IF SPACES boolexp SPACES GOTO SPACES . NUMBER

    NUMBER          shift and go to state 149


state 133

    (3) boolop -> space LTE space .

    VARNAME         reduce using rule 3 (boolop -> space LTE space .)
    NUMBER          reduce using rule 3 (boolop -> space LTE space .)


state 134

    (4) boolop -> space GTE space .

    VARNAME         reduce using rule 4 (boolop -> space GTE space .)
    NUMBER          reduce using rule 4 (boolop -> space GTE space .)


state 135

    (5) boolop -> space < space .

    VARNAME         reduce using rule 5 (boolop -> space < space .)
    NUMBER          reduce using rule 5 (boolop -> space < space .)


state 136

    (6) boolop -> space > space .

    VARNAME         reduce using rule 6 (boolop -> space > space .)
    NUMBER          reduce using rule 6 (boolop -> space > space .)


state 137

    (7) boolop -> space = = . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 150

state 138

    (8) boolop -> space ! = . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 151

state 139

    (31) stmt -> IF SPACES VARNAME SPACES GOTO SPACES . NUMBER

    NUMBER          shift and go to state 152


state 140

    (47) func -> func nl VARNAME funcparams spnl { spnl funcbody spnl . }

    }               shift and go to state 153


state 141

    (37) funcbody -> funcbody stmtnl . stmt
    (23) stmt -> . vardec
    (24) stmt -> . lhs space = space rhs
    (25) stmt -> . VARNAME space = space rhs
    (26) stmt -> . VARNAME space = space MALLOC ( )
    (27) stmt -> . READ SPACES VARNAME
    (28) stmt -> . GOTO SPACES NUMBER
    (29) stmt -> . CALL SPACES VARNAME funcargs
    (30) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (31) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (21) vardec -> . VARNAME SPACES list
    (22) vardec -> . VARNAME STARS SPACES list
    (13) lhs -> . STARS VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    VARNAME         shift and go to state 26
    READ            shift and go to state 27
    GOTO            shift and go to state 28
    CALL            shift and go to state 29
    IF              shift and go to state 30
    STARS           shift and go to state 31

    stmt                           shift and go to state 154
    vardec                         shift and go to state 24
    lhs                            shift and go to state 25

state 142

    (35) stmtnl -> NEWLINE .
    (34) nl -> NEWLINE .

    VARNAME         reduce using rule 35 (stmtnl -> NEWLINE .)
    READ            reduce using rule 35 (stmtnl -> NEWLINE .)
    GOTO            reduce using rule 35 (stmtnl -> NEWLINE .)
    CALL            reduce using rule 35 (stmtnl -> NEWLINE .)
    IF              reduce using rule 35 (stmtnl -> NEWLINE .)
    STARS           reduce using rule 35 (stmtnl -> NEWLINE .)
    }               reduce using rule 34 (nl -> NEWLINE .)


state 143

    (43) paramlist -> paramlist space , space . VARNAME SPACES VARNAME

    VARNAME         shift and go to state 155


state 144

    (55) declist -> declist nl VARNAME SPACES list .
    (52) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 55 (declist -> declist nl VARNAME SPACES list .)
    SPACES          reduce using rule 55 (declist -> declist nl VARNAME SPACES list .)
    }               reduce using rule 55 (declist -> declist nl VARNAME SPACES list .)
    ,               shift and go to state 77


state 145

    (56) declist -> declist nl VARNAME STARS SPACES . list
    (51) list -> . VARNAME space
    (52) list -> . list , space VARNAME space

    VARNAME         shift and go to state 54

    list                           shift and go to state 156

state 146

    (26) stmt -> VARNAME space = space MALLOC ( ) .

    NEWLINE         reduce using rule 26 (stmt -> VARNAME space = space MALLOC ( ) .)
    $end            reduce using rule 26 (stmt -> VARNAME space = space MALLOC ( ) .)
    SPACES          reduce using rule 26 (stmt -> VARNAME space = space MALLOC ( ) .)
    }               reduce using rule 26 (stmt -> VARNAME space = space MALLOC ( ) .)


state 147

    (52) list -> list , space VARNAME space .

    ,               reduce using rule 52 (list -> list , space VARNAME space .)
    NEWLINE         reduce using rule 52 (list -> list , space VARNAME space .)
    $end            reduce using rule 52 (list -> list , space VARNAME space .)
    SPACES          reduce using rule 52 (list -> list , space VARNAME space .)
    }               reduce using rule 52 (list -> list , space VARNAME space .)


state 148

    (41) funcargs -> ( space arglist space . )
    (39) arglist -> arglist space . , space VARNAME

    )               shift and go to state 157
    ,               shift and go to state 158


state 149

    (30) stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 30 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    $end            reduce using rule 30 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    SPACES          reduce using rule 30 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    }               reduce using rule 30 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)


state 150

    (7) boolop -> space = = space .

    VARNAME         reduce using rule 7 (boolop -> space = = space .)
    NUMBER          reduce using rule 7 (boolop -> space = = space .)


state 151

    (8) boolop -> space ! = space .

    VARNAME         reduce using rule 8 (boolop -> space ! = space .)
    NUMBER          reduce using rule 8 (boolop -> space ! = space .)


state 152

    (31) stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 31 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    $end            reduce using rule 31 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    SPACES          reduce using rule 31 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    }               reduce using rule 31 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)


state 153

    (47) func -> func nl VARNAME funcparams spnl { spnl funcbody spnl } .

    NEWLINE         reduce using rule 47 (func -> func nl VARNAME funcparams spnl { spnl funcbody spnl } .)


state 154

    (37) funcbody -> funcbody stmtnl stmt .

    NEWLINE         reduce using rule 37 (funcbody -> funcbody stmtnl stmt .)
    SPACES          reduce using rule 37 (funcbody -> funcbody stmtnl stmt .)
    }               reduce using rule 37 (funcbody -> funcbody stmtnl stmt .)


state 155

    (43) paramlist -> paramlist space , space VARNAME . SPACES VARNAME

    SPACES          shift and go to state 159


state 156

    (56) declist -> declist nl VARNAME STARS SPACES list .
    (52) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 56 (declist -> declist nl VARNAME STARS SPACES list .)
    SPACES          reduce using rule 56 (declist -> declist nl VARNAME STARS SPACES list .)
    }               reduce using rule 56 (declist -> declist nl VARNAME STARS SPACES list .)
    ,               shift and go to state 77


state 157

    (41) funcargs -> ( space arglist space ) .

    NEWLINE         reduce using rule 41 (funcargs -> ( space arglist space ) .)
    $end            reduce using rule 41 (funcargs -> ( space arglist space ) .)
    SPACES          reduce using rule 41 (funcargs -> ( space arglist space ) .)
    }               reduce using rule 41 (funcargs -> ( space arglist space ) .)


state 158

    (39) arglist -> arglist space , . space VARNAME
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 160

state 159

    (43) paramlist -> paramlist space , space VARNAME SPACES . VARNAME

    VARNAME         shift and go to state 161


state 160

    (39) arglist -> arglist space , space . VARNAME

    VARNAME         shift and go to state 162


state 161

    (43) paramlist -> paramlist space , space VARNAME SPACES VARNAME .

    SPACES          reduce using rule 43 (paramlist -> paramlist space , space VARNAME SPACES VARNAME .)
    )               reduce using rule 43 (paramlist -> paramlist space , space VARNAME SPACES VARNAME .)
    ,               reduce using rule 43 (paramlist -> paramlist space , space VARNAME SPACES VARNAME .)


state 162

    (39) arglist -> arglist space , space VARNAME .

    SPACES          reduce using rule 39 (arglist -> arglist space , space VARNAME .)
    )               reduce using rule 39 (arglist -> arglist space , space VARNAME .)
    ,               reduce using rule 39 (arglist -> arglist space , space VARNAME .)

