Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     space -> <empty>
Rule 2     space -> SPACES
Rule 3     boolop -> space LTE space
Rule 4     boolop -> space GTE space
Rule 5     boolop -> space < space
Rule 6     boolop -> space > space
Rule 7     boolop -> space = = space
Rule 8     boolop -> space ! = space
Rule 9     boolexp -> VARNAME boolop VARNAME
Rule 10    boolexp -> VARNAME boolop NUMBER
Rule 11    boolexp -> NUMBER boolop VARNAME
Rule 12    boolexp -> NUMBER boolop NUMBER
Rule 13    lhs -> VARNAME
Rule 14    lhs -> * VARNAME
Rule 15    lhs -> VARNAME - > VARNAME
Rule 16    lhs -> VARNAME . VARNAME
Rule 17    rhs -> boolexp
Rule 18    rhs -> lhs
Rule 19    rhs -> & VARNAME
Rule 20    rhs -> NUMBER
Rule 21    stmt -> lhs space = space rhs
Rule 22    stmt -> READ SPACES VARNAME
Rule 23    stmt -> GOTO SPACES NUMBER
Rule 24    stmt -> CALL SPACES VARNAME
Rule 25    stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER
Rule 26    stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER
Rule 27    tac -> CODE :
Rule 28    tac -> tacnl stmt
Rule 29    tacnl -> tac NEWLINE
Rule 30    nl -> NEWLINE
Rule 31    funcbody -> stmt
Rule 32    funcbody -> funcbody nl stmt
Rule 33    func -> FUNCS : nl
Rule 34    func -> func VARNAME { spnl funcbody spnl } nl
Rule 35    func -> func VARNAME { spnl } nl
Rule 36    spnl -> space
Rule 37    spnl -> nl
Rule 38    list -> VARNAME
Rule 39    list -> list spnl , spnl VARNAME
Rule 40    blist -> [ spnl list spnl ]
Rule 41    blist -> [ spnl ]
Rule 42    declist -> VARNAME space : space blist
Rule 43    declist -> VARNAME * space : space blist
Rule 44    declist -> declist spnl , spnl VARNAME space : space blist
Rule 45    declist -> declist spnl , spnl VARNAME * space : space blist
Rule 46    structlist -> spnl STLT space = space blist
Rule 47    varlist -> nl VARLT space = space { spnl }
Rule 48    varlist -> nl VARLT space = space { spnl declist spnl }
Rule 49    funclist -> nl FNLT space = space blist
Rule 50    structs -> nl STRT : nl
Rule 51    structs -> structs VARNAME space { spnl declist spnl } nl
Rule 52    structs -> structs VARNAME space { spnl } nl
Rule 53    prog -> structlist varlist funclist structs func tac

Terminals, with rules where they appear

!                    : 8
&                    : 19
*                    : 14 43 45
,                    : 39 44 45
-                    : 15
.                    : 16
:                    : 27 33 42 43 44 45 50
<                    : 5
=                    : 7 7 8 21 46 47 48 49
>                    : 6 15
CALL                 : 24
CODE                 : 27
FNLT                 : 49
FUNCS                : 33
GOTO                 : 23 25 26
GTE                  : 4
IF                   : 25 26
LTE                  : 3
NEWLINE              : 29 30
NUMBER               : 10 11 12 12 20 23 25 26
READ                 : 22
SPACES               : 2 22 23 24 25 25 25 26 26 26
STLT                 : 46
STRT                 : 50
VARLT                : 47 48
VARNAME              : 9 9 10 11 13 14 15 15 16 16 19 22 24 26 34 35 38 39 42 43 44 45 51 52
[                    : 40 41
]                    : 40 41
error                : 
{                    : 34 35 47 48 51 52
}                    : 34 35 47 48 51 52

Nonterminals, with rules where they appear

blist                : 42 43 44 45 46 49
boolexp              : 17 25
boolop               : 9 10 11 12
declist              : 44 45 48 51
func                 : 34 35 53
funcbody             : 32 34
funclist             : 53
lhs                  : 18 21
list                 : 39 40
nl                   : 32 33 34 35 37 47 48 49 50 50 51 52
prog                 : 0
rhs                  : 21
space                : 3 3 4 4 5 5 6 6 7 7 8 8 21 21 36 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 51 52
spnl                 : 34 34 35 39 39 40 40 41 44 44 45 45 46 47 48 48 51 51 52
stmt                 : 28 31 32
structlist           : 53
structs              : 51 52 53
tac                  : 29 53
tacnl                : 28
varlist              : 53

Parsing method: LALR

state 0

    (0) S' -> . prog
    (53) prog -> . structlist varlist funclist structs func tac
    (46) structlist -> . spnl STLT space = space blist
    (36) spnl -> . space
    (37) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (30) nl -> . NEWLINE

    STLT            reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    prog                           shift and go to state 1
    structlist                     shift and go to state 2
    spnl                           shift and go to state 3
    space                          shift and go to state 4
    nl                             shift and go to state 5

state 1

    (0) S' -> prog .



state 2

    (53) prog -> structlist . varlist funclist structs func tac
    (47) varlist -> . nl VARLT space = space { spnl }
    (48) varlist -> . nl VARLT space = space { spnl declist spnl }
    (30) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    varlist                        shift and go to state 8
    nl                             shift and go to state 9

state 3

    (46) structlist -> spnl . STLT space = space blist

    STLT            shift and go to state 10


state 4

    (36) spnl -> space .

    STLT            reduce using rule 36 (spnl -> space .)
    ]               reduce using rule 36 (spnl -> space .)
    VARNAME         reduce using rule 36 (spnl -> space .)
    }               reduce using rule 36 (spnl -> space .)
    READ            reduce using rule 36 (spnl -> space .)
    GOTO            reduce using rule 36 (spnl -> space .)
    CALL            reduce using rule 36 (spnl -> space .)
    IF              reduce using rule 36 (spnl -> space .)
    *               reduce using rule 36 (spnl -> space .)
    ,               reduce using rule 36 (spnl -> space .)


state 5

    (37) spnl -> nl .

    STLT            reduce using rule 37 (spnl -> nl .)
    ]               reduce using rule 37 (spnl -> nl .)
    VARNAME         reduce using rule 37 (spnl -> nl .)
    }               reduce using rule 37 (spnl -> nl .)
    READ            reduce using rule 37 (spnl -> nl .)
    GOTO            reduce using rule 37 (spnl -> nl .)
    CALL            reduce using rule 37 (spnl -> nl .)
    IF              reduce using rule 37 (spnl -> nl .)
    *               reduce using rule 37 (spnl -> nl .)
    ,               reduce using rule 37 (spnl -> nl .)


state 6

    (2) space -> SPACES .

    STLT            reduce using rule 2 (space -> SPACES .)
    =               reduce using rule 2 (space -> SPACES .)
    [               reduce using rule 2 (space -> SPACES .)
    {               reduce using rule 2 (space -> SPACES .)
    ]               reduce using rule 2 (space -> SPACES .)
    VARNAME         reduce using rule 2 (space -> SPACES .)
    }               reduce using rule 2 (space -> SPACES .)
    READ            reduce using rule 2 (space -> SPACES .)
    GOTO            reduce using rule 2 (space -> SPACES .)
    CALL            reduce using rule 2 (space -> SPACES .)
    IF              reduce using rule 2 (space -> SPACES .)
    *               reduce using rule 2 (space -> SPACES .)
    ,               reduce using rule 2 (space -> SPACES .)
    &               reduce using rule 2 (space -> SPACES .)
    NUMBER          reduce using rule 2 (space -> SPACES .)
    LTE             reduce using rule 2 (space -> SPACES .)
    GTE             reduce using rule 2 (space -> SPACES .)
    <               reduce using rule 2 (space -> SPACES .)
    >               reduce using rule 2 (space -> SPACES .)
    !               reduce using rule 2 (space -> SPACES .)
    :               reduce using rule 2 (space -> SPACES .)


state 7

    (30) nl -> NEWLINE .

    STLT            reduce using rule 30 (nl -> NEWLINE .)
    VARLT           reduce using rule 30 (nl -> NEWLINE .)
    FNLT            reduce using rule 30 (nl -> NEWLINE .)
    STRT            reduce using rule 30 (nl -> NEWLINE .)
    VARNAME         reduce using rule 30 (nl -> NEWLINE .)
    CODE            reduce using rule 30 (nl -> NEWLINE .)
    FUNCS           reduce using rule 30 (nl -> NEWLINE .)
    ]               reduce using rule 30 (nl -> NEWLINE .)
    }               reduce using rule 30 (nl -> NEWLINE .)
    READ            reduce using rule 30 (nl -> NEWLINE .)
    GOTO            reduce using rule 30 (nl -> NEWLINE .)
    CALL            reduce using rule 30 (nl -> NEWLINE .)
    IF              reduce using rule 30 (nl -> NEWLINE .)
    *               reduce using rule 30 (nl -> NEWLINE .)
    ,               reduce using rule 30 (nl -> NEWLINE .)


state 8

    (53) prog -> structlist varlist . funclist structs func tac
    (49) funclist -> . nl FNLT space = space blist
    (30) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    funclist                       shift and go to state 11
    nl                             shift and go to state 12

state 9

    (47) varlist -> nl . VARLT space = space { spnl }
    (48) varlist -> nl . VARLT space = space { spnl declist spnl }

    VARLT           shift and go to state 13


state 10

    (46) structlist -> spnl STLT . space = space blist
    (1) space -> .
    (2) space -> . SPACES

    =               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 14

state 11

    (53) prog -> structlist varlist funclist . structs func tac
    (50) structs -> . nl STRT : nl
    (51) structs -> . structs VARNAME space { spnl declist spnl } nl
    (52) structs -> . structs VARNAME space { spnl } nl
    (30) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    structs                        shift and go to state 15
    nl                             shift and go to state 16

state 12

    (49) funclist -> nl . FNLT space = space blist

    FNLT            shift and go to state 17


state 13

    (47) varlist -> nl VARLT . space = space { spnl }
    (48) varlist -> nl VARLT . space = space { spnl declist spnl }
    (1) space -> .
    (2) space -> . SPACES

    =               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 18

state 14

    (46) structlist -> spnl STLT space . = space blist

    =               shift and go to state 19


state 15

    (53) prog -> structlist varlist funclist structs . func tac
    (51) structs -> structs . VARNAME space { spnl declist spnl } nl
    (52) structs -> structs . VARNAME space { spnl } nl
    (33) func -> . FUNCS : nl
    (34) func -> . func VARNAME { spnl funcbody spnl } nl
    (35) func -> . func VARNAME { spnl } nl

    VARNAME         shift and go to state 21
    FUNCS           shift and go to state 22

    func                           shift and go to state 20

state 16

    (50) structs -> nl . STRT : nl

    STRT            shift and go to state 23


state 17

    (49) funclist -> nl FNLT . space = space blist
    (1) space -> .
    (2) space -> . SPACES

    =               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 24

state 18

    (47) varlist -> nl VARLT space . = space { spnl }
    (48) varlist -> nl VARLT space . = space { spnl declist spnl }

    =               shift and go to state 25


state 19

    (46) structlist -> spnl STLT space = . space blist
    (1) space -> .
    (2) space -> . SPACES

    [               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 26

state 20

    (53) prog -> structlist varlist funclist structs func . tac
    (34) func -> func . VARNAME { spnl funcbody spnl } nl
    (35) func -> func . VARNAME { spnl } nl
    (27) tac -> . CODE :
    (28) tac -> . tacnl stmt
    (29) tacnl -> . tac NEWLINE

    VARNAME         shift and go to state 28
    CODE            shift and go to state 29

    tac                            shift and go to state 27
    tacnl                          shift and go to state 30

state 21

    (51) structs -> structs VARNAME . space { spnl declist spnl } nl
    (52) structs -> structs VARNAME . space { spnl } nl
    (1) space -> .
    (2) space -> . SPACES

    {               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 31

state 22

    (33) func -> FUNCS . : nl

    :               shift and go to state 32


state 23

    (50) structs -> nl STRT . : nl

    :               shift and go to state 33


state 24

    (49) funclist -> nl FNLT space . = space blist

    =               shift and go to state 34


state 25

    (47) varlist -> nl VARLT space = . space { spnl }
    (48) varlist -> nl VARLT space = . space { spnl declist spnl }
    (1) space -> .
    (2) space -> . SPACES

    {               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 35

state 26

    (46) structlist -> spnl STLT space = space . blist
    (40) blist -> . [ spnl list spnl ]
    (41) blist -> . [ spnl ]

    [               shift and go to state 37

    blist                          shift and go to state 36

state 27

    (53) prog -> structlist varlist funclist structs func tac .
    (29) tacnl -> tac . NEWLINE

    $end            reduce using rule 53 (prog -> structlist varlist funclist structs func tac .)
    NEWLINE         shift and go to state 38


state 28

    (34) func -> func VARNAME . { spnl funcbody spnl } nl
    (35) func -> func VARNAME . { spnl } nl

    {               shift and go to state 39


state 29

    (27) tac -> CODE . :

    :               shift and go to state 40


state 30

    (28) tac -> tacnl . stmt
    (21) stmt -> . lhs space = space rhs
    (22) stmt -> . READ SPACES VARNAME
    (23) stmt -> . GOTO SPACES NUMBER
    (24) stmt -> . CALL SPACES VARNAME
    (25) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (26) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (13) lhs -> . VARNAME
    (14) lhs -> . * VARNAME
    (15) lhs -> . VARNAME - > VARNAME
    (16) lhs -> . VARNAME . VARNAME

    READ            shift and go to state 43
    GOTO            shift and go to state 45
    CALL            shift and go to state 46
    IF              shift and go to state 47
    VARNAME         shift and go to state 44
    *               shift and go to state 48

    stmt                           shift and go to state 41
    lhs                            shift and go to state 42

state 31

    (51) structs -> structs VARNAME space . { spnl declist spnl } nl
    (52) structs -> structs VARNAME space . { spnl } nl

    {               shift and go to state 49


state 32

    (33) func -> FUNCS : . nl
    (30) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 50

state 33

    (50) structs -> nl STRT : . nl
    (30) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 51

state 34

    (49) funclist -> nl FNLT space = . space blist
    (1) space -> .
    (2) space -> . SPACES

    [               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 52

state 35

    (47) varlist -> nl VARLT space = space . { spnl }
    (48) varlist -> nl VARLT space = space . { spnl declist spnl }

    {               shift and go to state 53


state 36

    (46) structlist -> spnl STLT space = space blist .

    NEWLINE         reduce using rule 46 (structlist -> spnl STLT space = space blist .)


state 37

    (40) blist -> [ . spnl list spnl ]
    (41) blist -> [ . spnl ]
    (36) spnl -> . space
    (37) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (30) nl -> . NEWLINE

    ]               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    spnl                           shift and go to state 54
    space                          shift and go to state 4
    nl                             shift and go to state 5

state 38

    (29) tacnl -> tac NEWLINE .

    READ            reduce using rule 29 (tacnl -> tac NEWLINE .)
    GOTO            reduce using rule 29 (tacnl -> tac NEWLINE .)
    CALL            reduce using rule 29 (tacnl -> tac NEWLINE .)
    IF              reduce using rule 29 (tacnl -> tac NEWLINE .)
    VARNAME         reduce using rule 29 (tacnl -> tac NEWLINE .)
    *               reduce using rule 29 (tacnl -> tac NEWLINE .)


state 39

    (34) func -> func VARNAME { . spnl funcbody spnl } nl
    (35) func -> func VARNAME { . spnl } nl
    (36) spnl -> . space
    (37) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (30) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    READ            reduce using rule 1 (space -> .)
    GOTO            reduce using rule 1 (space -> .)
    CALL            reduce using rule 1 (space -> .)
    IF              reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    *               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    spnl                           shift and go to state 55
    nl                             shift and go to state 5
    space                          shift and go to state 4

state 40

    (27) tac -> CODE : .

    NEWLINE         reduce using rule 27 (tac -> CODE : .)
    $end            reduce using rule 27 (tac -> CODE : .)


state 41

    (28) tac -> tacnl stmt .

    NEWLINE         reduce using rule 28 (tac -> tacnl stmt .)
    $end            reduce using rule 28 (tac -> tacnl stmt .)


state 42

    (21) stmt -> lhs . space = space rhs
    (1) space -> .
    (2) space -> . SPACES

    =               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 56

state 43

    (22) stmt -> READ . SPACES VARNAME

    SPACES          shift and go to state 57


state 44

    (13) lhs -> VARNAME .
    (15) lhs -> VARNAME . - > VARNAME
    (16) lhs -> VARNAME . . VARNAME

    SPACES          reduce using rule 13 (lhs -> VARNAME .)
    =               reduce using rule 13 (lhs -> VARNAME .)
    -               shift and go to state 58
    .               shift and go to state 59


state 45

    (23) stmt -> GOTO . SPACES NUMBER

    SPACES          shift and go to state 60


state 46

    (24) stmt -> CALL . SPACES VARNAME

    SPACES          shift and go to state 61


state 47

    (25) stmt -> IF . SPACES boolexp SPACES GOTO SPACES NUMBER
    (26) stmt -> IF . SPACES VARNAME SPACES GOTO SPACES NUMBER

    SPACES          shift and go to state 62


state 48

    (14) lhs -> * . VARNAME

    VARNAME         shift and go to state 63


state 49

    (51) structs -> structs VARNAME space { . spnl declist spnl } nl
    (52) structs -> structs VARNAME space { . spnl } nl
    (36) spnl -> . space
    (37) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (30) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    space                          shift and go to state 4
    spnl                           shift and go to state 64
    nl                             shift and go to state 5

state 50

    (33) func -> FUNCS : nl .

    VARNAME         reduce using rule 33 (func -> FUNCS : nl .)
    CODE            reduce using rule 33 (func -> FUNCS : nl .)


state 51

    (50) structs -> nl STRT : nl .

    VARNAME         reduce using rule 50 (structs -> nl STRT : nl .)
    FUNCS           reduce using rule 50 (structs -> nl STRT : nl .)


state 52

    (49) funclist -> nl FNLT space = space . blist
    (40) blist -> . [ spnl list spnl ]
    (41) blist -> . [ spnl ]

    [               shift and go to state 37

    blist                          shift and go to state 65

state 53

    (47) varlist -> nl VARLT space = space { . spnl }
    (48) varlist -> nl VARLT space = space { . spnl declist spnl }
    (36) spnl -> . space
    (37) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (30) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    nl                             shift and go to state 5
    space                          shift and go to state 4
    spnl                           shift and go to state 66

state 54

    (40) blist -> [ spnl . list spnl ]
    (41) blist -> [ spnl . ]
    (38) list -> . VARNAME
    (39) list -> . list spnl , spnl VARNAME

    ]               shift and go to state 68
    VARNAME         shift and go to state 69

    list                           shift and go to state 67

state 55

    (34) func -> func VARNAME { spnl . funcbody spnl } nl
    (35) func -> func VARNAME { spnl . } nl
    (31) funcbody -> . stmt
    (32) funcbody -> . funcbody nl stmt
    (21) stmt -> . lhs space = space rhs
    (22) stmt -> . READ SPACES VARNAME
    (23) stmt -> . GOTO SPACES NUMBER
    (24) stmt -> . CALL SPACES VARNAME
    (25) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (26) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (13) lhs -> . VARNAME
    (14) lhs -> . * VARNAME
    (15) lhs -> . VARNAME - > VARNAME
    (16) lhs -> . VARNAME . VARNAME

    }               shift and go to state 71
    READ            shift and go to state 43
    GOTO            shift and go to state 45
    CALL            shift and go to state 46
    IF              shift and go to state 47
    VARNAME         shift and go to state 44
    *               shift and go to state 48

    funcbody                       shift and go to state 70
    stmt                           shift and go to state 72
    lhs                            shift and go to state 42

state 56

    (21) stmt -> lhs space . = space rhs

    =               shift and go to state 73


state 57

    (22) stmt -> READ SPACES . VARNAME

    VARNAME         shift and go to state 74


state 58

    (15) lhs -> VARNAME - . > VARNAME

    >               shift and go to state 75


state 59

    (16) lhs -> VARNAME . . VARNAME

    VARNAME         shift and go to state 76


state 60

    (23) stmt -> GOTO SPACES . NUMBER

    NUMBER          shift and go to state 77


state 61

    (24) stmt -> CALL SPACES . VARNAME

    VARNAME         shift and go to state 78


state 62

    (25) stmt -> IF SPACES . boolexp SPACES GOTO SPACES NUMBER
    (26) stmt -> IF SPACES . VARNAME SPACES GOTO SPACES NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER

    VARNAME         shift and go to state 81
    NUMBER          shift and go to state 80

    boolexp                        shift and go to state 79

state 63

    (14) lhs -> * VARNAME .

    SPACES          reduce using rule 14 (lhs -> * VARNAME .)
    =               reduce using rule 14 (lhs -> * VARNAME .)
    NEWLINE         reduce using rule 14 (lhs -> * VARNAME .)
    $end            reduce using rule 14 (lhs -> * VARNAME .)
    }               reduce using rule 14 (lhs -> * VARNAME .)


state 64

    (51) structs -> structs VARNAME space { spnl . declist spnl } nl
    (52) structs -> structs VARNAME space { spnl . } nl
    (42) declist -> . VARNAME space : space blist
    (43) declist -> . VARNAME * space : space blist
    (44) declist -> . declist spnl , spnl VARNAME space : space blist
    (45) declist -> . declist spnl , spnl VARNAME * space : space blist

    }               shift and go to state 84
    VARNAME         shift and go to state 82

    declist                        shift and go to state 83

state 65

    (49) funclist -> nl FNLT space = space blist .

    NEWLINE         reduce using rule 49 (funclist -> nl FNLT space = space blist .)


state 66

    (47) varlist -> nl VARLT space = space { spnl . }
    (48) varlist -> nl VARLT space = space { spnl . declist spnl }
    (42) declist -> . VARNAME space : space blist
    (43) declist -> . VARNAME * space : space blist
    (44) declist -> . declist spnl , spnl VARNAME space : space blist
    (45) declist -> . declist spnl , spnl VARNAME * space : space blist

    }               shift and go to state 85
    VARNAME         shift and go to state 82

    declist                        shift and go to state 86

state 67

    (40) blist -> [ spnl list . spnl ]
    (39) list -> list . spnl , spnl VARNAME
    (36) spnl -> . space
    (37) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (30) nl -> . NEWLINE

    ]               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    spnl                           shift and go to state 87
    space                          shift and go to state 4
    nl                             shift and go to state 5

state 68

    (41) blist -> [ spnl ] .

    NEWLINE         reduce using rule 41 (blist -> [ spnl ] .)
    SPACES          reduce using rule 41 (blist -> [ spnl ] .)
    }               reduce using rule 41 (blist -> [ spnl ] .)
    ,               reduce using rule 41 (blist -> [ spnl ] .)


state 69

    (38) list -> VARNAME .

    SPACES          reduce using rule 38 (list -> VARNAME .)
    NEWLINE         reduce using rule 38 (list -> VARNAME .)
    ]               reduce using rule 38 (list -> VARNAME .)
    ,               reduce using rule 38 (list -> VARNAME .)


state 70

    (34) func -> func VARNAME { spnl funcbody . spnl } nl
    (32) funcbody -> funcbody . nl stmt
    (36) spnl -> . space
    (37) spnl -> . nl
    (30) nl -> . NEWLINE
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         shift and go to state 7
    }               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    spnl                           shift and go to state 88
    nl                             shift and go to state 89
    space                          shift and go to state 4

state 71

    (35) func -> func VARNAME { spnl } . nl
    (30) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 90

state 72

    (31) funcbody -> stmt .

    NEWLINE         reduce using rule 31 (funcbody -> stmt .)
    SPACES          reduce using rule 31 (funcbody -> stmt .)
    }               reduce using rule 31 (funcbody -> stmt .)


state 73

    (21) stmt -> lhs space = . space rhs
    (1) space -> .
    (2) space -> . SPACES

    &               reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    *               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 91

state 74

    (22) stmt -> READ SPACES VARNAME .

    NEWLINE         reduce using rule 22 (stmt -> READ SPACES VARNAME .)
    $end            reduce using rule 22 (stmt -> READ SPACES VARNAME .)
    SPACES          reduce using rule 22 (stmt -> READ SPACES VARNAME .)
    }               reduce using rule 22 (stmt -> READ SPACES VARNAME .)


state 75

    (15) lhs -> VARNAME - > . VARNAME

    VARNAME         shift and go to state 92


state 76

    (16) lhs -> VARNAME . VARNAME .

    SPACES          reduce using rule 16 (lhs -> VARNAME . VARNAME .)
    =               reduce using rule 16 (lhs -> VARNAME . VARNAME .)
    NEWLINE         reduce using rule 16 (lhs -> VARNAME . VARNAME .)
    $end            reduce using rule 16 (lhs -> VARNAME . VARNAME .)
    }               reduce using rule 16 (lhs -> VARNAME . VARNAME .)


state 77

    (23) stmt -> GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 23 (stmt -> GOTO SPACES NUMBER .)
    $end            reduce using rule 23 (stmt -> GOTO SPACES NUMBER .)
    SPACES          reduce using rule 23 (stmt -> GOTO SPACES NUMBER .)
    }               reduce using rule 23 (stmt -> GOTO SPACES NUMBER .)


state 78

    (24) stmt -> CALL SPACES VARNAME .

    NEWLINE         reduce using rule 24 (stmt -> CALL SPACES VARNAME .)
    $end            reduce using rule 24 (stmt -> CALL SPACES VARNAME .)
    SPACES          reduce using rule 24 (stmt -> CALL SPACES VARNAME .)
    }               reduce using rule 24 (stmt -> CALL SPACES VARNAME .)


state 79

    (25) stmt -> IF SPACES boolexp . SPACES GOTO SPACES NUMBER

    SPACES          shift and go to state 93


state 80

    (11) boolexp -> NUMBER . boolop VARNAME
    (12) boolexp -> NUMBER . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    boolop                         shift and go to state 94
    space                          shift and go to state 95

state 81

    (26) stmt -> IF SPACES VARNAME . SPACES GOTO SPACES NUMBER
    (9) boolexp -> VARNAME . boolop VARNAME
    (10) boolexp -> VARNAME . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    SPACES          shift and go to state 96
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

    boolop                         shift and go to state 97
    space                          shift and go to state 95

state 82

    (42) declist -> VARNAME . space : space blist
    (43) declist -> VARNAME . * space : space blist
    (1) space -> .
    (2) space -> . SPACES

    *               shift and go to state 99
    :               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 98

state 83

    (51) structs -> structs VARNAME space { spnl declist . spnl } nl
    (44) declist -> declist . spnl , spnl VARNAME space : space blist
    (45) declist -> declist . spnl , spnl VARNAME * space : space blist
    (36) spnl -> . space
    (37) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (30) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    space                          shift and go to state 4
    spnl                           shift and go to state 100
    nl                             shift and go to state 5

state 84

    (52) structs -> structs VARNAME space { spnl } . nl
    (30) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 101

state 85

    (47) varlist -> nl VARLT space = space { spnl } .

    NEWLINE         reduce using rule 47 (varlist -> nl VARLT space = space { spnl } .)


state 86

    (48) varlist -> nl VARLT space = space { spnl declist . spnl }
    (44) declist -> declist . spnl , spnl VARNAME space : space blist
    (45) declist -> declist . spnl , spnl VARNAME * space : space blist
    (36) spnl -> . space
    (37) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (30) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    nl                             shift and go to state 5
    space                          shift and go to state 4
    spnl                           shift and go to state 102

state 87

    (40) blist -> [ spnl list spnl . ]
    (39) list -> list spnl . , spnl VARNAME

    ]               shift and go to state 103
    ,               shift and go to state 104


state 88

    (34) func -> func VARNAME { spnl funcbody spnl . } nl

    }               shift and go to state 105


state 89

    (32) funcbody -> funcbody nl . stmt
    (37) spnl -> nl .
    (21) stmt -> . lhs space = space rhs
    (22) stmt -> . READ SPACES VARNAME
    (23) stmt -> . GOTO SPACES NUMBER
    (24) stmt -> . CALL SPACES VARNAME
    (25) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (26) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (13) lhs -> . VARNAME
    (14) lhs -> . * VARNAME
    (15) lhs -> . VARNAME - > VARNAME
    (16) lhs -> . VARNAME . VARNAME

    }               reduce using rule 37 (spnl -> nl .)
    READ            shift and go to state 43
    GOTO            shift and go to state 45
    CALL            shift and go to state 46
    IF              shift and go to state 47
    VARNAME         shift and go to state 44
    *               shift and go to state 48

    stmt                           shift and go to state 106
    lhs                            shift and go to state 42

state 90

    (35) func -> func VARNAME { spnl } nl .

    VARNAME         reduce using rule 35 (func -> func VARNAME { spnl } nl .)
    CODE            reduce using rule 35 (func -> func VARNAME { spnl } nl .)


state 91

    (21) stmt -> lhs space = space . rhs
    (17) rhs -> . boolexp
    (18) rhs -> . lhs
    (19) rhs -> . & VARNAME
    (20) rhs -> . NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER
    (13) lhs -> . VARNAME
    (14) lhs -> . * VARNAME
    (15) lhs -> . VARNAME - > VARNAME
    (16) lhs -> . VARNAME . VARNAME

    &               shift and go to state 110
    NUMBER          shift and go to state 112
    VARNAME         shift and go to state 111
    *               shift and go to state 48

    lhs                            shift and go to state 107
    rhs                            shift and go to state 108
    boolexp                        shift and go to state 109

state 92

    (15) lhs -> VARNAME - > VARNAME .

    SPACES          reduce using rule 15 (lhs -> VARNAME - > VARNAME .)
    =               reduce using rule 15 (lhs -> VARNAME - > VARNAME .)
    NEWLINE         reduce using rule 15 (lhs -> VARNAME - > VARNAME .)
    $end            reduce using rule 15 (lhs -> VARNAME - > VARNAME .)
    }               reduce using rule 15 (lhs -> VARNAME - > VARNAME .)


state 93

    (25) stmt -> IF SPACES boolexp SPACES . GOTO SPACES NUMBER

    GOTO            shift and go to state 113


state 94

    (11) boolexp -> NUMBER boolop . VARNAME
    (12) boolexp -> NUMBER boolop . NUMBER

    VARNAME         shift and go to state 115
    NUMBER          shift and go to state 114


state 95

    (3) boolop -> space . LTE space
    (4) boolop -> space . GTE space
    (5) boolop -> space . < space
    (6) boolop -> space . > space
    (7) boolop -> space . = = space
    (8) boolop -> space . ! = space

    LTE             shift and go to state 116
    GTE             shift and go to state 117
    <               shift and go to state 118
    >               shift and go to state 119
    =               shift and go to state 120
    !               shift and go to state 121


state 96

    (26) stmt -> IF SPACES VARNAME SPACES . GOTO SPACES NUMBER
    (2) space -> SPACES .

    GOTO            shift and go to state 122
    LTE             reduce using rule 2 (space -> SPACES .)
    GTE             reduce using rule 2 (space -> SPACES .)
    <               reduce using rule 2 (space -> SPACES .)
    >               reduce using rule 2 (space -> SPACES .)
    =               reduce using rule 2 (space -> SPACES .)
    !               reduce using rule 2 (space -> SPACES .)


state 97

    (9) boolexp -> VARNAME boolop . VARNAME
    (10) boolexp -> VARNAME boolop . NUMBER

    VARNAME         shift and go to state 123
    NUMBER          shift and go to state 124


state 98

    (42) declist -> VARNAME space . : space blist

    :               shift and go to state 125


state 99

    (43) declist -> VARNAME * . space : space blist
    (1) space -> .
    (2) space -> . SPACES

    :               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 126

state 100

    (51) structs -> structs VARNAME space { spnl declist spnl . } nl
    (44) declist -> declist spnl . , spnl VARNAME space : space blist
    (45) declist -> declist spnl . , spnl VARNAME * space : space blist

    }               shift and go to state 127
    ,               shift and go to state 128


state 101

    (52) structs -> structs VARNAME space { spnl } nl .

    VARNAME         reduce using rule 52 (structs -> structs VARNAME space { spnl } nl .)
    FUNCS           reduce using rule 52 (structs -> structs VARNAME space { spnl } nl .)


state 102

    (48) varlist -> nl VARLT space = space { spnl declist spnl . }
    (44) declist -> declist spnl . , spnl VARNAME space : space blist
    (45) declist -> declist spnl . , spnl VARNAME * space : space blist

    }               shift and go to state 129
    ,               shift and go to state 128


state 103

    (40) blist -> [ spnl list spnl ] .

    NEWLINE         reduce using rule 40 (blist -> [ spnl list spnl ] .)
    SPACES          reduce using rule 40 (blist -> [ spnl list spnl ] .)
    }               reduce using rule 40 (blist -> [ spnl list spnl ] .)
    ,               reduce using rule 40 (blist -> [ spnl list spnl ] .)


state 104

    (39) list -> list spnl , . spnl VARNAME
    (36) spnl -> . space
    (37) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (30) nl -> . NEWLINE

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    spnl                           shift and go to state 130
    space                          shift and go to state 4
    nl                             shift and go to state 5

state 105

    (34) func -> func VARNAME { spnl funcbody spnl } . nl
    (30) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 131

state 106

    (32) funcbody -> funcbody nl stmt .

    NEWLINE         reduce using rule 32 (funcbody -> funcbody nl stmt .)
    SPACES          reduce using rule 32 (funcbody -> funcbody nl stmt .)
    }               reduce using rule 32 (funcbody -> funcbody nl stmt .)


state 107

    (18) rhs -> lhs .

    NEWLINE         reduce using rule 18 (rhs -> lhs .)
    $end            reduce using rule 18 (rhs -> lhs .)
    SPACES          reduce using rule 18 (rhs -> lhs .)
    }               reduce using rule 18 (rhs -> lhs .)


state 108

    (21) stmt -> lhs space = space rhs .

    NEWLINE         reduce using rule 21 (stmt -> lhs space = space rhs .)
    $end            reduce using rule 21 (stmt -> lhs space = space rhs .)
    SPACES          reduce using rule 21 (stmt -> lhs space = space rhs .)
    }               reduce using rule 21 (stmt -> lhs space = space rhs .)


state 109

    (17) rhs -> boolexp .

    NEWLINE         reduce using rule 17 (rhs -> boolexp .)
    $end            reduce using rule 17 (rhs -> boolexp .)
    SPACES          reduce using rule 17 (rhs -> boolexp .)
    }               reduce using rule 17 (rhs -> boolexp .)


state 110

    (19) rhs -> & . VARNAME

    VARNAME         shift and go to state 132


state 111

    (9) boolexp -> VARNAME . boolop VARNAME
    (10) boolexp -> VARNAME . boolop NUMBER
    (13) lhs -> VARNAME .
    (15) lhs -> VARNAME . - > VARNAME
    (16) lhs -> VARNAME . . VARNAME
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         reduce using rule 13 (lhs -> VARNAME .)
    $end            reduce using rule 13 (lhs -> VARNAME .)
    SPACES          reduce using rule 13 (lhs -> VARNAME .)
    }               reduce using rule 13 (lhs -> VARNAME .)
    -               shift and go to state 58
    .               shift and go to state 59
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    boolop                         shift and go to state 97
    space                          shift and go to state 95

state 112

    (20) rhs -> NUMBER .
    (11) boolexp -> NUMBER . boolop VARNAME
    (12) boolexp -> NUMBER . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         reduce using rule 20 (rhs -> NUMBER .)
    $end            reduce using rule 20 (rhs -> NUMBER .)
    SPACES          reduce using rule 20 (rhs -> NUMBER .)
    }               reduce using rule 20 (rhs -> NUMBER .)
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    boolop                         shift and go to state 94
    space                          shift and go to state 95

state 113

    (25) stmt -> IF SPACES boolexp SPACES GOTO . SPACES NUMBER

    SPACES          shift and go to state 133


state 114

    (12) boolexp -> NUMBER boolop NUMBER .

    SPACES          reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    NEWLINE         reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    $end            reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    }               reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)


state 115

    (11) boolexp -> NUMBER boolop VARNAME .

    SPACES          reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    NEWLINE         reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    $end            reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    }               reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)


state 116

    (3) boolop -> space LTE . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 134

state 117

    (4) boolop -> space GTE . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 135

state 118

    (5) boolop -> space < . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 136

state 119

    (6) boolop -> space > . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 137

state 120

    (7) boolop -> space = . = space

    =               shift and go to state 138


state 121

    (8) boolop -> space ! . = space

    =               shift and go to state 139


state 122

    (26) stmt -> IF SPACES VARNAME SPACES GOTO . SPACES NUMBER

    SPACES          shift and go to state 140


state 123

    (9) boolexp -> VARNAME boolop VARNAME .

    SPACES          reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    NEWLINE         reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    $end            reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    }               reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)


state 124

    (10) boolexp -> VARNAME boolop NUMBER .

    SPACES          reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    NEWLINE         reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    $end            reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    }               reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)


state 125

    (42) declist -> VARNAME space : . space blist
    (1) space -> .
    (2) space -> . SPACES

    [               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 141

state 126

    (43) declist -> VARNAME * space . : space blist

    :               shift and go to state 142


state 127

    (51) structs -> structs VARNAME space { spnl declist spnl } . nl
    (30) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 143

state 128

    (44) declist -> declist spnl , . spnl VARNAME space : space blist
    (45) declist -> declist spnl , . spnl VARNAME * space : space blist
    (36) spnl -> . space
    (37) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (30) nl -> . NEWLINE

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    spnl                           shift and go to state 144
    space                          shift and go to state 4
    nl                             shift and go to state 5

state 129

    (48) varlist -> nl VARLT space = space { spnl declist spnl } .

    NEWLINE         reduce using rule 48 (varlist -> nl VARLT space = space { spnl declist spnl } .)


state 130

    (39) list -> list spnl , spnl . VARNAME

    VARNAME         shift and go to state 145


state 131

    (34) func -> func VARNAME { spnl funcbody spnl } nl .

    VARNAME         reduce using rule 34 (func -> func VARNAME { spnl funcbody spnl } nl .)
    CODE            reduce using rule 34 (func -> func VARNAME { spnl funcbody spnl } nl .)


state 132

    (19) rhs -> & VARNAME .

    NEWLINE         reduce using rule 19 (rhs -> & VARNAME .)
    $end            reduce using rule 19 (rhs -> & VARNAME .)
    SPACES          reduce using rule 19 (rhs -> & VARNAME .)
    }               reduce using rule 19 (rhs -> & VARNAME .)


state 133

    (25) stmt -> IF SPACES boolexp SPACES GOTO SPACES . NUMBER

    NUMBER          shift and go to state 146


state 134

    (3) boolop -> space LTE space .

    VARNAME         reduce using rule 3 (boolop -> space LTE space .)
    NUMBER          reduce using rule 3 (boolop -> space LTE space .)


state 135

    (4) boolop -> space GTE space .

    VARNAME         reduce using rule 4 (boolop -> space GTE space .)
    NUMBER          reduce using rule 4 (boolop -> space GTE space .)


state 136

    (5) boolop -> space < space .

    VARNAME         reduce using rule 5 (boolop -> space < space .)
    NUMBER          reduce using rule 5 (boolop -> space < space .)


state 137

    (6) boolop -> space > space .

    VARNAME         reduce using rule 6 (boolop -> space > space .)
    NUMBER          reduce using rule 6 (boolop -> space > space .)


state 138

    (7) boolop -> space = = . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 147

state 139

    (8) boolop -> space ! = . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 148

state 140

    (26) stmt -> IF SPACES VARNAME SPACES GOTO SPACES . NUMBER

    NUMBER          shift and go to state 149


state 141

    (42) declist -> VARNAME space : space . blist
    (40) blist -> . [ spnl list spnl ]
    (41) blist -> . [ spnl ]

    [               shift and go to state 37

    blist                          shift and go to state 150

state 142

    (43) declist -> VARNAME * space : . space blist
    (1) space -> .
    (2) space -> . SPACES

    [               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 151

state 143

    (51) structs -> structs VARNAME space { spnl declist spnl } nl .

    VARNAME         reduce using rule 51 (structs -> structs VARNAME space { spnl declist spnl } nl .)
    FUNCS           reduce using rule 51 (structs -> structs VARNAME space { spnl declist spnl } nl .)


state 144

    (44) declist -> declist spnl , spnl . VARNAME space : space blist
    (45) declist -> declist spnl , spnl . VARNAME * space : space blist

    VARNAME         shift and go to state 152


state 145

    (39) list -> list spnl , spnl VARNAME .

    SPACES          reduce using rule 39 (list -> list spnl , spnl VARNAME .)
    NEWLINE         reduce using rule 39 (list -> list spnl , spnl VARNAME .)
    ]               reduce using rule 39 (list -> list spnl , spnl VARNAME .)
    ,               reduce using rule 39 (list -> list spnl , spnl VARNAME .)


state 146

    (25) stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 25 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    $end            reduce using rule 25 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    SPACES          reduce using rule 25 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    }               reduce using rule 25 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)


state 147

    (7) boolop -> space = = space .

    VARNAME         reduce using rule 7 (boolop -> space = = space .)
    NUMBER          reduce using rule 7 (boolop -> space = = space .)


state 148

    (8) boolop -> space ! = space .

    VARNAME         reduce using rule 8 (boolop -> space ! = space .)
    NUMBER          reduce using rule 8 (boolop -> space ! = space .)


state 149

    (26) stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 26 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    $end            reduce using rule 26 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    SPACES          reduce using rule 26 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    }               reduce using rule 26 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)


state 150

    (42) declist -> VARNAME space : space blist .

    SPACES          reduce using rule 42 (declist -> VARNAME space : space blist .)
    NEWLINE         reduce using rule 42 (declist -> VARNAME space : space blist .)
    }               reduce using rule 42 (declist -> VARNAME space : space blist .)
    ,               reduce using rule 42 (declist -> VARNAME space : space blist .)


state 151

    (43) declist -> VARNAME * space : space . blist
    (40) blist -> . [ spnl list spnl ]
    (41) blist -> . [ spnl ]

    [               shift and go to state 37

    blist                          shift and go to state 153

state 152

    (44) declist -> declist spnl , spnl VARNAME . space : space blist
    (45) declist -> declist spnl , spnl VARNAME . * space : space blist
    (1) space -> .
    (2) space -> . SPACES

    *               shift and go to state 155
    :               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 154

state 153

    (43) declist -> VARNAME * space : space blist .

    SPACES          reduce using rule 43 (declist -> VARNAME * space : space blist .)
    NEWLINE         reduce using rule 43 (declist -> VARNAME * space : space blist .)
    }               reduce using rule 43 (declist -> VARNAME * space : space blist .)
    ,               reduce using rule 43 (declist -> VARNAME * space : space blist .)


state 154

    (44) declist -> declist spnl , spnl VARNAME space . : space blist

    :               shift and go to state 156


state 155

    (45) declist -> declist spnl , spnl VARNAME * . space : space blist
    (1) space -> .
    (2) space -> . SPACES

    :               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 157

state 156

    (44) declist -> declist spnl , spnl VARNAME space : . space blist
    (1) space -> .
    (2) space -> . SPACES

    [               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 158

state 157

    (45) declist -> declist spnl , spnl VARNAME * space . : space blist

    :               shift and go to state 159


state 158

    (44) declist -> declist spnl , spnl VARNAME space : space . blist
    (40) blist -> . [ spnl list spnl ]
    (41) blist -> . [ spnl ]

    [               shift and go to state 37

    blist                          shift and go to state 160

state 159

    (45) declist -> declist spnl , spnl VARNAME * space : . space blist
    (1) space -> .
    (2) space -> . SPACES

    [               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 161

state 160

    (44) declist -> declist spnl , spnl VARNAME space : space blist .

    SPACES          reduce using rule 44 (declist -> declist spnl , spnl VARNAME space : space blist .)
    NEWLINE         reduce using rule 44 (declist -> declist spnl , spnl VARNAME space : space blist .)
    }               reduce using rule 44 (declist -> declist spnl , spnl VARNAME space : space blist .)
    ,               reduce using rule 44 (declist -> declist spnl , spnl VARNAME space : space blist .)


state 161

    (45) declist -> declist spnl , spnl VARNAME * space : space . blist
    (40) blist -> . [ spnl list spnl ]
    (41) blist -> . [ spnl ]

    [               shift and go to state 37

    blist                          shift and go to state 162

state 162

    (45) declist -> declist spnl , spnl VARNAME * space : space blist .

    SPACES          reduce using rule 45 (declist -> declist spnl , spnl VARNAME * space : space blist .)
    NEWLINE         reduce using rule 45 (declist -> declist spnl , spnl VARNAME * space : space blist .)
    }               reduce using rule 45 (declist -> declist spnl , spnl VARNAME * space : space blist .)
    ,               reduce using rule 45 (declist -> declist spnl , spnl VARNAME * space : space blist .)

