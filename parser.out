Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     space -> <empty>
Rule 2     space -> SPACES
Rule 3     boolop -> space LTE space
Rule 4     boolop -> space GTE space
Rule 5     boolop -> space < space
Rule 6     boolop -> space > space
Rule 7     boolop -> space = = space
Rule 8     boolop -> space ! = space
Rule 9     boolexp -> VARNAME boolop VARNAME
Rule 10    boolexp -> VARNAME boolop NUMBER
Rule 11    boolexp -> NUMBER boolop VARNAME
Rule 12    boolexp -> NUMBER boolop NUMBER
Rule 13    lhs -> * VARNAME
Rule 14    lhs -> VARNAME - > VARNAME
Rule 15    lhs -> VARNAME . VARNAME
Rule 16    rhs -> boolexp
Rule 17    rhs -> lhs
Rule 18    rhs -> VARNAME
Rule 19    rhs -> & VARNAME
Rule 20    rhs -> NUMBER
Rule 21    vardec -> VARNAME SPACES list
Rule 22    vardec -> VARNAME * SPACES list
Rule 23    stmt -> vardec
Rule 24    stmt -> lhs space = space rhs
Rule 25    stmt -> VARNAME space = space rhs
Rule 26    stmt -> READ SPACES VARNAME
Rule 27    stmt -> GOTO SPACES NUMBER
Rule 28    stmt -> CALL SPACES VARNAME funcargs
Rule 29    stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER
Rule 30    stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER
Rule 31    tac -> MAINCODE : nl varlist
Rule 32    tac -> tac stmtnl stmt
Rule 33    nl -> NEWLINE
Rule 34    stmtnl -> NEWLINE
Rule 35    funcbody -> stmt
Rule 36    funcbody -> funcbody stmtnl stmt
Rule 37    arglist -> VARNAME
Rule 38    arglist -> arglist space , space VARNAME
Rule 39    funcargs -> ( space )
Rule 40    funcargs -> ( space arglist space )
Rule 41    paramlist -> VARNAME SPACES VARNAME
Rule 42    paramlist -> paramlist space , space VARNAME SPACES VARNAME
Rule 43    funcparams -> ( space )
Rule 44    funcparams -> ( space paramlist space )
Rule 45    func -> FUNCS : nl
Rule 46    func -> func VARNAME funcparams spnl { funcvarlist funcbody spnl } nl
Rule 47    func -> func VARNAME funcparams spnl { funcvarlist } nl
Rule 48    spnl -> space
Rule 49    spnl -> nl
Rule 50    list -> VARNAME space
Rule 51    list -> list , space VARNAME space
Rule 52    blist -> [ spnl list spnl ]
Rule 53    blist -> [ spnl ]
Rule 54    declist -> VARNAME space : space blist
Rule 55    declist -> VARNAME * space : space blist
Rule 56    declist -> declist spnl , spnl VARNAME space : space blist
Rule 57    declist -> declist spnl , spnl VARNAME * space : space blist
Rule 58    varlist -> VARLT space = space { spnl }
Rule 59    varlist -> VARLT space = space { spnl declist spnl }
Rule 60    funcvarlist -> spnl
Rule 61    funcvarlist -> spnl varlist nl
Rule 62    structs -> spnl STRT : nl
Rule 63    structs -> structs VARNAME space { spnl declist spnl } nl
Rule 64    structs -> structs VARNAME space { spnl } nl
Rule 65    prog -> structs func tac

Terminals, with rules where they appear

!                    : 8
&                    : 19
(                    : 39 40 43 44
)                    : 39 40 43 44
*                    : 13 22 55 57
,                    : 38 42 51 56 57
-                    : 14
.                    : 15
:                    : 31 45 54 55 56 57 62
<                    : 5
=                    : 7 7 8 24 25 58 59
>                    : 6 14
CALL                 : 28
FUNCS                : 45
GOTO                 : 27 29 30
GTE                  : 4
IF                   : 29 30
LTE                  : 3
MAINCODE             : 31
NEWLINE              : 33 34
NUMBER               : 10 11 12 12 20 27 29 30
READ                 : 26
SPACES               : 2 21 22 26 27 28 29 29 29 30 30 30 41 42
STRT                 : 62
VARLT                : 58 59
VARNAME              : 9 9 10 11 13 14 14 15 15 18 19 21 22 25 26 28 30 37 38 41 41 42 42 46 47 50 51 54 55 56 57 63 64
[                    : 52 53
]                    : 52 53
error                : 
{                    : 46 47 58 59 63 64
}                    : 46 47 58 59 63 64

Nonterminals, with rules where they appear

arglist              : 38 40
blist                : 54 55 56 57
boolexp              : 16 29
boolop               : 9 10 11 12
declist              : 56 57 59 63
func                 : 46 47 65
funcargs             : 28
funcbody             : 36 46
funcparams           : 46 47
funcvarlist          : 46 47
lhs                  : 17 24
list                 : 21 22 51 52
nl                   : 31 45 46 47 49 61 62 63 64
paramlist            : 42 44
prog                 : 0
rhs                  : 24 25
space                : 3 3 4 4 5 5 6 6 7 7 8 8 24 24 25 25 38 38 39 40 40 42 42 43 44 44 48 50 51 51 54 54 55 55 56 56 57 57 58 58 59 59 63 64
spnl                 : 46 46 47 52 52 53 56 56 57 57 58 59 59 60 61 62 63 63 64
stmt                 : 32 35 36
stmtnl               : 32 36
structs              : 63 64 65
tac                  : 32 65
vardec               : 23
varlist              : 31 61

Parsing method: LALR

state 0

    (0) S' -> . prog
    (65) prog -> . structs func tac
    (62) structs -> . spnl STRT : nl
    (63) structs -> . structs VARNAME space { spnl declist spnl } nl
    (64) structs -> . structs VARNAME space { spnl } nl
    (48) spnl -> . space
    (49) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    STRT            reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    prog                           shift and go to state 1
    structs                        shift and go to state 2
    spnl                           shift and go to state 3
    nl                             shift and go to state 4
    space                          shift and go to state 5

state 1

    (0) S' -> prog .



state 2

    (65) prog -> structs . func tac
    (63) structs -> structs . VARNAME space { spnl declist spnl } nl
    (64) structs -> structs . VARNAME space { spnl } nl
    (45) func -> . FUNCS : nl
    (46) func -> . func VARNAME funcparams spnl { funcvarlist funcbody spnl } nl
    (47) func -> . func VARNAME funcparams spnl { funcvarlist } nl

    VARNAME         shift and go to state 9
    FUNCS           shift and go to state 10

    func                           shift and go to state 8

state 3

    (62) structs -> spnl . STRT : nl

    STRT            shift and go to state 11


state 4

    (49) spnl -> nl .

    STRT            reduce using rule 49 (spnl -> nl .)
    {               reduce using rule 49 (spnl -> nl .)
    }               reduce using rule 49 (spnl -> nl .)
    VARNAME         reduce using rule 49 (spnl -> nl .)
    VARLT           reduce using rule 49 (spnl -> nl .)
    READ            reduce using rule 49 (spnl -> nl .)
    GOTO            reduce using rule 49 (spnl -> nl .)
    CALL            reduce using rule 49 (spnl -> nl .)
    IF              reduce using rule 49 (spnl -> nl .)
    *               reduce using rule 49 (spnl -> nl .)
    ,               reduce using rule 49 (spnl -> nl .)
    ]               reduce using rule 49 (spnl -> nl .)


state 5

    (48) spnl -> space .

    STRT            reduce using rule 48 (spnl -> space .)
    {               reduce using rule 48 (spnl -> space .)
    }               reduce using rule 48 (spnl -> space .)
    VARNAME         reduce using rule 48 (spnl -> space .)
    VARLT           reduce using rule 48 (spnl -> space .)
    READ            reduce using rule 48 (spnl -> space .)
    GOTO            reduce using rule 48 (spnl -> space .)
    CALL            reduce using rule 48 (spnl -> space .)
    IF              reduce using rule 48 (spnl -> space .)
    *               reduce using rule 48 (spnl -> space .)
    ,               reduce using rule 48 (spnl -> space .)
    ]               reduce using rule 48 (spnl -> space .)


state 6

    (2) space -> SPACES .

    STRT            reduce using rule 2 (space -> SPACES .)
    {               reduce using rule 2 (space -> SPACES .)
    )               reduce using rule 2 (space -> SPACES .)
    VARNAME         reduce using rule 2 (space -> SPACES .)
    }               reduce using rule 2 (space -> SPACES .)
    =               reduce using rule 2 (space -> SPACES .)
    VARLT           reduce using rule 2 (space -> SPACES .)
    READ            reduce using rule 2 (space -> SPACES .)
    GOTO            reduce using rule 2 (space -> SPACES .)
    CALL            reduce using rule 2 (space -> SPACES .)
    IF              reduce using rule 2 (space -> SPACES .)
    *               reduce using rule 2 (space -> SPACES .)
    ,               reduce using rule 2 (space -> SPACES .)
    :               reduce using rule 2 (space -> SPACES .)
    &               reduce using rule 2 (space -> SPACES .)
    NUMBER          reduce using rule 2 (space -> SPACES .)
    NEWLINE         reduce using rule 2 (space -> SPACES .)
    $end            reduce using rule 2 (space -> SPACES .)
    SPACES          reduce using rule 2 (space -> SPACES .)
    ]               reduce using rule 2 (space -> SPACES .)
    LTE             reduce using rule 2 (space -> SPACES .)
    GTE             reduce using rule 2 (space -> SPACES .)
    <               reduce using rule 2 (space -> SPACES .)
    >               reduce using rule 2 (space -> SPACES .)
    !               reduce using rule 2 (space -> SPACES .)
    [               reduce using rule 2 (space -> SPACES .)


state 7

    (33) nl -> NEWLINE .

    STRT            reduce using rule 33 (nl -> NEWLINE .)
    VARNAME         reduce using rule 33 (nl -> NEWLINE .)
    MAINCODE        reduce using rule 33 (nl -> NEWLINE .)
    FUNCS           reduce using rule 33 (nl -> NEWLINE .)
    {               reduce using rule 33 (nl -> NEWLINE .)
    VARLT           reduce using rule 33 (nl -> NEWLINE .)
    }               reduce using rule 33 (nl -> NEWLINE .)
    READ            reduce using rule 33 (nl -> NEWLINE .)
    GOTO            reduce using rule 33 (nl -> NEWLINE .)
    CALL            reduce using rule 33 (nl -> NEWLINE .)
    IF              reduce using rule 33 (nl -> NEWLINE .)
    *               reduce using rule 33 (nl -> NEWLINE .)
    ,               reduce using rule 33 (nl -> NEWLINE .)
    ]               reduce using rule 33 (nl -> NEWLINE .)


state 8

    (65) prog -> structs func . tac
    (46) func -> func . VARNAME funcparams spnl { funcvarlist funcbody spnl } nl
    (47) func -> func . VARNAME funcparams spnl { funcvarlist } nl
    (31) tac -> . MAINCODE : nl varlist
    (32) tac -> . tac stmtnl stmt

    VARNAME         shift and go to state 13
    MAINCODE        shift and go to state 14

    tac                            shift and go to state 12

state 9

    (63) structs -> structs VARNAME . space { spnl declist spnl } nl
    (64) structs -> structs VARNAME . space { spnl } nl
    (1) space -> .
    (2) space -> . SPACES

    {               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 15

state 10

    (45) func -> FUNCS . : nl

    :               shift and go to state 16


state 11

    (62) structs -> spnl STRT . : nl

    :               shift and go to state 17


state 12

    (65) prog -> structs func tac .
    (32) tac -> tac . stmtnl stmt
    (34) stmtnl -> . NEWLINE

    $end            reduce using rule 65 (prog -> structs func tac .)
    NEWLINE         shift and go to state 19

    stmtnl                         shift and go to state 18

state 13

    (46) func -> func VARNAME . funcparams spnl { funcvarlist funcbody spnl } nl
    (47) func -> func VARNAME . funcparams spnl { funcvarlist } nl
    (43) funcparams -> . ( space )
    (44) funcparams -> . ( space paramlist space )

    (               shift and go to state 21

    funcparams                     shift and go to state 20

state 14

    (31) tac -> MAINCODE . : nl varlist

    :               shift and go to state 22


state 15

    (63) structs -> structs VARNAME space . { spnl declist spnl } nl
    (64) structs -> structs VARNAME space . { spnl } nl

    {               shift and go to state 23


state 16

    (45) func -> FUNCS : . nl
    (33) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 24

state 17

    (62) structs -> spnl STRT : . nl
    (33) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 25

state 18

    (32) tac -> tac stmtnl . stmt
    (23) stmt -> . vardec
    (24) stmt -> . lhs space = space rhs
    (25) stmt -> . VARNAME space = space rhs
    (26) stmt -> . READ SPACES VARNAME
    (27) stmt -> . GOTO SPACES NUMBER
    (28) stmt -> . CALL SPACES VARNAME funcargs
    (29) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (30) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (21) vardec -> . VARNAME SPACES list
    (22) vardec -> . VARNAME * SPACES list
    (13) lhs -> . * VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    VARNAME         shift and go to state 29
    READ            shift and go to state 30
    GOTO            shift and go to state 31
    CALL            shift and go to state 32
    IF              shift and go to state 33
    *               shift and go to state 34

    stmt                           shift and go to state 26
    vardec                         shift and go to state 27
    lhs                            shift and go to state 28

state 19

    (34) stmtnl -> NEWLINE .

    VARNAME         reduce using rule 34 (stmtnl -> NEWLINE .)
    READ            reduce using rule 34 (stmtnl -> NEWLINE .)
    GOTO            reduce using rule 34 (stmtnl -> NEWLINE .)
    CALL            reduce using rule 34 (stmtnl -> NEWLINE .)
    IF              reduce using rule 34 (stmtnl -> NEWLINE .)
    *               reduce using rule 34 (stmtnl -> NEWLINE .)


state 20

    (46) func -> func VARNAME funcparams . spnl { funcvarlist funcbody spnl } nl
    (47) func -> func VARNAME funcparams . spnl { funcvarlist } nl
    (48) spnl -> . space
    (49) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    {               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    spnl                           shift and go to state 35
    nl                             shift and go to state 4
    space                          shift and go to state 5

state 21

    (43) funcparams -> ( . space )
    (44) funcparams -> ( . space paramlist space )
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 36

state 22

    (31) tac -> MAINCODE : . nl varlist
    (33) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 37

state 23

    (63) structs -> structs VARNAME space { . spnl declist spnl } nl
    (64) structs -> structs VARNAME space { . spnl } nl
    (48) spnl -> . space
    (49) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    space                          shift and go to state 5
    spnl                           shift and go to state 38
    nl                             shift and go to state 4

state 24

    (45) func -> FUNCS : nl .

    VARNAME         reduce using rule 45 (func -> FUNCS : nl .)
    MAINCODE        reduce using rule 45 (func -> FUNCS : nl .)


state 25

    (62) structs -> spnl STRT : nl .

    VARNAME         reduce using rule 62 (structs -> spnl STRT : nl .)
    FUNCS           reduce using rule 62 (structs -> spnl STRT : nl .)


state 26

    (32) tac -> tac stmtnl stmt .

    NEWLINE         reduce using rule 32 (tac -> tac stmtnl stmt .)
    $end            reduce using rule 32 (tac -> tac stmtnl stmt .)


state 27

    (23) stmt -> vardec .

    NEWLINE         reduce using rule 23 (stmt -> vardec .)
    $end            reduce using rule 23 (stmt -> vardec .)
    SPACES          reduce using rule 23 (stmt -> vardec .)
    }               reduce using rule 23 (stmt -> vardec .)


state 28

    (24) stmt -> lhs . space = space rhs
    (1) space -> .
    (2) space -> . SPACES

    =               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 39

state 29

    (25) stmt -> VARNAME . space = space rhs
    (21) vardec -> VARNAME . SPACES list
    (22) vardec -> VARNAME . * SPACES list
    (14) lhs -> VARNAME . - > VARNAME
    (15) lhs -> VARNAME . . VARNAME
    (1) space -> .
    (2) space -> . SPACES

    SPACES          shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    .               shift and go to state 44
    =               reduce using rule 1 (space -> .)

    space                          shift and go to state 40

state 30

    (26) stmt -> READ . SPACES VARNAME

    SPACES          shift and go to state 45


state 31

    (27) stmt -> GOTO . SPACES NUMBER

    SPACES          shift and go to state 46


state 32

    (28) stmt -> CALL . SPACES VARNAME funcargs

    SPACES          shift and go to state 47


state 33

    (29) stmt -> IF . SPACES boolexp SPACES GOTO SPACES NUMBER
    (30) stmt -> IF . SPACES VARNAME SPACES GOTO SPACES NUMBER

    SPACES          shift and go to state 48


state 34

    (13) lhs -> * . VARNAME

    VARNAME         shift and go to state 49


state 35

    (46) func -> func VARNAME funcparams spnl . { funcvarlist funcbody spnl } nl
    (47) func -> func VARNAME funcparams spnl . { funcvarlist } nl

    {               shift and go to state 50


state 36

    (43) funcparams -> ( space . )
    (44) funcparams -> ( space . paramlist space )
    (41) paramlist -> . VARNAME SPACES VARNAME
    (42) paramlist -> . paramlist space , space VARNAME SPACES VARNAME

    )               shift and go to state 51
    VARNAME         shift and go to state 53

    paramlist                      shift and go to state 52

state 37

    (31) tac -> MAINCODE : nl . varlist
    (58) varlist -> . VARLT space = space { spnl }
    (59) varlist -> . VARLT space = space { spnl declist spnl }

    VARLT           shift and go to state 55

    varlist                        shift and go to state 54

state 38

    (63) structs -> structs VARNAME space { spnl . declist spnl } nl
    (64) structs -> structs VARNAME space { spnl . } nl
    (54) declist -> . VARNAME space : space blist
    (55) declist -> . VARNAME * space : space blist
    (56) declist -> . declist spnl , spnl VARNAME space : space blist
    (57) declist -> . declist spnl , spnl VARNAME * space : space blist

    }               shift and go to state 58
    VARNAME         shift and go to state 56

    declist                        shift and go to state 57

state 39

    (24) stmt -> lhs space . = space rhs

    =               shift and go to state 59


state 40

    (25) stmt -> VARNAME space . = space rhs

    =               shift and go to state 60


state 41

    (21) vardec -> VARNAME SPACES . list
    (2) space -> SPACES .
    (50) list -> . VARNAME space
    (51) list -> . list , space VARNAME space

    =               reduce using rule 2 (space -> SPACES .)
    VARNAME         shift and go to state 61

    list                           shift and go to state 62

state 42

    (22) vardec -> VARNAME * . SPACES list

    SPACES          shift and go to state 63


state 43

    (14) lhs -> VARNAME - . > VARNAME

    >               shift and go to state 64


state 44

    (15) lhs -> VARNAME . . VARNAME

    VARNAME         shift and go to state 65


state 45

    (26) stmt -> READ SPACES . VARNAME

    VARNAME         shift and go to state 66


state 46

    (27) stmt -> GOTO SPACES . NUMBER

    NUMBER          shift and go to state 67


state 47

    (28) stmt -> CALL SPACES . VARNAME funcargs

    VARNAME         shift and go to state 68


state 48

    (29) stmt -> IF SPACES . boolexp SPACES GOTO SPACES NUMBER
    (30) stmt -> IF SPACES . VARNAME SPACES GOTO SPACES NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER

    VARNAME         shift and go to state 71
    NUMBER          shift and go to state 70

    boolexp                        shift and go to state 69

state 49

    (13) lhs -> * VARNAME .

    SPACES          reduce using rule 13 (lhs -> * VARNAME .)
    =               reduce using rule 13 (lhs -> * VARNAME .)
    NEWLINE         reduce using rule 13 (lhs -> * VARNAME .)
    $end            reduce using rule 13 (lhs -> * VARNAME .)
    }               reduce using rule 13 (lhs -> * VARNAME .)


state 50

    (46) func -> func VARNAME funcparams spnl { . funcvarlist funcbody spnl } nl
    (47) func -> func VARNAME funcparams spnl { . funcvarlist } nl
    (60) funcvarlist -> . spnl
    (61) funcvarlist -> . spnl varlist nl
    (48) spnl -> . space
    (49) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    VARLT           reduce using rule 1 (space -> .)
    }               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    READ            reduce using rule 1 (space -> .)
    GOTO            reduce using rule 1 (space -> .)
    CALL            reduce using rule 1 (space -> .)
    IF              reduce using rule 1 (space -> .)
    *               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    spnl                           shift and go to state 72
    funcvarlist                    shift and go to state 73
    nl                             shift and go to state 4
    space                          shift and go to state 5

state 51

    (43) funcparams -> ( space ) .

    SPACES          reduce using rule 43 (funcparams -> ( space ) .)
    NEWLINE         reduce using rule 43 (funcparams -> ( space ) .)
    {               reduce using rule 43 (funcparams -> ( space ) .)


state 52

    (44) funcparams -> ( space paramlist . space )
    (42) paramlist -> paramlist . space , space VARNAME SPACES VARNAME
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 74

state 53

    (41) paramlist -> VARNAME . SPACES VARNAME

    SPACES          shift and go to state 75


state 54

    (31) tac -> MAINCODE : nl varlist .

    NEWLINE         reduce using rule 31 (tac -> MAINCODE : nl varlist .)
    $end            reduce using rule 31 (tac -> MAINCODE : nl varlist .)


state 55

    (58) varlist -> VARLT . space = space { spnl }
    (59) varlist -> VARLT . space = space { spnl declist spnl }
    (1) space -> .
    (2) space -> . SPACES

    =               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 76

state 56

    (54) declist -> VARNAME . space : space blist
    (55) declist -> VARNAME . * space : space blist
    (1) space -> .
    (2) space -> . SPACES

    *               shift and go to state 78
    :               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 77

state 57

    (63) structs -> structs VARNAME space { spnl declist . spnl } nl
    (56) declist -> declist . spnl , spnl VARNAME space : space blist
    (57) declist -> declist . spnl , spnl VARNAME * space : space blist
    (48) spnl -> . space
    (49) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    space                          shift and go to state 5
    spnl                           shift and go to state 79
    nl                             shift and go to state 4

state 58

    (64) structs -> structs VARNAME space { spnl } . nl
    (33) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 80

state 59

    (24) stmt -> lhs space = . space rhs
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    &               reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    *               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 81

state 60

    (25) stmt -> VARNAME space = . space rhs
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    &               reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    *               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 82

state 61

    (50) list -> VARNAME . space
    (1) space -> .
    (2) space -> . SPACES

    ,               reduce using rule 1 (space -> .)
    NEWLINE         reduce using rule 1 (space -> .)
    $end            reduce using rule 1 (space -> .)
    SPACES          reduce using rule 1 (space -> .)
    }               reduce using rule 1 (space -> .)
    ]               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    space                          shift and go to state 83

state 62

    (21) vardec -> VARNAME SPACES list .
    (51) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 21 (vardec -> VARNAME SPACES list .)
    $end            reduce using rule 21 (vardec -> VARNAME SPACES list .)
    SPACES          reduce using rule 21 (vardec -> VARNAME SPACES list .)
    }               reduce using rule 21 (vardec -> VARNAME SPACES list .)
    ,               shift and go to state 84


state 63

    (22) vardec -> VARNAME * SPACES . list
    (50) list -> . VARNAME space
    (51) list -> . list , space VARNAME space

    VARNAME         shift and go to state 61

    list                           shift and go to state 85

state 64

    (14) lhs -> VARNAME - > . VARNAME

    VARNAME         shift and go to state 86


state 65

    (15) lhs -> VARNAME . VARNAME .

    SPACES          reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    =               reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    NEWLINE         reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    $end            reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    }               reduce using rule 15 (lhs -> VARNAME . VARNAME .)


state 66

    (26) stmt -> READ SPACES VARNAME .

    NEWLINE         reduce using rule 26 (stmt -> READ SPACES VARNAME .)
    $end            reduce using rule 26 (stmt -> READ SPACES VARNAME .)
    SPACES          reduce using rule 26 (stmt -> READ SPACES VARNAME .)
    }               reduce using rule 26 (stmt -> READ SPACES VARNAME .)


state 67

    (27) stmt -> GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 27 (stmt -> GOTO SPACES NUMBER .)
    $end            reduce using rule 27 (stmt -> GOTO SPACES NUMBER .)
    SPACES          reduce using rule 27 (stmt -> GOTO SPACES NUMBER .)
    }               reduce using rule 27 (stmt -> GOTO SPACES NUMBER .)


state 68

    (28) stmt -> CALL SPACES VARNAME . funcargs
    (39) funcargs -> . ( space )
    (40) funcargs -> . ( space arglist space )

    (               shift and go to state 88

    funcargs                       shift and go to state 87

state 69

    (29) stmt -> IF SPACES boolexp . SPACES GOTO SPACES NUMBER

    SPACES          shift and go to state 89


state 70

    (11) boolexp -> NUMBER . boolop VARNAME
    (12) boolexp -> NUMBER . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    boolop                         shift and go to state 90
    space                          shift and go to state 91

state 71

    (30) stmt -> IF SPACES VARNAME . SPACES GOTO SPACES NUMBER
    (9) boolexp -> VARNAME . boolop VARNAME
    (10) boolexp -> VARNAME . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    SPACES          shift and go to state 92
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

    boolop                         shift and go to state 93
    space                          shift and go to state 91

state 72

    (60) funcvarlist -> spnl .
    (61) funcvarlist -> spnl . varlist nl
    (58) varlist -> . VARLT space = space { spnl }
    (59) varlist -> . VARLT space = space { spnl declist spnl }

    }               reduce using rule 60 (funcvarlist -> spnl .)
    VARNAME         reduce using rule 60 (funcvarlist -> spnl .)
    READ            reduce using rule 60 (funcvarlist -> spnl .)
    GOTO            reduce using rule 60 (funcvarlist -> spnl .)
    CALL            reduce using rule 60 (funcvarlist -> spnl .)
    IF              reduce using rule 60 (funcvarlist -> spnl .)
    *               reduce using rule 60 (funcvarlist -> spnl .)
    VARLT           shift and go to state 55

    varlist                        shift and go to state 94

state 73

    (46) func -> func VARNAME funcparams spnl { funcvarlist . funcbody spnl } nl
    (47) func -> func VARNAME funcparams spnl { funcvarlist . } nl
    (35) funcbody -> . stmt
    (36) funcbody -> . funcbody stmtnl stmt
    (23) stmt -> . vardec
    (24) stmt -> . lhs space = space rhs
    (25) stmt -> . VARNAME space = space rhs
    (26) stmt -> . READ SPACES VARNAME
    (27) stmt -> . GOTO SPACES NUMBER
    (28) stmt -> . CALL SPACES VARNAME funcargs
    (29) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (30) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (21) vardec -> . VARNAME SPACES list
    (22) vardec -> . VARNAME * SPACES list
    (13) lhs -> . * VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    }               shift and go to state 96
    VARNAME         shift and go to state 29
    READ            shift and go to state 30
    GOTO            shift and go to state 31
    CALL            shift and go to state 32
    IF              shift and go to state 33
    *               shift and go to state 34

    funcbody                       shift and go to state 95
    stmt                           shift and go to state 97
    vardec                         shift and go to state 27
    lhs                            shift and go to state 28

state 74

    (44) funcparams -> ( space paramlist space . )
    (42) paramlist -> paramlist space . , space VARNAME SPACES VARNAME

    )               shift and go to state 98
    ,               shift and go to state 99


state 75

    (41) paramlist -> VARNAME SPACES . VARNAME

    VARNAME         shift and go to state 100


state 76

    (58) varlist -> VARLT space . = space { spnl }
    (59) varlist -> VARLT space . = space { spnl declist spnl }

    =               shift and go to state 101


state 77

    (54) declist -> VARNAME space . : space blist

    :               shift and go to state 102


state 78

    (55) declist -> VARNAME * . space : space blist
    (1) space -> .
    (2) space -> . SPACES

    :               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 103

state 79

    (63) structs -> structs VARNAME space { spnl declist spnl . } nl
    (56) declist -> declist spnl . , spnl VARNAME space : space blist
    (57) declist -> declist spnl . , spnl VARNAME * space : space blist

    }               shift and go to state 104
    ,               shift and go to state 105


state 80

    (64) structs -> structs VARNAME space { spnl } nl .

    VARNAME         reduce using rule 64 (structs -> structs VARNAME space { spnl } nl .)
    FUNCS           reduce using rule 64 (structs -> structs VARNAME space { spnl } nl .)


state 81

    (24) stmt -> lhs space = space . rhs
    (16) rhs -> . boolexp
    (17) rhs -> . lhs
    (18) rhs -> . VARNAME
    (19) rhs -> . & VARNAME
    (20) rhs -> . NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER
    (13) lhs -> . * VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    VARNAME         shift and go to state 109
    &               shift and go to state 110
    NUMBER          shift and go to state 111
    *               shift and go to state 34

    lhs                            shift and go to state 106
    rhs                            shift and go to state 107
    boolexp                        shift and go to state 108

state 82

    (25) stmt -> VARNAME space = space . rhs
    (16) rhs -> . boolexp
    (17) rhs -> . lhs
    (18) rhs -> . VARNAME
    (19) rhs -> . & VARNAME
    (20) rhs -> . NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER
    (13) lhs -> . * VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    VARNAME         shift and go to state 109
    &               shift and go to state 110
    NUMBER          shift and go to state 111
    *               shift and go to state 34

    rhs                            shift and go to state 112
    boolexp                        shift and go to state 108
    lhs                            shift and go to state 106

state 83

    (50) list -> VARNAME space .

    ,               reduce using rule 50 (list -> VARNAME space .)
    NEWLINE         reduce using rule 50 (list -> VARNAME space .)
    $end            reduce using rule 50 (list -> VARNAME space .)
    SPACES          reduce using rule 50 (list -> VARNAME space .)
    }               reduce using rule 50 (list -> VARNAME space .)
    ]               reduce using rule 50 (list -> VARNAME space .)


state 84

    (51) list -> list , . space VARNAME space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 113

state 85

    (22) vardec -> VARNAME * SPACES list .
    (51) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 22 (vardec -> VARNAME * SPACES list .)
    $end            reduce using rule 22 (vardec -> VARNAME * SPACES list .)
    SPACES          reduce using rule 22 (vardec -> VARNAME * SPACES list .)
    }               reduce using rule 22 (vardec -> VARNAME * SPACES list .)
    ,               shift and go to state 84


state 86

    (14) lhs -> VARNAME - > VARNAME .

    SPACES          reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    =               reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    NEWLINE         reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    $end            reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    }               reduce using rule 14 (lhs -> VARNAME - > VARNAME .)


state 87

    (28) stmt -> CALL SPACES VARNAME funcargs .

    NEWLINE         reduce using rule 28 (stmt -> CALL SPACES VARNAME funcargs .)
    $end            reduce using rule 28 (stmt -> CALL SPACES VARNAME funcargs .)
    SPACES          reduce using rule 28 (stmt -> CALL SPACES VARNAME funcargs .)
    }               reduce using rule 28 (stmt -> CALL SPACES VARNAME funcargs .)


state 88

    (39) funcargs -> ( . space )
    (40) funcargs -> ( . space arglist space )
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 114

state 89

    (29) stmt -> IF SPACES boolexp SPACES . GOTO SPACES NUMBER

    GOTO            shift and go to state 115


state 90

    (11) boolexp -> NUMBER boolop . VARNAME
    (12) boolexp -> NUMBER boolop . NUMBER

    VARNAME         shift and go to state 117
    NUMBER          shift and go to state 116


state 91

    (3) boolop -> space . LTE space
    (4) boolop -> space . GTE space
    (5) boolop -> space . < space
    (6) boolop -> space . > space
    (7) boolop -> space . = = space
    (8) boolop -> space . ! = space

    LTE             shift and go to state 118
    GTE             shift and go to state 119
    <               shift and go to state 120
    >               shift and go to state 121
    =               shift and go to state 122
    !               shift and go to state 123


state 92

    (30) stmt -> IF SPACES VARNAME SPACES . GOTO SPACES NUMBER
    (2) space -> SPACES .

    GOTO            shift and go to state 124
    LTE             reduce using rule 2 (space -> SPACES .)
    GTE             reduce using rule 2 (space -> SPACES .)
    <               reduce using rule 2 (space -> SPACES .)
    >               reduce using rule 2 (space -> SPACES .)
    =               reduce using rule 2 (space -> SPACES .)
    !               reduce using rule 2 (space -> SPACES .)


state 93

    (9) boolexp -> VARNAME boolop . VARNAME
    (10) boolexp -> VARNAME boolop . NUMBER

    VARNAME         shift and go to state 125
    NUMBER          shift and go to state 126


state 94

    (61) funcvarlist -> spnl varlist . nl
    (33) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 127

state 95

    (46) func -> func VARNAME funcparams spnl { funcvarlist funcbody . spnl } nl
    (36) funcbody -> funcbody . stmtnl stmt
    (48) spnl -> . space
    (49) spnl -> . nl
    (34) stmtnl -> . NEWLINE
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    NEWLINE         shift and go to state 130
    }               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    spnl                           shift and go to state 128
    nl                             shift and go to state 4
    stmtnl                         shift and go to state 129
    space                          shift and go to state 5

state 96

    (47) func -> func VARNAME funcparams spnl { funcvarlist } . nl
    (33) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 131

state 97

    (35) funcbody -> stmt .

    NEWLINE         reduce using rule 35 (funcbody -> stmt .)
    SPACES          reduce using rule 35 (funcbody -> stmt .)
    }               reduce using rule 35 (funcbody -> stmt .)


state 98

    (44) funcparams -> ( space paramlist space ) .

    SPACES          reduce using rule 44 (funcparams -> ( space paramlist space ) .)
    NEWLINE         reduce using rule 44 (funcparams -> ( space paramlist space ) .)
    {               reduce using rule 44 (funcparams -> ( space paramlist space ) .)


state 99

    (42) paramlist -> paramlist space , . space VARNAME SPACES VARNAME
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 132

state 100

    (41) paramlist -> VARNAME SPACES VARNAME .

    SPACES          reduce using rule 41 (paramlist -> VARNAME SPACES VARNAME .)
    )               reduce using rule 41 (paramlist -> VARNAME SPACES VARNAME .)
    ,               reduce using rule 41 (paramlist -> VARNAME SPACES VARNAME .)


state 101

    (58) varlist -> VARLT space = . space { spnl }
    (59) varlist -> VARLT space = . space { spnl declist spnl }
    (1) space -> .
    (2) space -> . SPACES

    {               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 133

state 102

    (54) declist -> VARNAME space : . space blist
    (1) space -> .
    (2) space -> . SPACES

    [               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 134

state 103

    (55) declist -> VARNAME * space . : space blist

    :               shift and go to state 135


state 104

    (63) structs -> structs VARNAME space { spnl declist spnl } . nl
    (33) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 136

state 105

    (56) declist -> declist spnl , . spnl VARNAME space : space blist
    (57) declist -> declist spnl , . spnl VARNAME * space : space blist
    (48) spnl -> . space
    (49) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    spnl                           shift and go to state 137
    space                          shift and go to state 5
    nl                             shift and go to state 4

state 106

    (17) rhs -> lhs .

    NEWLINE         reduce using rule 17 (rhs -> lhs .)
    $end            reduce using rule 17 (rhs -> lhs .)
    SPACES          reduce using rule 17 (rhs -> lhs .)
    }               reduce using rule 17 (rhs -> lhs .)


state 107

    (24) stmt -> lhs space = space rhs .

    NEWLINE         reduce using rule 24 (stmt -> lhs space = space rhs .)
    $end            reduce using rule 24 (stmt -> lhs space = space rhs .)
    SPACES          reduce using rule 24 (stmt -> lhs space = space rhs .)
    }               reduce using rule 24 (stmt -> lhs space = space rhs .)


state 108

    (16) rhs -> boolexp .

    NEWLINE         reduce using rule 16 (rhs -> boolexp .)
    $end            reduce using rule 16 (rhs -> boolexp .)
    SPACES          reduce using rule 16 (rhs -> boolexp .)
    }               reduce using rule 16 (rhs -> boolexp .)


state 109

    (18) rhs -> VARNAME .
    (9) boolexp -> VARNAME . boolop VARNAME
    (10) boolexp -> VARNAME . boolop NUMBER
    (14) lhs -> VARNAME . - > VARNAME
    (15) lhs -> VARNAME . . VARNAME
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         reduce using rule 18 (rhs -> VARNAME .)
    $end            reduce using rule 18 (rhs -> VARNAME .)
    SPACES          reduce using rule 18 (rhs -> VARNAME .)
    }               reduce using rule 18 (rhs -> VARNAME .)
    -               shift and go to state 43
    .               shift and go to state 44
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    boolop                         shift and go to state 93
    space                          shift and go to state 91

state 110

    (19) rhs -> & . VARNAME

    VARNAME         shift and go to state 138


state 111

    (20) rhs -> NUMBER .
    (11) boolexp -> NUMBER . boolop VARNAME
    (12) boolexp -> NUMBER . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         reduce using rule 20 (rhs -> NUMBER .)
    $end            reduce using rule 20 (rhs -> NUMBER .)
    SPACES          reduce using rule 20 (rhs -> NUMBER .)
    }               reduce using rule 20 (rhs -> NUMBER .)
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    boolop                         shift and go to state 90
    space                          shift and go to state 91

state 112

    (25) stmt -> VARNAME space = space rhs .

    NEWLINE         reduce using rule 25 (stmt -> VARNAME space = space rhs .)
    $end            reduce using rule 25 (stmt -> VARNAME space = space rhs .)
    SPACES          reduce using rule 25 (stmt -> VARNAME space = space rhs .)
    }               reduce using rule 25 (stmt -> VARNAME space = space rhs .)


state 113

    (51) list -> list , space . VARNAME space

    VARNAME         shift and go to state 139


state 114

    (39) funcargs -> ( space . )
    (40) funcargs -> ( space . arglist space )
    (37) arglist -> . VARNAME
    (38) arglist -> . arglist space , space VARNAME

    )               shift and go to state 140
    VARNAME         shift and go to state 142

    arglist                        shift and go to state 141

state 115

    (29) stmt -> IF SPACES boolexp SPACES GOTO . SPACES NUMBER

    SPACES          shift and go to state 143


state 116

    (12) boolexp -> NUMBER boolop NUMBER .

    SPACES          reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    NEWLINE         reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    $end            reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    }               reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)


state 117

    (11) boolexp -> NUMBER boolop VARNAME .

    SPACES          reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    NEWLINE         reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    $end            reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    }               reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)


state 118

    (3) boolop -> space LTE . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 144

state 119

    (4) boolop -> space GTE . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 145

state 120

    (5) boolop -> space < . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 146

state 121

    (6) boolop -> space > . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 147

state 122

    (7) boolop -> space = . = space

    =               shift and go to state 148


state 123

    (8) boolop -> space ! . = space

    =               shift and go to state 149


state 124

    (30) stmt -> IF SPACES VARNAME SPACES GOTO . SPACES NUMBER

    SPACES          shift and go to state 150


state 125

    (9) boolexp -> VARNAME boolop VARNAME .

    SPACES          reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    NEWLINE         reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    $end            reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    }               reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)


state 126

    (10) boolexp -> VARNAME boolop NUMBER .

    SPACES          reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    NEWLINE         reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    $end            reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    }               reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)


state 127

    (61) funcvarlist -> spnl varlist nl .

    }               reduce using rule 61 (funcvarlist -> spnl varlist nl .)
    VARNAME         reduce using rule 61 (funcvarlist -> spnl varlist nl .)
    READ            reduce using rule 61 (funcvarlist -> spnl varlist nl .)
    GOTO            reduce using rule 61 (funcvarlist -> spnl varlist nl .)
    CALL            reduce using rule 61 (funcvarlist -> spnl varlist nl .)
    IF              reduce using rule 61 (funcvarlist -> spnl varlist nl .)
    *               reduce using rule 61 (funcvarlist -> spnl varlist nl .)


state 128

    (46) func -> func VARNAME funcparams spnl { funcvarlist funcbody spnl . } nl

    }               shift and go to state 151


state 129

    (36) funcbody -> funcbody stmtnl . stmt
    (23) stmt -> . vardec
    (24) stmt -> . lhs space = space rhs
    (25) stmt -> . VARNAME space = space rhs
    (26) stmt -> . READ SPACES VARNAME
    (27) stmt -> . GOTO SPACES NUMBER
    (28) stmt -> . CALL SPACES VARNAME funcargs
    (29) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (30) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (21) vardec -> . VARNAME SPACES list
    (22) vardec -> . VARNAME * SPACES list
    (13) lhs -> . * VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    VARNAME         shift and go to state 29
    READ            shift and go to state 30
    GOTO            shift and go to state 31
    CALL            shift and go to state 32
    IF              shift and go to state 33
    *               shift and go to state 34

    stmt                           shift and go to state 152
    vardec                         shift and go to state 27
    lhs                            shift and go to state 28

state 130

    (34) stmtnl -> NEWLINE .
    (33) nl -> NEWLINE .

    VARNAME         reduce using rule 34 (stmtnl -> NEWLINE .)
    READ            reduce using rule 34 (stmtnl -> NEWLINE .)
    GOTO            reduce using rule 34 (stmtnl -> NEWLINE .)
    CALL            reduce using rule 34 (stmtnl -> NEWLINE .)
    IF              reduce using rule 34 (stmtnl -> NEWLINE .)
    *               reduce using rule 34 (stmtnl -> NEWLINE .)
    }               reduce using rule 33 (nl -> NEWLINE .)


state 131

    (47) func -> func VARNAME funcparams spnl { funcvarlist } nl .

    VARNAME         reduce using rule 47 (func -> func VARNAME funcparams spnl { funcvarlist } nl .)
    MAINCODE        reduce using rule 47 (func -> func VARNAME funcparams spnl { funcvarlist } nl .)


state 132

    (42) paramlist -> paramlist space , space . VARNAME SPACES VARNAME

    VARNAME         shift and go to state 153


state 133

    (58) varlist -> VARLT space = space . { spnl }
    (59) varlist -> VARLT space = space . { spnl declist spnl }

    {               shift and go to state 154


state 134

    (54) declist -> VARNAME space : space . blist
    (52) blist -> . [ spnl list spnl ]
    (53) blist -> . [ spnl ]

    [               shift and go to state 156

    blist                          shift and go to state 155

state 135

    (55) declist -> VARNAME * space : . space blist
    (1) space -> .
    (2) space -> . SPACES

    [               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 157

state 136

    (63) structs -> structs VARNAME space { spnl declist spnl } nl .

    VARNAME         reduce using rule 63 (structs -> structs VARNAME space { spnl declist spnl } nl .)
    FUNCS           reduce using rule 63 (structs -> structs VARNAME space { spnl declist spnl } nl .)


state 137

    (56) declist -> declist spnl , spnl . VARNAME space : space blist
    (57) declist -> declist spnl , spnl . VARNAME * space : space blist

    VARNAME         shift and go to state 158


state 138

    (19) rhs -> & VARNAME .

    NEWLINE         reduce using rule 19 (rhs -> & VARNAME .)
    $end            reduce using rule 19 (rhs -> & VARNAME .)
    SPACES          reduce using rule 19 (rhs -> & VARNAME .)
    }               reduce using rule 19 (rhs -> & VARNAME .)


state 139

    (51) list -> list , space VARNAME . space
    (1) space -> .
    (2) space -> . SPACES

    ,               reduce using rule 1 (space -> .)
    NEWLINE         reduce using rule 1 (space -> .)
    $end            reduce using rule 1 (space -> .)
    SPACES          reduce using rule 1 (space -> .)
    }               reduce using rule 1 (space -> .)
    ]               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    space                          shift and go to state 159

state 140

    (39) funcargs -> ( space ) .

    NEWLINE         reduce using rule 39 (funcargs -> ( space ) .)
    $end            reduce using rule 39 (funcargs -> ( space ) .)
    SPACES          reduce using rule 39 (funcargs -> ( space ) .)
    }               reduce using rule 39 (funcargs -> ( space ) .)


state 141

    (40) funcargs -> ( space arglist . space )
    (38) arglist -> arglist . space , space VARNAME
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 160

state 142

    (37) arglist -> VARNAME .

    SPACES          reduce using rule 37 (arglist -> VARNAME .)
    )               reduce using rule 37 (arglist -> VARNAME .)
    ,               reduce using rule 37 (arglist -> VARNAME .)


state 143

    (29) stmt -> IF SPACES boolexp SPACES GOTO SPACES . NUMBER

    NUMBER          shift and go to state 161


state 144

    (3) boolop -> space LTE space .

    VARNAME         reduce using rule 3 (boolop -> space LTE space .)
    NUMBER          reduce using rule 3 (boolop -> space LTE space .)


state 145

    (4) boolop -> space GTE space .

    VARNAME         reduce using rule 4 (boolop -> space GTE space .)
    NUMBER          reduce using rule 4 (boolop -> space GTE space .)


state 146

    (5) boolop -> space < space .

    VARNAME         reduce using rule 5 (boolop -> space < space .)
    NUMBER          reduce using rule 5 (boolop -> space < space .)


state 147

    (6) boolop -> space > space .

    VARNAME         reduce using rule 6 (boolop -> space > space .)
    NUMBER          reduce using rule 6 (boolop -> space > space .)


state 148

    (7) boolop -> space = = . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 162

state 149

    (8) boolop -> space ! = . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 163

state 150

    (30) stmt -> IF SPACES VARNAME SPACES GOTO SPACES . NUMBER

    NUMBER          shift and go to state 164


state 151

    (46) func -> func VARNAME funcparams spnl { funcvarlist funcbody spnl } . nl
    (33) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 165

state 152

    (36) funcbody -> funcbody stmtnl stmt .

    NEWLINE         reduce using rule 36 (funcbody -> funcbody stmtnl stmt .)
    SPACES          reduce using rule 36 (funcbody -> funcbody stmtnl stmt .)
    }               reduce using rule 36 (funcbody -> funcbody stmtnl stmt .)


state 153

    (42) paramlist -> paramlist space , space VARNAME . SPACES VARNAME

    SPACES          shift and go to state 166


state 154

    (58) varlist -> VARLT space = space { . spnl }
    (59) varlist -> VARLT space = space { . spnl declist spnl }
    (48) spnl -> . space
    (49) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    space                          shift and go to state 5
    spnl                           shift and go to state 167
    nl                             shift and go to state 4

state 155

    (54) declist -> VARNAME space : space blist .

    SPACES          reduce using rule 54 (declist -> VARNAME space : space blist .)
    NEWLINE         reduce using rule 54 (declist -> VARNAME space : space blist .)
    }               reduce using rule 54 (declist -> VARNAME space : space blist .)
    ,               reduce using rule 54 (declist -> VARNAME space : space blist .)


state 156

    (52) blist -> [ . spnl list spnl ]
    (53) blist -> [ . spnl ]
    (48) spnl -> . space
    (49) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    ]               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    spnl                           shift and go to state 168
    space                          shift and go to state 5
    nl                             shift and go to state 4

state 157

    (55) declist -> VARNAME * space : space . blist
    (52) blist -> . [ spnl list spnl ]
    (53) blist -> . [ spnl ]

    [               shift and go to state 156

    blist                          shift and go to state 169

state 158

    (56) declist -> declist spnl , spnl VARNAME . space : space blist
    (57) declist -> declist spnl , spnl VARNAME . * space : space blist
    (1) space -> .
    (2) space -> . SPACES

    *               shift and go to state 171
    :               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 170

state 159

    (51) list -> list , space VARNAME space .

    ,               reduce using rule 51 (list -> list , space VARNAME space .)
    NEWLINE         reduce using rule 51 (list -> list , space VARNAME space .)
    $end            reduce using rule 51 (list -> list , space VARNAME space .)
    SPACES          reduce using rule 51 (list -> list , space VARNAME space .)
    }               reduce using rule 51 (list -> list , space VARNAME space .)
    ]               reduce using rule 51 (list -> list , space VARNAME space .)


state 160

    (40) funcargs -> ( space arglist space . )
    (38) arglist -> arglist space . , space VARNAME

    )               shift and go to state 172
    ,               shift and go to state 173


state 161

    (29) stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 29 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    $end            reduce using rule 29 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    SPACES          reduce using rule 29 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    }               reduce using rule 29 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)


state 162

    (7) boolop -> space = = space .

    VARNAME         reduce using rule 7 (boolop -> space = = space .)
    NUMBER          reduce using rule 7 (boolop -> space = = space .)


state 163

    (8) boolop -> space ! = space .

    VARNAME         reduce using rule 8 (boolop -> space ! = space .)
    NUMBER          reduce using rule 8 (boolop -> space ! = space .)


state 164

    (30) stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 30 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    $end            reduce using rule 30 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    SPACES          reduce using rule 30 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    }               reduce using rule 30 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)


state 165

    (46) func -> func VARNAME funcparams spnl { funcvarlist funcbody spnl } nl .

    VARNAME         reduce using rule 46 (func -> func VARNAME funcparams spnl { funcvarlist funcbody spnl } nl .)
    MAINCODE        reduce using rule 46 (func -> func VARNAME funcparams spnl { funcvarlist funcbody spnl } nl .)


state 166

    (42) paramlist -> paramlist space , space VARNAME SPACES . VARNAME

    VARNAME         shift and go to state 174


state 167

    (58) varlist -> VARLT space = space { spnl . }
    (59) varlist -> VARLT space = space { spnl . declist spnl }
    (54) declist -> . VARNAME space : space blist
    (55) declist -> . VARNAME * space : space blist
    (56) declist -> . declist spnl , spnl VARNAME space : space blist
    (57) declist -> . declist spnl , spnl VARNAME * space : space blist

    }               shift and go to state 175
    VARNAME         shift and go to state 56

    declist                        shift and go to state 176

state 168

    (52) blist -> [ spnl . list spnl ]
    (53) blist -> [ spnl . ]
    (50) list -> . VARNAME space
    (51) list -> . list , space VARNAME space

    ]               shift and go to state 178
    VARNAME         shift and go to state 61

    list                           shift and go to state 177

state 169

    (55) declist -> VARNAME * space : space blist .

    SPACES          reduce using rule 55 (declist -> VARNAME * space : space blist .)
    NEWLINE         reduce using rule 55 (declist -> VARNAME * space : space blist .)
    }               reduce using rule 55 (declist -> VARNAME * space : space blist .)
    ,               reduce using rule 55 (declist -> VARNAME * space : space blist .)


state 170

    (56) declist -> declist spnl , spnl VARNAME space . : space blist

    :               shift and go to state 179


state 171

    (57) declist -> declist spnl , spnl VARNAME * . space : space blist
    (1) space -> .
    (2) space -> . SPACES

    :               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 180

state 172

    (40) funcargs -> ( space arglist space ) .

    NEWLINE         reduce using rule 40 (funcargs -> ( space arglist space ) .)
    $end            reduce using rule 40 (funcargs -> ( space arglist space ) .)
    SPACES          reduce using rule 40 (funcargs -> ( space arglist space ) .)
    }               reduce using rule 40 (funcargs -> ( space arglist space ) .)


state 173

    (38) arglist -> arglist space , . space VARNAME
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 181

state 174

    (42) paramlist -> paramlist space , space VARNAME SPACES VARNAME .

    SPACES          reduce using rule 42 (paramlist -> paramlist space , space VARNAME SPACES VARNAME .)
    )               reduce using rule 42 (paramlist -> paramlist space , space VARNAME SPACES VARNAME .)
    ,               reduce using rule 42 (paramlist -> paramlist space , space VARNAME SPACES VARNAME .)


state 175

    (58) varlist -> VARLT space = space { spnl } .

    NEWLINE         reduce using rule 58 (varlist -> VARLT space = space { spnl } .)
    $end            reduce using rule 58 (varlist -> VARLT space = space { spnl } .)


state 176

    (59) varlist -> VARLT space = space { spnl declist . spnl }
    (56) declist -> declist . spnl , spnl VARNAME space : space blist
    (57) declist -> declist . spnl , spnl VARNAME * space : space blist
    (48) spnl -> . space
    (49) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    space                          shift and go to state 5
    spnl                           shift and go to state 182
    nl                             shift and go to state 4

state 177

    (52) blist -> [ spnl list . spnl ]
    (51) list -> list . , space VARNAME space
    (48) spnl -> . space
    (49) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (33) nl -> . NEWLINE

    ,               shift and go to state 84
    ]               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    spnl                           shift and go to state 183
    space                          shift and go to state 5
    nl                             shift and go to state 4

state 178

    (53) blist -> [ spnl ] .

    SPACES          reduce using rule 53 (blist -> [ spnl ] .)
    NEWLINE         reduce using rule 53 (blist -> [ spnl ] .)
    }               reduce using rule 53 (blist -> [ spnl ] .)
    ,               reduce using rule 53 (blist -> [ spnl ] .)


state 179

    (56) declist -> declist spnl , spnl VARNAME space : . space blist
    (1) space -> .
    (2) space -> . SPACES

    [               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 184

state 180

    (57) declist -> declist spnl , spnl VARNAME * space . : space blist

    :               shift and go to state 185


state 181

    (38) arglist -> arglist space , space . VARNAME

    VARNAME         shift and go to state 186


state 182

    (59) varlist -> VARLT space = space { spnl declist spnl . }
    (56) declist -> declist spnl . , spnl VARNAME space : space blist
    (57) declist -> declist spnl . , spnl VARNAME * space : space blist

    }               shift and go to state 187
    ,               shift and go to state 105


state 183

    (52) blist -> [ spnl list spnl . ]

    ]               shift and go to state 188


state 184

    (56) declist -> declist spnl , spnl VARNAME space : space . blist
    (52) blist -> . [ spnl list spnl ]
    (53) blist -> . [ spnl ]

    [               shift and go to state 156

    blist                          shift and go to state 189

state 185

    (57) declist -> declist spnl , spnl VARNAME * space : . space blist
    (1) space -> .
    (2) space -> . SPACES

    [               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 190

state 186

    (38) arglist -> arglist space , space VARNAME .

    SPACES          reduce using rule 38 (arglist -> arglist space , space VARNAME .)
    )               reduce using rule 38 (arglist -> arglist space , space VARNAME .)
    ,               reduce using rule 38 (arglist -> arglist space , space VARNAME .)


state 187

    (59) varlist -> VARLT space = space { spnl declist spnl } .

    NEWLINE         reduce using rule 59 (varlist -> VARLT space = space { spnl declist spnl } .)
    $end            reduce using rule 59 (varlist -> VARLT space = space { spnl declist spnl } .)


state 188

    (52) blist -> [ spnl list spnl ] .

    SPACES          reduce using rule 52 (blist -> [ spnl list spnl ] .)
    NEWLINE         reduce using rule 52 (blist -> [ spnl list spnl ] .)
    }               reduce using rule 52 (blist -> [ spnl list spnl ] .)
    ,               reduce using rule 52 (blist -> [ spnl list spnl ] .)


state 189

    (56) declist -> declist spnl , spnl VARNAME space : space blist .

    SPACES          reduce using rule 56 (declist -> declist spnl , spnl VARNAME space : space blist .)
    NEWLINE         reduce using rule 56 (declist -> declist spnl , spnl VARNAME space : space blist .)
    }               reduce using rule 56 (declist -> declist spnl , spnl VARNAME space : space blist .)
    ,               reduce using rule 56 (declist -> declist spnl , spnl VARNAME space : space blist .)


state 190

    (57) declist -> declist spnl , spnl VARNAME * space : space . blist
    (52) blist -> . [ spnl list spnl ]
    (53) blist -> . [ spnl ]

    [               shift and go to state 156

    blist                          shift and go to state 191

state 191

    (57) declist -> declist spnl , spnl VARNAME * space : space blist .

    SPACES          reduce using rule 57 (declist -> declist spnl , spnl VARNAME * space : space blist .)
    NEWLINE         reduce using rule 57 (declist -> declist spnl , spnl VARNAME * space : space blist .)
    }               reduce using rule 57 (declist -> declist spnl , spnl VARNAME * space : space blist .)
    ,               reduce using rule 57 (declist -> declist spnl , spnl VARNAME * space : space blist .)

