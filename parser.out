Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     space -> <empty>
Rule 2     space -> SPACES
Rule 3     boolop -> space LTE space
Rule 4     boolop -> space GTE space
Rule 5     boolop -> space < space
Rule 6     boolop -> space > space
Rule 7     boolop -> space = = space
Rule 8     boolop -> space ! = space
Rule 9     boolexp -> VARNAME boolop VARNAME
Rule 10    boolexp -> VARNAME boolop NUMBER
Rule 11    boolexp -> NUMBER boolop VARNAME
Rule 12    boolexp -> NUMBER boolop NUMBER
Rule 13    lhs -> STARS VARNAME
Rule 14    lhs -> VARNAME - > VARNAME
Rule 15    lhs -> VARNAME . VARNAME
Rule 16    rhs -> boolexp
Rule 17    rhs -> lhs
Rule 18    rhs -> VARNAME
Rule 19    rhs -> & VARNAME
Rule 20    rhs -> NUMBER
Rule 21    vardec -> VARNAME SPACES list
Rule 22    vardec -> VARNAME STARS SPACES list
Rule 23    stmt -> vardec
Rule 24    stmt -> lhs space = space rhs
Rule 25    stmt -> VARNAME space = space rhs
Rule 26    stmt -> VARNAME space = space MALLOC ( )
Rule 27    stmt -> READ SPACES VARNAME
Rule 28    stmt -> USE SPACES VARNAME
Rule 29    stmt -> GOTO SPACES NUMBER
Rule 30    stmt -> CALL SPACES VARNAME funcargs
Rule 31    stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER
Rule 32    stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER
Rule 33    tac -> nl MAINCODE :
Rule 34    tac -> tac stmtnl stmt
Rule 35    nl -> NEWLINE
Rule 36    stmtnl -> NEWLINE
Rule 37    funcbody -> stmt
Rule 38    funcbody -> funcbody stmtnl stmt
Rule 39    arglist -> VARNAME
Rule 40    arglist -> arglist space , space VARNAME
Rule 41    funcargs -> ( space )
Rule 42    funcargs -> ( space arglist space )
Rule 43    paramlist -> VARNAME SPACES VARNAME
Rule 44    paramlist -> paramlist space , space VARNAME SPACES VARNAME
Rule 45    funcparams -> ( space )
Rule 46    funcparams -> ( space paramlist space )
Rule 47    func -> FUNCS :
Rule 48    func -> func nl VARNAME funcparams spnl { spnl funcbody spnl }
Rule 49    func -> func nl VARNAME funcparams spnl { spnl }
Rule 50    spnl -> space
Rule 51    spnl -> nl
Rule 52    list -> VARNAME space
Rule 53    list -> list , space VARNAME space
Rule 54    declist -> VARNAME SPACES list
Rule 55    declist -> VARNAME STARS SPACES list
Rule 56    declist -> declist nl VARNAME SPACES list
Rule 57    declist -> declist nl VARNAME STARS SPACES list
Rule 58    structs -> spnl STRT : nl
Rule 59    structs -> structs VARNAME space { spnl declist spnl } nl
Rule 60    structs -> structs VARNAME space { spnl } nl
Rule 61    prog -> structs func tac spnl

Terminals, with rules where they appear

!                    : 8
&                    : 19
(                    : 26 41 42 45 46
)                    : 26 41 42 45 46
,                    : 40 44 53
-                    : 14
.                    : 15
:                    : 33 47 58
<                    : 5
=                    : 7 7 8 24 25 26
>                    : 6 14
CALL                 : 30
FUNCS                : 47
GOTO                 : 29 31 32
GTE                  : 4
IF                   : 31 32
LTE                  : 3
MAINCODE             : 33
MALLOC               : 26
NEWLINE              : 35 36
NUMBER               : 10 11 12 12 20 29 31 32
READ                 : 27
SPACES               : 2 21 22 27 28 29 30 31 31 31 32 32 32 43 44 54 55 56 57
STARS                : 13 22 55 57
STRT                 : 58
USE                  : 28
VARNAME              : 9 9 10 11 13 14 14 15 15 18 19 21 22 25 26 27 28 30 32 39 40 43 43 44 44 48 49 52 53 54 55 56 57 59 60
error                : 
{                    : 48 49 59 60
}                    : 48 49 59 60

Nonterminals, with rules where they appear

arglist              : 40 42
boolexp              : 16 31
boolop               : 9 10 11 12
declist              : 56 57 59
func                 : 48 49 61
funcargs             : 30
funcbody             : 38 48
funcparams           : 48 49
lhs                  : 17 24
list                 : 21 22 53 54 55 56 57
nl                   : 33 48 49 51 56 57 58 59 60
paramlist            : 44 46
prog                 : 0
rhs                  : 24 25
space                : 3 3 4 4 5 5 6 6 7 7 8 8 24 24 25 25 26 26 40 40 41 42 42 44 44 45 46 46 50 52 53 53 59 60
spnl                 : 48 48 48 49 49 58 59 59 60 61
stmt                 : 34 37 38
stmtnl               : 34 38
structs              : 59 60 61
tac                  : 34 61
vardec               : 23

Parsing method: LALR

state 0

    (0) S' -> . prog
    (61) prog -> . structs func tac spnl
    (58) structs -> . spnl STRT : nl
    (59) structs -> . structs VARNAME space { spnl declist spnl } nl
    (60) structs -> . structs VARNAME space { spnl } nl
    (50) spnl -> . space
    (51) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (35) nl -> . NEWLINE

    STRT            reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    prog                           shift and go to state 1
    structs                        shift and go to state 2
    spnl                           shift and go to state 3
    nl                             shift and go to state 4
    space                          shift and go to state 5

state 1

    (0) S' -> prog .



state 2

    (61) prog -> structs . func tac spnl
    (59) structs -> structs . VARNAME space { spnl declist spnl } nl
    (60) structs -> structs . VARNAME space { spnl } nl
    (47) func -> . FUNCS :
    (48) func -> . func nl VARNAME funcparams spnl { spnl funcbody spnl }
    (49) func -> . func nl VARNAME funcparams spnl { spnl }

    VARNAME         shift and go to state 9
    FUNCS           shift and go to state 10

    func                           shift and go to state 8

state 3

    (58) structs -> spnl . STRT : nl

    STRT            shift and go to state 11


state 4

    (51) spnl -> nl .

    STRT            reduce using rule 51 (spnl -> nl .)
    $end            reduce using rule 51 (spnl -> nl .)
    }               reduce using rule 51 (spnl -> nl .)
    VARNAME         reduce using rule 51 (spnl -> nl .)
    {               reduce using rule 51 (spnl -> nl .)
    READ            reduce using rule 51 (spnl -> nl .)
    USE             reduce using rule 51 (spnl -> nl .)
    GOTO            reduce using rule 51 (spnl -> nl .)
    CALL            reduce using rule 51 (spnl -> nl .)
    IF              reduce using rule 51 (spnl -> nl .)
    STARS           reduce using rule 51 (spnl -> nl .)


state 5

    (50) spnl -> space .

    STRT            reduce using rule 50 (spnl -> space .)
    $end            reduce using rule 50 (spnl -> space .)
    }               reduce using rule 50 (spnl -> space .)
    VARNAME         reduce using rule 50 (spnl -> space .)
    {               reduce using rule 50 (spnl -> space .)
    READ            reduce using rule 50 (spnl -> space .)
    USE             reduce using rule 50 (spnl -> space .)
    GOTO            reduce using rule 50 (spnl -> space .)
    CALL            reduce using rule 50 (spnl -> space .)
    IF              reduce using rule 50 (spnl -> space .)
    STARS           reduce using rule 50 (spnl -> space .)


state 6

    (2) space -> SPACES .

    STRT            reduce using rule 2 (space -> SPACES .)
    {               reduce using rule 2 (space -> SPACES .)
    $end            reduce using rule 2 (space -> SPACES .)
    }               reduce using rule 2 (space -> SPACES .)
    VARNAME         reduce using rule 2 (space -> SPACES .)
    =               reduce using rule 2 (space -> SPACES .)
    )               reduce using rule 2 (space -> SPACES .)
    &               reduce using rule 2 (space -> SPACES .)
    NUMBER          reduce using rule 2 (space -> SPACES .)
    STARS           reduce using rule 2 (space -> SPACES .)
    MALLOC          reduce using rule 2 (space -> SPACES .)
    ,               reduce using rule 2 (space -> SPACES .)
    NEWLINE         reduce using rule 2 (space -> SPACES .)
    SPACES          reduce using rule 2 (space -> SPACES .)
    LTE             reduce using rule 2 (space -> SPACES .)
    GTE             reduce using rule 2 (space -> SPACES .)
    <               reduce using rule 2 (space -> SPACES .)
    >               reduce using rule 2 (space -> SPACES .)
    !               reduce using rule 2 (space -> SPACES .)
    READ            reduce using rule 2 (space -> SPACES .)
    USE             reduce using rule 2 (space -> SPACES .)
    GOTO            reduce using rule 2 (space -> SPACES .)
    CALL            reduce using rule 2 (space -> SPACES .)
    IF              reduce using rule 2 (space -> SPACES .)


state 7

    (35) nl -> NEWLINE .

    STRT            reduce using rule 35 (nl -> NEWLINE .)
    VARNAME         reduce using rule 35 (nl -> NEWLINE .)
    MAINCODE        reduce using rule 35 (nl -> NEWLINE .)
    FUNCS           reduce using rule 35 (nl -> NEWLINE .)
    }               reduce using rule 35 (nl -> NEWLINE .)
    {               reduce using rule 35 (nl -> NEWLINE .)
    READ            reduce using rule 35 (nl -> NEWLINE .)
    USE             reduce using rule 35 (nl -> NEWLINE .)
    GOTO            reduce using rule 35 (nl -> NEWLINE .)
    CALL            reduce using rule 35 (nl -> NEWLINE .)
    IF              reduce using rule 35 (nl -> NEWLINE .)
    STARS           reduce using rule 35 (nl -> NEWLINE .)


state 8

    (61) prog -> structs func . tac spnl
    (48) func -> func . nl VARNAME funcparams spnl { spnl funcbody spnl }
    (49) func -> func . nl VARNAME funcparams spnl { spnl }
    (33) tac -> . nl MAINCODE :
    (34) tac -> . tac stmtnl stmt
    (35) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    tac                            shift and go to state 12
    nl                             shift and go to state 13

state 9

    (59) structs -> structs VARNAME . space { spnl declist spnl } nl
    (60) structs -> structs VARNAME . space { spnl } nl
    (1) space -> .
    (2) space -> . SPACES

    {               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 14

state 10

    (47) func -> FUNCS . :

    :               shift and go to state 15


state 11

    (58) structs -> spnl STRT . : nl

    :               shift and go to state 16


state 12

    (61) prog -> structs func tac . spnl
    (34) tac -> tac . stmtnl stmt
    (50) spnl -> . space
    (51) spnl -> . nl
    (36) stmtnl -> . NEWLINE
    (1) space -> .
    (2) space -> . SPACES
    (35) nl -> . NEWLINE

    NEWLINE         shift and go to state 19
    $end            reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    spnl                           shift and go to state 17
    stmtnl                         shift and go to state 18
    space                          shift and go to state 5
    nl                             shift and go to state 4

state 13

    (48) func -> func nl . VARNAME funcparams spnl { spnl funcbody spnl }
    (49) func -> func nl . VARNAME funcparams spnl { spnl }
    (33) tac -> nl . MAINCODE :

    VARNAME         shift and go to state 20
    MAINCODE        shift and go to state 21


state 14

    (59) structs -> structs VARNAME space . { spnl declist spnl } nl
    (60) structs -> structs VARNAME space . { spnl } nl

    {               shift and go to state 22


state 15

    (47) func -> FUNCS : .

    NEWLINE         reduce using rule 47 (func -> FUNCS : .)


state 16

    (58) structs -> spnl STRT : . nl
    (35) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 23

state 17

    (61) prog -> structs func tac spnl .

    $end            reduce using rule 61 (prog -> structs func tac spnl .)


state 18

    (34) tac -> tac stmtnl . stmt
    (23) stmt -> . vardec
    (24) stmt -> . lhs space = space rhs
    (25) stmt -> . VARNAME space = space rhs
    (26) stmt -> . VARNAME space = space MALLOC ( )
    (27) stmt -> . READ SPACES VARNAME
    (28) stmt -> . USE SPACES VARNAME
    (29) stmt -> . GOTO SPACES NUMBER
    (30) stmt -> . CALL SPACES VARNAME funcargs
    (31) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (32) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (21) vardec -> . VARNAME SPACES list
    (22) vardec -> . VARNAME STARS SPACES list
    (13) lhs -> . STARS VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    VARNAME         shift and go to state 27
    READ            shift and go to state 28
    USE             shift and go to state 29
    GOTO            shift and go to state 30
    CALL            shift and go to state 31
    IF              shift and go to state 32
    STARS           shift and go to state 33

    stmt                           shift and go to state 24
    vardec                         shift and go to state 25
    lhs                            shift and go to state 26

state 19

    (36) stmtnl -> NEWLINE .
    (35) nl -> NEWLINE .

    VARNAME         reduce using rule 36 (stmtnl -> NEWLINE .)
    READ            reduce using rule 36 (stmtnl -> NEWLINE .)
    USE             reduce using rule 36 (stmtnl -> NEWLINE .)
    GOTO            reduce using rule 36 (stmtnl -> NEWLINE .)
    CALL            reduce using rule 36 (stmtnl -> NEWLINE .)
    IF              reduce using rule 36 (stmtnl -> NEWLINE .)
    STARS           reduce using rule 36 (stmtnl -> NEWLINE .)
    $end            reduce using rule 35 (nl -> NEWLINE .)
    }               reduce using rule 35 (nl -> NEWLINE .)


state 20

    (48) func -> func nl VARNAME . funcparams spnl { spnl funcbody spnl }
    (49) func -> func nl VARNAME . funcparams spnl { spnl }
    (45) funcparams -> . ( space )
    (46) funcparams -> . ( space paramlist space )

    (               shift and go to state 35

    funcparams                     shift and go to state 34

state 21

    (33) tac -> nl MAINCODE . :

    :               shift and go to state 36


state 22

    (59) structs -> structs VARNAME space { . spnl declist spnl } nl
    (60) structs -> structs VARNAME space { . spnl } nl
    (50) spnl -> . space
    (51) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (35) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    space                          shift and go to state 5
    spnl                           shift and go to state 37
    nl                             shift and go to state 4

state 23

    (58) structs -> spnl STRT : nl .

    VARNAME         reduce using rule 58 (structs -> spnl STRT : nl .)
    FUNCS           reduce using rule 58 (structs -> spnl STRT : nl .)


state 24

    (34) tac -> tac stmtnl stmt .

    NEWLINE         reduce using rule 34 (tac -> tac stmtnl stmt .)
    SPACES          reduce using rule 34 (tac -> tac stmtnl stmt .)
    $end            reduce using rule 34 (tac -> tac stmtnl stmt .)


state 25

    (23) stmt -> vardec .

    NEWLINE         reduce using rule 23 (stmt -> vardec .)
    SPACES          reduce using rule 23 (stmt -> vardec .)
    $end            reduce using rule 23 (stmt -> vardec .)
    }               reduce using rule 23 (stmt -> vardec .)


state 26

    (24) stmt -> lhs . space = space rhs
    (1) space -> .
    (2) space -> . SPACES

    =               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 38

state 27

    (25) stmt -> VARNAME . space = space rhs
    (26) stmt -> VARNAME . space = space MALLOC ( )
    (21) vardec -> VARNAME . SPACES list
    (22) vardec -> VARNAME . STARS SPACES list
    (14) lhs -> VARNAME . - > VARNAME
    (15) lhs -> VARNAME . . VARNAME
    (1) space -> .
    (2) space -> . SPACES

    SPACES          shift and go to state 40
    STARS           shift and go to state 41
    -               shift and go to state 42
    .               shift and go to state 43
    =               reduce using rule 1 (space -> .)

    space                          shift and go to state 39

state 28

    (27) stmt -> READ . SPACES VARNAME

    SPACES          shift and go to state 44


state 29

    (28) stmt -> USE . SPACES VARNAME

    SPACES          shift and go to state 45


state 30

    (29) stmt -> GOTO . SPACES NUMBER

    SPACES          shift and go to state 46


state 31

    (30) stmt -> CALL . SPACES VARNAME funcargs

    SPACES          shift and go to state 47


state 32

    (31) stmt -> IF . SPACES boolexp SPACES GOTO SPACES NUMBER
    (32) stmt -> IF . SPACES VARNAME SPACES GOTO SPACES NUMBER

    SPACES          shift and go to state 48


state 33

    (13) lhs -> STARS . VARNAME

    VARNAME         shift and go to state 49


state 34

    (48) func -> func nl VARNAME funcparams . spnl { spnl funcbody spnl }
    (49) func -> func nl VARNAME funcparams . spnl { spnl }
    (50) spnl -> . space
    (51) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (35) nl -> . NEWLINE

    {               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    nl                             shift and go to state 4
    spnl                           shift and go to state 50
    space                          shift and go to state 5

state 35

    (45) funcparams -> ( . space )
    (46) funcparams -> ( . space paramlist space )
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 51

state 36

    (33) tac -> nl MAINCODE : .

    NEWLINE         reduce using rule 33 (tac -> nl MAINCODE : .)
    SPACES          reduce using rule 33 (tac -> nl MAINCODE : .)
    $end            reduce using rule 33 (tac -> nl MAINCODE : .)


state 37

    (59) structs -> structs VARNAME space { spnl . declist spnl } nl
    (60) structs -> structs VARNAME space { spnl . } nl
    (54) declist -> . VARNAME SPACES list
    (55) declist -> . VARNAME STARS SPACES list
    (56) declist -> . declist nl VARNAME SPACES list
    (57) declist -> . declist nl VARNAME STARS SPACES list

    }               shift and go to state 54
    VARNAME         shift and go to state 52

    declist                        shift and go to state 53

state 38

    (24) stmt -> lhs space . = space rhs

    =               shift and go to state 55


state 39

    (25) stmt -> VARNAME space . = space rhs
    (26) stmt -> VARNAME space . = space MALLOC ( )

    =               shift and go to state 56


state 40

    (21) vardec -> VARNAME SPACES . list
    (2) space -> SPACES .
    (52) list -> . VARNAME space
    (53) list -> . list , space VARNAME space

    =               reduce using rule 2 (space -> SPACES .)
    VARNAME         shift and go to state 57

    list                           shift and go to state 58

state 41

    (22) vardec -> VARNAME STARS . SPACES list

    SPACES          shift and go to state 59


state 42

    (14) lhs -> VARNAME - . > VARNAME

    >               shift and go to state 60


state 43

    (15) lhs -> VARNAME . . VARNAME

    VARNAME         shift and go to state 61


state 44

    (27) stmt -> READ SPACES . VARNAME

    VARNAME         shift and go to state 62


state 45

    (28) stmt -> USE SPACES . VARNAME

    VARNAME         shift and go to state 63


state 46

    (29) stmt -> GOTO SPACES . NUMBER

    NUMBER          shift and go to state 64


state 47

    (30) stmt -> CALL SPACES . VARNAME funcargs

    VARNAME         shift and go to state 65


state 48

    (31) stmt -> IF SPACES . boolexp SPACES GOTO SPACES NUMBER
    (32) stmt -> IF SPACES . VARNAME SPACES GOTO SPACES NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER

    VARNAME         shift and go to state 68
    NUMBER          shift and go to state 67

    boolexp                        shift and go to state 66

state 49

    (13) lhs -> STARS VARNAME .

    SPACES          reduce using rule 13 (lhs -> STARS VARNAME .)
    =               reduce using rule 13 (lhs -> STARS VARNAME .)
    NEWLINE         reduce using rule 13 (lhs -> STARS VARNAME .)
    $end            reduce using rule 13 (lhs -> STARS VARNAME .)
    }               reduce using rule 13 (lhs -> STARS VARNAME .)


state 50

    (48) func -> func nl VARNAME funcparams spnl . { spnl funcbody spnl }
    (49) func -> func nl VARNAME funcparams spnl . { spnl }

    {               shift and go to state 69


state 51

    (45) funcparams -> ( space . )
    (46) funcparams -> ( space . paramlist space )
    (43) paramlist -> . VARNAME SPACES VARNAME
    (44) paramlist -> . paramlist space , space VARNAME SPACES VARNAME

    )               shift and go to state 70
    VARNAME         shift and go to state 72

    paramlist                      shift and go to state 71

state 52

    (54) declist -> VARNAME . SPACES list
    (55) declist -> VARNAME . STARS SPACES list

    SPACES          shift and go to state 73
    STARS           shift and go to state 74


state 53

    (59) structs -> structs VARNAME space { spnl declist . spnl } nl
    (56) declist -> declist . nl VARNAME SPACES list
    (57) declist -> declist . nl VARNAME STARS SPACES list
    (50) spnl -> . space
    (51) spnl -> . nl
    (35) nl -> . NEWLINE
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         shift and go to state 7
    }               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 5
    spnl                           shift and go to state 75
    nl                             shift and go to state 76

state 54

    (60) structs -> structs VARNAME space { spnl } . nl
    (35) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 77

state 55

    (24) stmt -> lhs space = . space rhs
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    &               reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    STARS           reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 78

state 56

    (25) stmt -> VARNAME space = . space rhs
    (26) stmt -> VARNAME space = . space MALLOC ( )
    (1) space -> .
    (2) space -> . SPACES

    MALLOC          reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    &               reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    STARS           reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 79

state 57

    (52) list -> VARNAME . space
    (1) space -> .
    (2) space -> . SPACES

    ,               reduce using rule 1 (space -> .)
    NEWLINE         reduce using rule 1 (space -> .)
    SPACES          reduce using rule 1 (space -> .)
    $end            reduce using rule 1 (space -> .)
    }               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    space                          shift and go to state 80

state 58

    (21) vardec -> VARNAME SPACES list .
    (53) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 21 (vardec -> VARNAME SPACES list .)
    SPACES          reduce using rule 21 (vardec -> VARNAME SPACES list .)
    $end            reduce using rule 21 (vardec -> VARNAME SPACES list .)
    }               reduce using rule 21 (vardec -> VARNAME SPACES list .)
    ,               shift and go to state 81


state 59

    (22) vardec -> VARNAME STARS SPACES . list
    (52) list -> . VARNAME space
    (53) list -> . list , space VARNAME space

    VARNAME         shift and go to state 57

    list                           shift and go to state 82

state 60

    (14) lhs -> VARNAME - > . VARNAME

    VARNAME         shift and go to state 83


state 61

    (15) lhs -> VARNAME . VARNAME .

    SPACES          reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    =               reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    NEWLINE         reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    $end            reduce using rule 15 (lhs -> VARNAME . VARNAME .)
    }               reduce using rule 15 (lhs -> VARNAME . VARNAME .)


state 62

    (27) stmt -> READ SPACES VARNAME .

    NEWLINE         reduce using rule 27 (stmt -> READ SPACES VARNAME .)
    SPACES          reduce using rule 27 (stmt -> READ SPACES VARNAME .)
    $end            reduce using rule 27 (stmt -> READ SPACES VARNAME .)
    }               reduce using rule 27 (stmt -> READ SPACES VARNAME .)


state 63

    (28) stmt -> USE SPACES VARNAME .

    NEWLINE         reduce using rule 28 (stmt -> USE SPACES VARNAME .)
    SPACES          reduce using rule 28 (stmt -> USE SPACES VARNAME .)
    $end            reduce using rule 28 (stmt -> USE SPACES VARNAME .)
    }               reduce using rule 28 (stmt -> USE SPACES VARNAME .)


state 64

    (29) stmt -> GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 29 (stmt -> GOTO SPACES NUMBER .)
    SPACES          reduce using rule 29 (stmt -> GOTO SPACES NUMBER .)
    $end            reduce using rule 29 (stmt -> GOTO SPACES NUMBER .)
    }               reduce using rule 29 (stmt -> GOTO SPACES NUMBER .)


state 65

    (30) stmt -> CALL SPACES VARNAME . funcargs
    (41) funcargs -> . ( space )
    (42) funcargs -> . ( space arglist space )

    (               shift and go to state 85

    funcargs                       shift and go to state 84

state 66

    (31) stmt -> IF SPACES boolexp . SPACES GOTO SPACES NUMBER

    SPACES          shift and go to state 86


state 67

    (11) boolexp -> NUMBER . boolop VARNAME
    (12) boolexp -> NUMBER . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    boolop                         shift and go to state 87
    space                          shift and go to state 88

state 68

    (32) stmt -> IF SPACES VARNAME . SPACES GOTO SPACES NUMBER
    (9) boolexp -> VARNAME . boolop VARNAME
    (10) boolexp -> VARNAME . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    SPACES          shift and go to state 89
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

    boolop                         shift and go to state 90
    space                          shift and go to state 88

state 69

    (48) func -> func nl VARNAME funcparams spnl { . spnl funcbody spnl }
    (49) func -> func nl VARNAME funcparams spnl { . spnl }
    (50) spnl -> . space
    (51) spnl -> . nl
    (1) space -> .
    (2) space -> . SPACES
    (35) nl -> . NEWLINE

    }               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    READ            reduce using rule 1 (space -> .)
    USE             reduce using rule 1 (space -> .)
    GOTO            reduce using rule 1 (space -> .)
    CALL            reduce using rule 1 (space -> .)
    IF              reduce using rule 1 (space -> .)
    STARS           reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6
    NEWLINE         shift and go to state 7

    nl                             shift and go to state 4
    spnl                           shift and go to state 91
    space                          shift and go to state 5

state 70

    (45) funcparams -> ( space ) .

    SPACES          reduce using rule 45 (funcparams -> ( space ) .)
    NEWLINE         reduce using rule 45 (funcparams -> ( space ) .)
    {               reduce using rule 45 (funcparams -> ( space ) .)


state 71

    (46) funcparams -> ( space paramlist . space )
    (44) paramlist -> paramlist . space , space VARNAME SPACES VARNAME
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 92

state 72

    (43) paramlist -> VARNAME . SPACES VARNAME

    SPACES          shift and go to state 93


state 73

    (54) declist -> VARNAME SPACES . list
    (52) list -> . VARNAME space
    (53) list -> . list , space VARNAME space

    VARNAME         shift and go to state 57

    list                           shift and go to state 94

state 74

    (55) declist -> VARNAME STARS . SPACES list

    SPACES          shift and go to state 95


state 75

    (59) structs -> structs VARNAME space { spnl declist spnl . } nl

    }               shift and go to state 96


state 76

    (56) declist -> declist nl . VARNAME SPACES list
    (57) declist -> declist nl . VARNAME STARS SPACES list
    (51) spnl -> nl .

    VARNAME         shift and go to state 97
    }               reduce using rule 51 (spnl -> nl .)


state 77

    (60) structs -> structs VARNAME space { spnl } nl .

    VARNAME         reduce using rule 60 (structs -> structs VARNAME space { spnl } nl .)
    FUNCS           reduce using rule 60 (structs -> structs VARNAME space { spnl } nl .)


state 78

    (24) stmt -> lhs space = space . rhs
    (16) rhs -> . boolexp
    (17) rhs -> . lhs
    (18) rhs -> . VARNAME
    (19) rhs -> . & VARNAME
    (20) rhs -> . NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER
    (13) lhs -> . STARS VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    VARNAME         shift and go to state 101
    &               shift and go to state 102
    NUMBER          shift and go to state 103
    STARS           shift and go to state 33

    lhs                            shift and go to state 98
    rhs                            shift and go to state 99
    boolexp                        shift and go to state 100

state 79

    (25) stmt -> VARNAME space = space . rhs
    (26) stmt -> VARNAME space = space . MALLOC ( )
    (16) rhs -> . boolexp
    (17) rhs -> . lhs
    (18) rhs -> . VARNAME
    (19) rhs -> . & VARNAME
    (20) rhs -> . NUMBER
    (9) boolexp -> . VARNAME boolop VARNAME
    (10) boolexp -> . VARNAME boolop NUMBER
    (11) boolexp -> . NUMBER boolop VARNAME
    (12) boolexp -> . NUMBER boolop NUMBER
    (13) lhs -> . STARS VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    MALLOC          shift and go to state 105
    VARNAME         shift and go to state 101
    &               shift and go to state 102
    NUMBER          shift and go to state 103
    STARS           shift and go to state 33

    rhs                            shift and go to state 104
    boolexp                        shift and go to state 100
    lhs                            shift and go to state 98

state 80

    (52) list -> VARNAME space .

    ,               reduce using rule 52 (list -> VARNAME space .)
    NEWLINE         reduce using rule 52 (list -> VARNAME space .)
    SPACES          reduce using rule 52 (list -> VARNAME space .)
    $end            reduce using rule 52 (list -> VARNAME space .)
    }               reduce using rule 52 (list -> VARNAME space .)


state 81

    (53) list -> list , . space VARNAME space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 106

state 82

    (22) vardec -> VARNAME STARS SPACES list .
    (53) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 22 (vardec -> VARNAME STARS SPACES list .)
    SPACES          reduce using rule 22 (vardec -> VARNAME STARS SPACES list .)
    $end            reduce using rule 22 (vardec -> VARNAME STARS SPACES list .)
    }               reduce using rule 22 (vardec -> VARNAME STARS SPACES list .)
    ,               shift and go to state 81


state 83

    (14) lhs -> VARNAME - > VARNAME .

    SPACES          reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    =               reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    NEWLINE         reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    $end            reduce using rule 14 (lhs -> VARNAME - > VARNAME .)
    }               reduce using rule 14 (lhs -> VARNAME - > VARNAME .)


state 84

    (30) stmt -> CALL SPACES VARNAME funcargs .

    NEWLINE         reduce using rule 30 (stmt -> CALL SPACES VARNAME funcargs .)
    SPACES          reduce using rule 30 (stmt -> CALL SPACES VARNAME funcargs .)
    $end            reduce using rule 30 (stmt -> CALL SPACES VARNAME funcargs .)
    }               reduce using rule 30 (stmt -> CALL SPACES VARNAME funcargs .)


state 85

    (41) funcargs -> ( . space )
    (42) funcargs -> ( . space arglist space )
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 107

state 86

    (31) stmt -> IF SPACES boolexp SPACES . GOTO SPACES NUMBER

    GOTO            shift and go to state 108


state 87

    (11) boolexp -> NUMBER boolop . VARNAME
    (12) boolexp -> NUMBER boolop . NUMBER

    VARNAME         shift and go to state 110
    NUMBER          shift and go to state 109


state 88

    (3) boolop -> space . LTE space
    (4) boolop -> space . GTE space
    (5) boolop -> space . < space
    (6) boolop -> space . > space
    (7) boolop -> space . = = space
    (8) boolop -> space . ! = space

    LTE             shift and go to state 111
    GTE             shift and go to state 112
    <               shift and go to state 113
    >               shift and go to state 114
    =               shift and go to state 115
    !               shift and go to state 116


state 89

    (32) stmt -> IF SPACES VARNAME SPACES . GOTO SPACES NUMBER
    (2) space -> SPACES .

    GOTO            shift and go to state 117
    LTE             reduce using rule 2 (space -> SPACES .)
    GTE             reduce using rule 2 (space -> SPACES .)
    <               reduce using rule 2 (space -> SPACES .)
    >               reduce using rule 2 (space -> SPACES .)
    =               reduce using rule 2 (space -> SPACES .)
    !               reduce using rule 2 (space -> SPACES .)


state 90

    (9) boolexp -> VARNAME boolop . VARNAME
    (10) boolexp -> VARNAME boolop . NUMBER

    VARNAME         shift and go to state 118
    NUMBER          shift and go to state 119


state 91

    (48) func -> func nl VARNAME funcparams spnl { spnl . funcbody spnl }
    (49) func -> func nl VARNAME funcparams spnl { spnl . }
    (37) funcbody -> . stmt
    (38) funcbody -> . funcbody stmtnl stmt
    (23) stmt -> . vardec
    (24) stmt -> . lhs space = space rhs
    (25) stmt -> . VARNAME space = space rhs
    (26) stmt -> . VARNAME space = space MALLOC ( )
    (27) stmt -> . READ SPACES VARNAME
    (28) stmt -> . USE SPACES VARNAME
    (29) stmt -> . GOTO SPACES NUMBER
    (30) stmt -> . CALL SPACES VARNAME funcargs
    (31) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (32) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (21) vardec -> . VARNAME SPACES list
    (22) vardec -> . VARNAME STARS SPACES list
    (13) lhs -> . STARS VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    }               shift and go to state 121
    VARNAME         shift and go to state 27
    READ            shift and go to state 28
    USE             shift and go to state 29
    GOTO            shift and go to state 30
    CALL            shift and go to state 31
    IF              shift and go to state 32
    STARS           shift and go to state 33

    funcbody                       shift and go to state 120
    stmt                           shift and go to state 122
    vardec                         shift and go to state 25
    lhs                            shift and go to state 26

state 92

    (46) funcparams -> ( space paramlist space . )
    (44) paramlist -> paramlist space . , space VARNAME SPACES VARNAME

    )               shift and go to state 123
    ,               shift and go to state 124


state 93

    (43) paramlist -> VARNAME SPACES . VARNAME

    VARNAME         shift and go to state 125


state 94

    (54) declist -> VARNAME SPACES list .
    (53) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 54 (declist -> VARNAME SPACES list .)
    SPACES          reduce using rule 54 (declist -> VARNAME SPACES list .)
    }               reduce using rule 54 (declist -> VARNAME SPACES list .)
    ,               shift and go to state 81


state 95

    (55) declist -> VARNAME STARS SPACES . list
    (52) list -> . VARNAME space
    (53) list -> . list , space VARNAME space

    VARNAME         shift and go to state 57

    list                           shift and go to state 126

state 96

    (59) structs -> structs VARNAME space { spnl declist spnl } . nl
    (35) nl -> . NEWLINE

    NEWLINE         shift and go to state 7

    nl                             shift and go to state 127

state 97

    (56) declist -> declist nl VARNAME . SPACES list
    (57) declist -> declist nl VARNAME . STARS SPACES list

    SPACES          shift and go to state 128
    STARS           shift and go to state 129


state 98

    (17) rhs -> lhs .

    NEWLINE         reduce using rule 17 (rhs -> lhs .)
    SPACES          reduce using rule 17 (rhs -> lhs .)
    $end            reduce using rule 17 (rhs -> lhs .)
    }               reduce using rule 17 (rhs -> lhs .)


state 99

    (24) stmt -> lhs space = space rhs .

    NEWLINE         reduce using rule 24 (stmt -> lhs space = space rhs .)
    SPACES          reduce using rule 24 (stmt -> lhs space = space rhs .)
    $end            reduce using rule 24 (stmt -> lhs space = space rhs .)
    }               reduce using rule 24 (stmt -> lhs space = space rhs .)


state 100

    (16) rhs -> boolexp .

    NEWLINE         reduce using rule 16 (rhs -> boolexp .)
    SPACES          reduce using rule 16 (rhs -> boolexp .)
    $end            reduce using rule 16 (rhs -> boolexp .)
    }               reduce using rule 16 (rhs -> boolexp .)


state 101

    (18) rhs -> VARNAME .
    (9) boolexp -> VARNAME . boolop VARNAME
    (10) boolexp -> VARNAME . boolop NUMBER
    (14) lhs -> VARNAME . - > VARNAME
    (15) lhs -> VARNAME . . VARNAME
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         reduce using rule 18 (rhs -> VARNAME .)
    SPACES          reduce using rule 18 (rhs -> VARNAME .)
    $end            reduce using rule 18 (rhs -> VARNAME .)
    }               reduce using rule 18 (rhs -> VARNAME .)
    -               shift and go to state 42
    .               shift and go to state 43
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    boolop                         shift and go to state 90
    space                          shift and go to state 88

state 102

    (19) rhs -> & . VARNAME

    VARNAME         shift and go to state 130


state 103

    (20) rhs -> NUMBER .
    (11) boolexp -> NUMBER . boolop VARNAME
    (12) boolexp -> NUMBER . boolop NUMBER
    (3) boolop -> . space LTE space
    (4) boolop -> . space GTE space
    (5) boolop -> . space < space
    (6) boolop -> . space > space
    (7) boolop -> . space = = space
    (8) boolop -> . space ! = space
    (1) space -> .
    (2) space -> . SPACES

    NEWLINE         reduce using rule 20 (rhs -> NUMBER .)
    SPACES          reduce using rule 20 (rhs -> NUMBER .)
    $end            reduce using rule 20 (rhs -> NUMBER .)
    }               reduce using rule 20 (rhs -> NUMBER .)
    LTE             reduce using rule 1 (space -> .)
    GTE             reduce using rule 1 (space -> .)
    <               reduce using rule 1 (space -> .)
    >               reduce using rule 1 (space -> .)
    =               reduce using rule 1 (space -> .)
    !               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    boolop                         shift and go to state 87
    space                          shift and go to state 88

state 104

    (25) stmt -> VARNAME space = space rhs .

    NEWLINE         reduce using rule 25 (stmt -> VARNAME space = space rhs .)
    SPACES          reduce using rule 25 (stmt -> VARNAME space = space rhs .)
    $end            reduce using rule 25 (stmt -> VARNAME space = space rhs .)
    }               reduce using rule 25 (stmt -> VARNAME space = space rhs .)


state 105

    (26) stmt -> VARNAME space = space MALLOC . ( )

    (               shift and go to state 131


state 106

    (53) list -> list , space . VARNAME space

    VARNAME         shift and go to state 132


state 107

    (41) funcargs -> ( space . )
    (42) funcargs -> ( space . arglist space )
    (39) arglist -> . VARNAME
    (40) arglist -> . arglist space , space VARNAME

    )               shift and go to state 133
    VARNAME         shift and go to state 135

    arglist                        shift and go to state 134

state 108

    (31) stmt -> IF SPACES boolexp SPACES GOTO . SPACES NUMBER

    SPACES          shift and go to state 136


state 109

    (12) boolexp -> NUMBER boolop NUMBER .

    SPACES          reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    NEWLINE         reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    $end            reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)
    }               reduce using rule 12 (boolexp -> NUMBER boolop NUMBER .)


state 110

    (11) boolexp -> NUMBER boolop VARNAME .

    SPACES          reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    NEWLINE         reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    $end            reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)
    }               reduce using rule 11 (boolexp -> NUMBER boolop VARNAME .)


state 111

    (3) boolop -> space LTE . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 137

state 112

    (4) boolop -> space GTE . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 138

state 113

    (5) boolop -> space < . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 139

state 114

    (6) boolop -> space > . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 140

state 115

    (7) boolop -> space = . = space

    =               shift and go to state 141


state 116

    (8) boolop -> space ! . = space

    =               shift and go to state 142


state 117

    (32) stmt -> IF SPACES VARNAME SPACES GOTO . SPACES NUMBER

    SPACES          shift and go to state 143


state 118

    (9) boolexp -> VARNAME boolop VARNAME .

    SPACES          reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    NEWLINE         reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    $end            reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)
    }               reduce using rule 9 (boolexp -> VARNAME boolop VARNAME .)


state 119

    (10) boolexp -> VARNAME boolop NUMBER .

    SPACES          reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    NEWLINE         reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    $end            reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)
    }               reduce using rule 10 (boolexp -> VARNAME boolop NUMBER .)


state 120

    (48) func -> func nl VARNAME funcparams spnl { spnl funcbody . spnl }
    (38) funcbody -> funcbody . stmtnl stmt
    (50) spnl -> . space
    (51) spnl -> . nl
    (36) stmtnl -> . NEWLINE
    (1) space -> .
    (2) space -> . SPACES
    (35) nl -> . NEWLINE

    NEWLINE         shift and go to state 19
    }               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    nl                             shift and go to state 4
    spnl                           shift and go to state 144
    stmtnl                         shift and go to state 145
    space                          shift and go to state 5

state 121

    (49) func -> func nl VARNAME funcparams spnl { spnl } .

    NEWLINE         reduce using rule 49 (func -> func nl VARNAME funcparams spnl { spnl } .)


state 122

    (37) funcbody -> stmt .

    NEWLINE         reduce using rule 37 (funcbody -> stmt .)
    SPACES          reduce using rule 37 (funcbody -> stmt .)
    }               reduce using rule 37 (funcbody -> stmt .)


state 123

    (46) funcparams -> ( space paramlist space ) .

    SPACES          reduce using rule 46 (funcparams -> ( space paramlist space ) .)
    NEWLINE         reduce using rule 46 (funcparams -> ( space paramlist space ) .)
    {               reduce using rule 46 (funcparams -> ( space paramlist space ) .)


state 124

    (44) paramlist -> paramlist space , . space VARNAME SPACES VARNAME
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 146

state 125

    (43) paramlist -> VARNAME SPACES VARNAME .

    SPACES          reduce using rule 43 (paramlist -> VARNAME SPACES VARNAME .)
    )               reduce using rule 43 (paramlist -> VARNAME SPACES VARNAME .)
    ,               reduce using rule 43 (paramlist -> VARNAME SPACES VARNAME .)


state 126

    (55) declist -> VARNAME STARS SPACES list .
    (53) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 55 (declist -> VARNAME STARS SPACES list .)
    SPACES          reduce using rule 55 (declist -> VARNAME STARS SPACES list .)
    }               reduce using rule 55 (declist -> VARNAME STARS SPACES list .)
    ,               shift and go to state 81


state 127

    (59) structs -> structs VARNAME space { spnl declist spnl } nl .

    VARNAME         reduce using rule 59 (structs -> structs VARNAME space { spnl declist spnl } nl .)
    FUNCS           reduce using rule 59 (structs -> structs VARNAME space { spnl declist spnl } nl .)


state 128

    (56) declist -> declist nl VARNAME SPACES . list
    (52) list -> . VARNAME space
    (53) list -> . list , space VARNAME space

    VARNAME         shift and go to state 57

    list                           shift and go to state 147

state 129

    (57) declist -> declist nl VARNAME STARS . SPACES list

    SPACES          shift and go to state 148


state 130

    (19) rhs -> & VARNAME .

    NEWLINE         reduce using rule 19 (rhs -> & VARNAME .)
    SPACES          reduce using rule 19 (rhs -> & VARNAME .)
    $end            reduce using rule 19 (rhs -> & VARNAME .)
    }               reduce using rule 19 (rhs -> & VARNAME .)


state 131

    (26) stmt -> VARNAME space = space MALLOC ( . )

    )               shift and go to state 149


state 132

    (53) list -> list , space VARNAME . space
    (1) space -> .
    (2) space -> . SPACES

    ,               reduce using rule 1 (space -> .)
    NEWLINE         reduce using rule 1 (space -> .)
    SPACES          reduce using rule 1 (space -> .)
    $end            reduce using rule 1 (space -> .)
    }               reduce using rule 1 (space -> .)

  ! SPACES          [ shift and go to state 6 ]

    space                          shift and go to state 150

state 133

    (41) funcargs -> ( space ) .

    NEWLINE         reduce using rule 41 (funcargs -> ( space ) .)
    SPACES          reduce using rule 41 (funcargs -> ( space ) .)
    $end            reduce using rule 41 (funcargs -> ( space ) .)
    }               reduce using rule 41 (funcargs -> ( space ) .)


state 134

    (42) funcargs -> ( space arglist . space )
    (40) arglist -> arglist . space , space VARNAME
    (1) space -> .
    (2) space -> . SPACES

    )               reduce using rule 1 (space -> .)
    ,               reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 151

state 135

    (39) arglist -> VARNAME .

    SPACES          reduce using rule 39 (arglist -> VARNAME .)
    )               reduce using rule 39 (arglist -> VARNAME .)
    ,               reduce using rule 39 (arglist -> VARNAME .)


state 136

    (31) stmt -> IF SPACES boolexp SPACES GOTO SPACES . NUMBER

    NUMBER          shift and go to state 152


state 137

    (3) boolop -> space LTE space .

    VARNAME         reduce using rule 3 (boolop -> space LTE space .)
    NUMBER          reduce using rule 3 (boolop -> space LTE space .)


state 138

    (4) boolop -> space GTE space .

    VARNAME         reduce using rule 4 (boolop -> space GTE space .)
    NUMBER          reduce using rule 4 (boolop -> space GTE space .)


state 139

    (5) boolop -> space < space .

    VARNAME         reduce using rule 5 (boolop -> space < space .)
    NUMBER          reduce using rule 5 (boolop -> space < space .)


state 140

    (6) boolop -> space > space .

    VARNAME         reduce using rule 6 (boolop -> space > space .)
    NUMBER          reduce using rule 6 (boolop -> space > space .)


state 141

    (7) boolop -> space = = . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 153

state 142

    (8) boolop -> space ! = . space
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    NUMBER          reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 154

state 143

    (32) stmt -> IF SPACES VARNAME SPACES GOTO SPACES . NUMBER

    NUMBER          shift and go to state 155


state 144

    (48) func -> func nl VARNAME funcparams spnl { spnl funcbody spnl . }

    }               shift and go to state 156


state 145

    (38) funcbody -> funcbody stmtnl . stmt
    (23) stmt -> . vardec
    (24) stmt -> . lhs space = space rhs
    (25) stmt -> . VARNAME space = space rhs
    (26) stmt -> . VARNAME space = space MALLOC ( )
    (27) stmt -> . READ SPACES VARNAME
    (28) stmt -> . USE SPACES VARNAME
    (29) stmt -> . GOTO SPACES NUMBER
    (30) stmt -> . CALL SPACES VARNAME funcargs
    (31) stmt -> . IF SPACES boolexp SPACES GOTO SPACES NUMBER
    (32) stmt -> . IF SPACES VARNAME SPACES GOTO SPACES NUMBER
    (21) vardec -> . VARNAME SPACES list
    (22) vardec -> . VARNAME STARS SPACES list
    (13) lhs -> . STARS VARNAME
    (14) lhs -> . VARNAME - > VARNAME
    (15) lhs -> . VARNAME . VARNAME

    VARNAME         shift and go to state 27
    READ            shift and go to state 28
    USE             shift and go to state 29
    GOTO            shift and go to state 30
    CALL            shift and go to state 31
    IF              shift and go to state 32
    STARS           shift and go to state 33

    stmt                           shift and go to state 157
    vardec                         shift and go to state 25
    lhs                            shift and go to state 26

state 146

    (44) paramlist -> paramlist space , space . VARNAME SPACES VARNAME

    VARNAME         shift and go to state 158


state 147

    (56) declist -> declist nl VARNAME SPACES list .
    (53) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 56 (declist -> declist nl VARNAME SPACES list .)
    SPACES          reduce using rule 56 (declist -> declist nl VARNAME SPACES list .)
    }               reduce using rule 56 (declist -> declist nl VARNAME SPACES list .)
    ,               shift and go to state 81


state 148

    (57) declist -> declist nl VARNAME STARS SPACES . list
    (52) list -> . VARNAME space
    (53) list -> . list , space VARNAME space

    VARNAME         shift and go to state 57

    list                           shift and go to state 159

state 149

    (26) stmt -> VARNAME space = space MALLOC ( ) .

    NEWLINE         reduce using rule 26 (stmt -> VARNAME space = space MALLOC ( ) .)
    SPACES          reduce using rule 26 (stmt -> VARNAME space = space MALLOC ( ) .)
    $end            reduce using rule 26 (stmt -> VARNAME space = space MALLOC ( ) .)
    }               reduce using rule 26 (stmt -> VARNAME space = space MALLOC ( ) .)


state 150

    (53) list -> list , space VARNAME space .

    ,               reduce using rule 53 (list -> list , space VARNAME space .)
    NEWLINE         reduce using rule 53 (list -> list , space VARNAME space .)
    SPACES          reduce using rule 53 (list -> list , space VARNAME space .)
    $end            reduce using rule 53 (list -> list , space VARNAME space .)
    }               reduce using rule 53 (list -> list , space VARNAME space .)


state 151

    (42) funcargs -> ( space arglist space . )
    (40) arglist -> arglist space . , space VARNAME

    )               shift and go to state 160
    ,               shift and go to state 161


state 152

    (31) stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 31 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    SPACES          reduce using rule 31 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    $end            reduce using rule 31 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)
    }               reduce using rule 31 (stmt -> IF SPACES boolexp SPACES GOTO SPACES NUMBER .)


state 153

    (7) boolop -> space = = space .

    VARNAME         reduce using rule 7 (boolop -> space = = space .)
    NUMBER          reduce using rule 7 (boolop -> space = = space .)


state 154

    (8) boolop -> space ! = space .

    VARNAME         reduce using rule 8 (boolop -> space ! = space .)
    NUMBER          reduce using rule 8 (boolop -> space ! = space .)


state 155

    (32) stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .

    NEWLINE         reduce using rule 32 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    SPACES          reduce using rule 32 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    $end            reduce using rule 32 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)
    }               reduce using rule 32 (stmt -> IF SPACES VARNAME SPACES GOTO SPACES NUMBER .)


state 156

    (48) func -> func nl VARNAME funcparams spnl { spnl funcbody spnl } .

    NEWLINE         reduce using rule 48 (func -> func nl VARNAME funcparams spnl { spnl funcbody spnl } .)


state 157

    (38) funcbody -> funcbody stmtnl stmt .

    NEWLINE         reduce using rule 38 (funcbody -> funcbody stmtnl stmt .)
    SPACES          reduce using rule 38 (funcbody -> funcbody stmtnl stmt .)
    }               reduce using rule 38 (funcbody -> funcbody stmtnl stmt .)


state 158

    (44) paramlist -> paramlist space , space VARNAME . SPACES VARNAME

    SPACES          shift and go to state 162


state 159

    (57) declist -> declist nl VARNAME STARS SPACES list .
    (53) list -> list . , space VARNAME space

    NEWLINE         reduce using rule 57 (declist -> declist nl VARNAME STARS SPACES list .)
    SPACES          reduce using rule 57 (declist -> declist nl VARNAME STARS SPACES list .)
    }               reduce using rule 57 (declist -> declist nl VARNAME STARS SPACES list .)
    ,               shift and go to state 81


state 160

    (42) funcargs -> ( space arglist space ) .

    NEWLINE         reduce using rule 42 (funcargs -> ( space arglist space ) .)
    SPACES          reduce using rule 42 (funcargs -> ( space arglist space ) .)
    $end            reduce using rule 42 (funcargs -> ( space arglist space ) .)
    }               reduce using rule 42 (funcargs -> ( space arglist space ) .)


state 161

    (40) arglist -> arglist space , . space VARNAME
    (1) space -> .
    (2) space -> . SPACES

    VARNAME         reduce using rule 1 (space -> .)
    SPACES          shift and go to state 6

    space                          shift and go to state 163

state 162

    (44) paramlist -> paramlist space , space VARNAME SPACES . VARNAME

    VARNAME         shift and go to state 164


state 163

    (40) arglist -> arglist space , space . VARNAME

    VARNAME         shift and go to state 165


state 164

    (44) paramlist -> paramlist space , space VARNAME SPACES VARNAME .

    SPACES          reduce using rule 44 (paramlist -> paramlist space , space VARNAME SPACES VARNAME .)
    )               reduce using rule 44 (paramlist -> paramlist space , space VARNAME SPACES VARNAME .)
    ,               reduce using rule 44 (paramlist -> paramlist space , space VARNAME SPACES VARNAME .)


state 165

    (40) arglist -> arglist space , space VARNAME .

    SPACES          reduce using rule 40 (arglist -> arglist space , space VARNAME .)
    )               reduce using rule 40 (arglist -> arglist space , space VARNAME .)
    ,               reduce using rule 40 (arglist -> arglist space , space VARNAME .)

